# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Hiroyuki Wada <wadahiro@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ===
#: source/server_admin/topics/sessions/offline.adoc:3
#, no-wrap
msgid "Offline Access"
msgstr "オフライン・アクセス"

#. type: Plain text
#: source/server_admin/topics/sessions/offline.adoc:10
msgid ""
"Offline access is a feature described in http://openid.net/specs/openid-"
"connect-core-1_0.html#OfflineAccess[OpenID Connect specification] .  The "
"idea is that during login, your client application will request an Offline "
"token instead of a classic Refresh token.  The application can save this "
"offline token in a database or on disk and can use it later even if user is "
"logged out.  This is useful if your application needs to do some \"offline\""
" actions on behalf of user even when the user is not online.  An example is "
"a periodic backup of some data every night."
msgstr ""
"オフライン・アクセスは、 http://openid.net/specs/openid-connect-core-"
"1_0.html#OfflineAccess[OpenID Connect仕様] "
"で説明されている機能です。このアイディアは、ログイン中にクライアント・アプリケーションが古典的なリフレッシュトークンの代わりにオフライントークンを要求するというものです。アプリケーションはこのオフライントークンをデータベースまたはディスクに保存し、ユーザーがログアウトしても後で使用できます。これは、ユーザーがオンラインでなくても、アプリケーションがユーザーのために何らかの"
" \"オフライン\" アクションを実行する必要がある場合に便利です。一例として、毎晩の何らかのデータの定期的なバックアップがあります。"

#. type: Plain text
#: source/server_admin/topics/sessions/offline.adoc:12
msgid ""
"Your application is responsible for persisting the offline token in some "
"storage (usually a database) and then using it to manually retrieve new "
"access token from {project_name} server."
msgstr ""
"アプリケーションは、一部のストレージ（通常はデータベース）にオフライントークンを永続化し、それを使用して{project_name}サーバーから新しいアクセストークンを手動で取得する役割を担います。"

#. type: Plain text
#: source/server_admin/topics/sessions/offline.adoc:17
msgid ""
"The difference between a classic Refresh token and an Offline token is, that"
" an offline token will never expire and is not subject of `SSO Session Idle "
"timeout` .  The offline token is valid even after a user logout or server "
"restart.  However by default you do need to use the offline token for a "
"refresh token action at least once per 30 days (this value, `Offline Session"
" Idle timeout`, can be changed in the administration console in the `Tokens`"
" tab under `Realm Settings`). Also if you enable the option `Revoke refresh "
"tokens`, then each offline token can be used just once.  So after refresh, "
"you always need to store the new offline token from refresh response into "
"your DB instead of the previous one."
msgstr ""
"従来のリフレッシュトークンとオフライントークンの違いは、オフライントークンは期限切れせず、 `SSO Session Idle timeout` "
"の対象ではないということです。オフライントークンは、ユーザー・ログアウトまたはサーバーの再起動後も有効です。ただしデフォルトでは、オフライントークンを少なくとも30日に1回、トークン更新アクションに使用する必要があります（この値は、管理コンソールの"
" `Realm Settings` の `Tokens` タブの `Offline Session Idle timeout` "
"で変更できます）。また、オプションの `Revoke refresh tokens` "
"を有効にした場合、各オフライントークンは1回だけしか使用できません。そのためリフレッシュ後は、リフレッシュ・レスポンス内の新しいオフライントークンを常に以前のトークンの代わりにDBに保存する必要があります。"

#. type: Plain text
#: source/server_admin/topics/sessions/offline.adoc:22
msgid ""
"Users can view and revoke offline tokens that have been granted by them in "
"the <<_account-service, User Account Service>>.  The admin user can revoke "
"offline tokens for individual users in admin console in the `Consents` tab "
"of a particular user.  The admin can also view all the offline tokens issued"
" in the `Offline Access` tab of each client.  Offline tokens can also be "
"revoked by setting a <<_revocation-policy, revocation policy>>."
msgstr ""
"ユーザーは、<<_account-service, "
"ユーザー・アカウント・サービス>>で付与されたオフライントークンの表示と取り消しができます。管理ユーザーは、管理コンソールの特定ユーザーの "
"`Consents` タブで、個々のユーザーのオフライントークンを取り消すことができます。管理者は各クライアントの `Offline Access` "
"タブで、発行されたすべてのオフライントークンを表示することもできます。オフライントークンは、<<_revocation-policy, "
"失効ポリシー>>を設定することによっても取り消すことができます。"

#. type: Plain text
#: source/server_admin/topics/sessions/offline.adoc:25
msgid ""
"To be able to issue an offline token, users need to have the role mapping "
"for the realm-level role `offline_access`.  Clients also need to have that "
"role in their scope."
msgstr ""
"オフライントークンを発行できるようにするには、ユーザーにレルムレベルのロール  `offline_access` "
"のロールマッピングが必要です。クライアントもスコープにそのロールを持っている必要があります。"

#. type: Plain text
#: source/server_admin/topics/sessions/offline.adoc:29
msgid ""
"The client can request an offline token by adding the parameter "
"`scope=offline_access` when sending authorization request to {project_name}."
"  The {project_name} OIDC client adapter automatically adds this parameter "
"when you use it to access secured URL of your application (i.e.  "
"$$http://localhost:8080/customer-portal/secured?scope=offline_access$$). The"
" Direct Access Grant and Service Accounts also support offline tokens if you"
" include `scope=offline_access` in the body of the authentication request."
msgstr ""
"クライアントは、{project_name}に認可リクエストを送信するときに、パラメーター `scope=offline_access` "
"を追加することにより、オフライントークンを要求できます。{project_name} "
"OIDCクライアント・アダプターは、アプリケーションのセキュリティー保護されたURL（$$http://localhost:8080/customer-"
"portal/secured?scope=offline_access$$ "
"）にアクセスするときに、このパラメータを自動的に追加します。ダイレクト・アクセス・グラントとサービス・アカウントは、認証リクエストのボディーに "
"`scope=offline_access` を含めると、オフライントークンもサポートします。"
