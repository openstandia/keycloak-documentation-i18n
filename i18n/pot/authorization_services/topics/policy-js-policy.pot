# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#, no-wrap
msgid "*Name*\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*Description*\n"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Title ==
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*Logic*\n"
msgstr ""

#. type: Plain text
msgid ""
"The <<_policy_logic, Logic>> of this policy to apply after the other "
"conditions have been evaluated."
msgstr ""

#. type: Plain text
msgid "A string containing details about this policy."
msgstr ""

#. type: Plain text
msgid ""
"A human-readable and unique string describing the policy. A best practice is "
"to use names that are closely related to your business and security "
"requirements, so you can identify them more easily."
msgstr ""

#. type: Title =
#, no-wrap
msgid "JavaScript-Based Policy"
msgstr ""

#. type: Plain text
msgid ""
"You can use this type of policy to define conditions for your permissions "
"using JavaScript. It is one of the rule-based policy types supported by "
"{project_name}, and provides flexibility to write any policy based on the "
"<<_policy_evaluation_api, Evaluation API>>."
msgstr ""

#. type: Plain text
msgid ""
"To create a new JavaScript-based policy, select *JavaScript* in the dropdown "
"list in the upper right corner of the policy listing."
msgstr ""

#. type: Block title
#, no-wrap
msgid "Add JavaScript Policy"
msgstr ""

#. type: Plain text
msgid ""
"image:{project_images}/policy/create-js.png[alt=\"Add JavaScript Policy\"]"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "*Code*\n"
msgstr ""

#. type: Plain text
msgid "The JavaScript code providing the conditions for this policy."
msgstr ""

#. type: Plain text
msgid ""
"Here is a simple example of a JavaScript-based policy that uses attribute-"
"based access control (ABAC) to define a condition based on an attribute "
"obtained from the execution context:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var contextAttributes = context.getAttributes();\n"
"\n"
"if (contextAttributes.containsValue('kc.client.network.ip_address', '127.0.0.1')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"You can also use Role-Based Access Control (RBAC) in your policies. In the "
"example below, we check if an user is granted with a `keycloak_user` *realm* "
"role:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"\n"
"if (identity.hasRealmRole('keycloak_user')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"Or you can check if an user is granted with a `my-client-role` *client* "
"role, where `my-client` is the client id of the client application:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"\n"
"if (identity.hasClientRole('my-client', 'my-client-role')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"You can also use a combination of several access control mechanisms. The "
"example below shows how roles(RBAC) and claims/attributes(ABAC) checks can "
"be used within the same policy. In this case we check if user is granted "
"with `admin` role or has an e-mail from `keycloak.org` domain:"
msgstr ""

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"var attributes = identity.getAttributes();\n"
"var email = attributes.getValue('email').asString(0);\n"
"\n"
"if (identity.hasRealmRole('admin') || email.endsWith('@keycloak.org')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"When writing your own rules, keep in mind that the *$evaluation* object is "
"an object implementing *org.keycloak.authorization.policy.evaluation."
"Evaluation*. For more information about what you can access from this "
"interface, see the <<_policy_evaluation_api, Evaluation API>>."
msgstr ""
