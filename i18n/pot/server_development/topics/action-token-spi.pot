# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Attribute :developerguide_actiontoken_name:
#, no-wrap
msgid "Action Token SPI"
msgstr ""

#. type: Plain text
msgid ""
"An action token is a special instance of Json Web Token (JWT) that permits "
"its bearer to perform some actions, e. g. to reset a password or validate e-"
"mail address. They are usually sent to users in form of a link that points "
"to an endpoint processing action tokens for a particular realm."
msgstr ""

#. type: Plain text
msgid "{project_name} offers four basic token types allowing the bearer to:"
msgstr ""

#. type: Plain text
msgid "Reset credentials"
msgstr ""

#. type: Plain text
msgid "Confirm e-mail address"
msgstr ""

#. type: Plain text
msgid "Execute required action(s)"
msgstr ""

#. type: Plain text
msgid ""
"Confirm linking of an account with account in external identity provider"
msgstr ""

#. type: Plain text
msgid ""
"In addition to that, it is possible to implement any functionality that "
"initiates or modifies authentication session using action token SPI, details "
"of which are described in the text below."
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Anatomy of Action Token"
msgstr ""

#. type: Plain text
msgid ""
"Action token is a standard Json Web Token signed with active realm key where "
"the payload contains several fields:"
msgstr ""

#. type: Plain text
msgid "`typ` - Identification of the action (e.g. `verify-email`)"
msgstr ""

#. type: Plain text
msgid "`iat` and `exp` - Times of token validity"
msgstr ""

#. type: Plain text
msgid "`sub` - ID of the user"
msgstr ""

#. type: Plain text
msgid "`azp` - Client name"
msgstr ""

#. type: Plain text
msgid "`iss` - Issuer - URL of the issuing realm"
msgstr ""

#. type: Plain text
msgid "`aud` - Audience - list containing URL of the issuing realm"
msgstr ""

#. type: Plain text
msgid "`asid` - ID of the authentication session (_optional_)"
msgstr ""

#. type: Plain text
msgid ""
"`nonce` - Random nonce to guarantee uniqueness of use if the operation can "
"only be executed once (_optional_)"
msgstr ""

#. type: Plain text
msgid ""
"In addition, an action token can contain any number of custom fields "
"serializable into JSON."
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Action Token Processing"
msgstr ""

#. type: Plain text
msgid ""
"When an action token is passed to a {project_name} endpoint `_KEYCLOAK_ROOT_/"
"auth/realms/master/login-actions/action-token` via `key` parameter, it is "
"validated and a proper action token handler is executed. The processing "
"always takes place in a context of an authentication session, either a fresh "
"one or the action token service joins an existing authentication session "
"(details are described below). The action token handler can perform actions "
"prescribed by the token (often it alters the authentication session) and "
"results into an HTTP response (e.g. it can continue in authentication or "
"display an information/error page). These steps are detailed below."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"*Basic action token validation.* Signature and time validity is checked, and action token handler is determined based\n"
"on `typ` field.\n"
msgstr ""

#. type: Plain text
msgid ""
"[[determining-auth-sess]]*Determining authentication session.* If the action "
"token URL was opened in browser with existing authentication session, and "
"the token contains authentication session ID matching the authentication "
"session from the browser, action token validation and handling will attach "
"this ongoing authentication session. Otherwise, action token handler creates "
"a fresh authentication session that replaces any other authentication "
"session present at that time in the browser."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"*Token validations specific for token type.* Action token endpoint logic validates that the user (`sub` field) and\n"
"client (`azp`) from the token exist, are valid and not disabled. Then it validates all custom validations defined in the\n"
"action token handler. Furthermore, token handler can request this token be single-use. Already used tokens would then be\n"
"rejected by action token endpoint logic.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"*Performing the action.* After all these validations, action token handler code is called that performs the actual\n"
"action according to parameters in the token.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"*Invalidation of single-Use tokens.* If the token is set to single-use, once the authentication flow finishes, the\n"
"action token is invalidated.\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Implement Your Own Action Token and its Handler"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "How to Create an Action Token"
msgstr ""

#. type: Plain text
msgid ""
"As action token is just a signed JWT with few mandatory fields (see "
"<<_action_token_anatomy,Anatomy of action token>> above), it can be "
"serialized and signed as such using Keycloak's `JWSBuilder` class. This way "
"has been already implemented in `serialize(session, realm, uriInfo)` method "
"of `org.keycloak.authentication.actiontoken.DefaultActionToken` and can be "
"leveraged by implementors by using that class for tokens instead of plain "
"`JsonWebToken`."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Packaging Classes and Deployment"
msgstr ""

#. type: Plain text
msgid ""
"To plug your own action token and its handler, you need to implement few "
"interfaces on server side:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"`org.keycloak.authentication.actiontoken.ActionTokenHandler` - actual handler of action token for a particular\n"
"action (i.e. for a given value of `typ` token field).   \n"
msgstr ""

#. type: Plain text
msgid ""
"The central method in that interface is `handleToken(token, context)` which "
"defines actual operation executed upon receiving the action token. Usually "
"it is some alteration of authentication session notes but generally it can "
"be arbitrary. This method is only called if all verifiers (including those "
"defined in `getVerifiers(context)`) have succeeded, and it is guaranteed "
"that the `token` would be of the class returned by `getTokenClass()` method."
msgstr ""

#. type: Plain text
msgid ""
"To be able to determine whether the action token was issued for the current "
"authentication session as described in <<determining-auth-sess,Item 2 "
"above>>, method for extracting authentication session ID has to be declared "
"in `getAuthenticationSessionIdFromToken(token, context)` method. The "
"implementation in `DefaultActionToken` returns the value of `asid` field "
"from the token if it is defined. Note that you can override that method to "
"return current authentication session ID regardless of the token - that way "
"you can create tokens that would step into the ongoing authentication flow "
"before any authentication flow would be started."
msgstr ""

#. type: Plain text
msgid ""
"If the authentication session from the token does not match the current one, "
"the action token handler would be asked to start a fresh one by calling "
"`startFreshAuthenticationSession(token, context)`. It can throw a "
"`VerificationException` (or better its more descriptive variant "
"`ExplainedTokenVerificationException`) to signal that would be forbidden."
msgstr ""

#. type: Plain text
msgid ""
"The token handler also determines via method `canUseTokenRepeatedly(token, "
"context)` whether the token would be invalidated after it is used and "
"authentication completes. Note that if you would have a flow utilizing "
"multiple action token, only the last token would be invalidated. In that "
"case, you should use `org.keycloak.models.ActionTokenStoreProvider` in "
"action token handler to invalidate the used tokens manually."
msgstr ""

#. type: Plain text
msgid ""
"Default implementation of most of the `ActionTokenHandler` methods is the "
"`org.keycloak.authentication.actiontoken.AbstractActionTokenHander` abstract "
"class in `keycloak-services` module. The only method that needs to be "
"implemented is `handleToken(token, context)` that performs the actual action."
msgstr ""

#. type: Plain text
msgid ""
"`org.keycloak.authentication.actiontoken.ActionTokenHandlerFactory` - "
"factory that instantiates action token handler. Implementations have to "
"override `getId()` to return value that must match precisely the value of "
"`typ` field in the action token."
msgstr ""

#. type: Plain text
msgid ""
"Note that you have to register the custom `ActionTokenHandlerFactory` "
"implementation as explained in the <<_providers,Service Provider "
"Interfaces>> section of this guide."
msgstr ""

#. type: Plain text
msgid ""
"If the action token you are implementing contains any custom fields that "
"should be serializabled to JSON fields, you should consider implementing a "
"descendant of `org.keycloak.representations.JsonWebToken` class that would "
"implement `org.keycloak.models.ActionTokenKeyModel` interface. In that case, "
"you can take advantage of the existing `org.keycloak.authentication."
"actiontoken.DefaultActionToken` class as it already satisfies both these "
"conditions, and either use it directly or implement its child, the fields of "
"which can be annotated with appropriate Jackson annotations, e.g. `com."
"fasterxml.jackson.annotation.JsonProperty` to serialize them to JSON."
msgstr ""
