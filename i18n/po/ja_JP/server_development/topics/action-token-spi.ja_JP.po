# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: jic_m_mito <jic-m-mito@nri.co.jp>, 2018\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Attribute :developerguide_actiontoken_name:
#, no-wrap
msgid "Action Token SPI"
msgstr "アクション・トークンSPI"

#. type: Plain text
msgid ""
"An action token is a special instance of Json Web Token (JWT) that permits "
"its bearer to perform some actions, e. g. to reset a password or validate "
"e-mail address. They are usually sent to users in form of a link that points"
" to an endpoint processing action tokens for a particular realm."
msgstr ""
"アクション・トークンとは、Json Web "
"Token（JWT）の特別なインスタンスで、そのベアラーがいくつかの動作を実行できるようにするものです。たとえば、パスワードをリセットしたり、電子メールアドレスを検証したりすることができます。それらは通常、特定のレルムのアクション・トークンを処理するエンドポイントを指し示すリンクのフォームでユーザーに送信されます。"

#. type: Plain text
msgid "{project_name} offers four basic token types allowing the bearer to:"
msgstr "{project_name}は、4つの基本のトークンタイプを提供して、ベアラーが以下を実行できるようにします。"

#. type: Plain text
msgid "Reset credentials"
msgstr "クレデンシャルのリセット"

#. type: Plain text
msgid "Confirm e-mail address"
msgstr "電子メールアドレスの確認"

#. type: Plain text
msgid "Execute required action(s)"
msgstr "必須アクションの実行"

#. type: Plain text
msgid ""
"Confirm linking of an account with account in external identity provider"
msgstr "外部のアイデンティティー・プロバイダーのアカウントを使用した、アカウントのリンク付けの確認"

#. type: Plain text
msgid ""
"In addition to that, it is possible to implement any functionality that "
"initiates or modifies authentication session using action token SPI, details"
" of which are described in the text below."
msgstr ""
"これに加えて、アクショントークンSPIを使用して認証セッションを開始したり、変更したりする機能を実装することができます。これについて、詳しくは、以下で説明していきます。"

#. type: Title ===
#, no-wrap
msgid "Anatomy of Action Token"
msgstr "アクション・トークンの解剖"

#. type: Plain text
msgid ""
"Action token is a standard Json Web Token signed with active realm key where"
" the payload contains several fields:"
msgstr "アクション・トークンは、ペイロードに複数のフィールドが含まれている、アクティブなレルム鍵で署名された標準のJson Webトークンです。"

#. type: Plain text
msgid "`typ` - Identification of the action (e.g. `verify-email`)"
msgstr "`typ` - アクションの識別（例： `verify-email` ）"

#. type: Plain text
msgid "`iat` and `exp` - Times of token validity"
msgstr "`iat` と `exp` - トークンの有効期限"

#. type: Plain text
msgid "`sub` - ID of the user"
msgstr "`sub` - ユーザーのID"

#. type: Plain text
msgid "`azp` - Client name"
msgstr "`azp` - クライアント名"

#. type: Plain text
msgid "`iss` - Issuer - URL of the issuing realm"
msgstr "`iss` - 発行者 - 発行するレルムのURL"

#. type: Plain text
msgid "`aud` - Audience - list containing URL of the issuing realm"
msgstr "`aud` - オーディエンス - 発行するレルムのURLを含むリスト"

#. type: Plain text
msgid "`asid` - ID of the authentication session (_optional_)"
msgstr "`asid` - 認証セッションのID (_optional_)"

#. type: Plain text
msgid ""
"`nonce` - Random nonce to guarantee uniqueness of use if the operation can "
"only be executed once (_optional_)"
msgstr "`nonce` - 操作が一度しか実行できない場合は、使用の一意性を保証するランダムなノンス (_optional_)"

#. type: Plain text
msgid ""
"In addition, an action token can contain any number of custom fields "
"serializable into JSON."
msgstr "さらに、アクション・トークンには、JSON内にシリアライズできるカスタム・フィールドをいくつか含めることができます。"

#. type: Title ===
#, no-wrap
msgid "Action Token Processing"
msgstr "アクション・トークン処理"

#. type: Plain text
msgid ""
"When an action token is passed to a {project_name} endpoint "
"`_KEYCLOAK_ROOT_/auth/realms/master/login-actions/action-token` via `key` "
"parameter, it is validated and a proper action token handler is executed. "
"The processing always takes place in a context of an authentication session,"
" either a fresh one or the action token service joins an existing "
"authentication session (details are described below). The action token "
"handler can perform actions prescribed by the token (often it alters the "
"authentication session) and results into an HTTP response (e.g. it can "
"continue in authentication or display an information/error page). These "
"steps are detailed below."
msgstr ""
"アクション・トークンが{project_name}エンドポイント `_KEYCLOAK_ROOT_/auth/realms/master/login-"
"actions/action-token` に `key` "
"パラメーターを介して渡されると、それが検証され、適切なアクション・トークン・ハンドラーが実行されます。この処理は常に認証セッションのコンテキストに沿って行われ、新しいものかアクション・トークン・サービスが既存の認証セッションに参加します（詳しくは、後で説明します）。アクション・トークン・ハンドラーは、トークン（これで認証セッションを変更することが多い）によって規定されたアクションを実行し、HTTPレスポンスを返すことができます（たとえば、認証を続けるか、情報またはエラーページを表示することができます）。これらの手順について、詳しくは以下のとおりです。"

#. type: Plain text
#, no-wrap
msgid ""
"*Basic action token validation.* Signature and time validity is checked, and action token handler is determined based\n"
"on `typ` field.\n"
msgstr ""
"*Basic action token validation* 。シグネチャーと時間の有効性が確認され、アクション・トークン・ハンドラーが `typ` "
"フィールドに基づいて定義されます。\n"

#. type: Plain text
msgid ""
"[[determining-auth-sess]]*Determining authentication session.* If the action"
" token URL was opened in browser with existing authentication session, and "
"the token contains authentication session ID matching the authentication "
"session from the browser, action token validation and handling will attach "
"this ongoing authentication session. Otherwise, action token handler creates"
" a fresh authentication session that replaces any other authentication "
"session present at that time in the browser."
msgstr ""
"[[determining-auth-sess]]*認証セッションの決定。* "
"アクション・トークンURLが既存の認証セッションを使用するブラウザーで開かれ、トークンにブラウザーからの認証セッションと一致する認証セッションIDが含まれている場合、アクション・トークンの検証と処理により、この進行中の認証セッションが追加されます。"
" そうでない場合は、アクション・トークン・ハンドラーはその時点でブラウザーに存在する他の認証セッションを置き換える新しい認証セッションを作成します。"

#. type: Plain text
#, no-wrap
msgid ""
"*Token validations specific for token type.* Action token endpoint logic validates that the user (`sub` field) and\n"
"client (`azp`) from the token exist, are valid and not disabled. Then it validates all custom validations defined in the\n"
"action token handler. Furthermore, token handler can request this token be single-use. Already used tokens would then be\n"
"rejected by action token endpoint logic.\n"
msgstr ""
"*トークンタイプ固有のトークンの検証。* アクション・トークン・エンドポイント・ロジックは、トークンにユーザー（ `sub` "
"フィールド）とクライアント（ `azp` "
"）が存在し、無効ではないことを検証します。次に、アクション・トークン・ハンドラー内で定義されたカスタム・バリデーションがすべて検証されます。さらに、トークン・ハンドラーは、トークンを使い捨てるように要求できます。これで、すでに使用済みのトークンは、アクション・トークン・エンドポイント・ロジックによって拒否されます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"*Performing the action.* After all these validations, action token handler code is called that performs the actual\n"
"action according to parameters in the token.\n"
msgstr ""
"*アクションを実行する。* "
"これらの検証がすべて行われた後で、トークン内のパラメーターに応じて実際の動作を実行する、アクション・トークン・ハンドラー・コードが呼び出されます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"*Invalidation of single-Use tokens.* If the token is set to single-use, once the authentication flow finishes, the\n"
"action token is invalidated.\n"
msgstr "*使い捨てトークンの無効化。* トークンを使い捨てるように設定されている場合、認証フローが完了次第、アクション・トークンは無効になります。\n"

#. type: Title ===
#, no-wrap
msgid "Implement Your Own Action Token and its Handler"
msgstr "独自のアクション・トークンとそのハンドラーの実装"

#. type: Title ====
#, no-wrap
msgid "How to Create an Action Token"
msgstr "アクション・トークンの作成方法"

#. type: Plain text
msgid ""
"As action token is just a signed JWT with few mandatory fields (see "
"<<_action_token_anatomy,Anatomy of action token>> above), it can be "
"serialized and signed as such using Keycloak's `JWSBuilder` class. This way "
"has been already implemented in `serialize(session, realm, uriInfo)` method "
"of `org.keycloak.authentication.actiontoken.DefaultActionToken` and can be "
"leveraged by implementors by using that class for tokens instead of plain "
"`JsonWebToken`."
msgstr ""
"アクション・トークンは、必須フィールドがほとんどない署名付きJWTなので、Keycloakの `JWSBuilder` "
"クラスを使用してシリアライズして署名することができます（<<_action_token_anatomy,アクショントークンの解剖>> "
"を参照してください）。この方法は、 `org.keycloak.authentication.actiontoken.DefaultActionToken`"
" の `serialize(session, realm, uriInfo)` メソッドにすでに実装されており、実装者はプレーンな "
"`JsonWebToken` の代わりにそのクラスを使うことで活用できます。"

#. type: Title ====
#, no-wrap
msgid "Packaging Classes and Deployment"
msgstr "クラスのパッケージングと配備"

#. type: Plain text
msgid ""
"To plug your own action token and its handler, you need to implement few "
"interfaces on server side:"
msgstr "独自のアクション・トークンとそのハンドラーをプラグインするには、サーバー側のインターフェイスを少し実装する必要があります。"

#. type: Plain text
#, no-wrap
msgid ""
"`org.keycloak.authentication.actiontoken.ActionTokenHandler` - actual handler of action token for a particular\n"
"action (i.e. for a given value of `typ` token field).   \n"
msgstr ""
"`org.keycloak.authentication.actiontoken.ActionTokenHandler` - "
"特定のアクションに対する（つまり、 `typ` トークン・フィールドに指定された値に対する）アクション・トークンの実際のハンドラー。\n"

#. type: Plain text
msgid ""
"The central method in that interface is `handleToken(token, context)` which "
"defines actual operation executed upon receiving the action token. Usually "
"it is some alteration of authentication session notes but generally it can "
"be arbitrary. This method is only called if all verifiers (including those "
"defined in `getVerifiers(context)`) have succeeded, and it is guaranteed "
"that the `token` would be of the class returned by `getTokenClass()` method."
msgstr ""
"そのインターフェイス内の中心的なメソッドは、アクション・トークンを受け取る際に実行される実際の操作を定義する `handleToken(token, "
"context)` です。通常、それは認証セッション記録の変更ですが、一般的には任意です。このメソッドは、ベリファイア（ "
"`getVerifiers(context)` で定義されたものを含む）がすべて成功し、` token` が `getTokenClass()` "
"メソッドによって返されるクラスであることが保証されている場合にのみ呼び出されます。"

#. type: Plain text
msgid ""
"To be able to determine whether the action token was issued for the current "
"authentication session as described in <<determining-auth-sess,Item 2 "
"above>>, method for extracting authentication session ID has to be declared "
"in `getAuthenticationSessionIdFromToken(token, context)` method. The "
"implementation in `DefaultActionToken` returns the value of `asid` field "
"from the token if it is defined. Note that you can override that method to "
"return current authentication session ID regardless of the token - that way "
"you can create tokens that would step into the ongoing authentication flow "
"before any authentication flow would be started."
msgstr ""
"<<determining-auth-"
"sess,上記の2項目>>の説明どおり、現在の認証セッションに対してアクション・トークンが発行されたのか否かを決定するには、認証セッションIDを抽出するメソッドが"
" `getAuthenticationSessionIdFromToken(token, context)` メソッドで宣言されなければなりません。 "
"`DefaultActionToken` の実装は、トークンから `asid` "
"フィールドの値を返します。このメソッドをオーバーライドして、トークンに関係なく、現在の認証セッションIDを返すことができることに注意してください。つまり、任意の認証フローを開始する前に進行中の認証フローにステップインするトークンを作成できます。"

#. type: Plain text
msgid ""
"If the authentication session from the token does not match the current one,"
" the action token handler would be asked to start a fresh one by calling "
"`startFreshAuthenticationSession(token, context)`. It can throw a "
"`VerificationException` (or better its more descriptive variant "
"`ExplainedTokenVerificationException`) to signal that would be forbidden."
msgstr ""
"トークンからの認証セッションが現在のものと一致しない場合、アクション・トークン・ハンドラーは、 "
"`startFreshAuthenticationSession(token, context)` "
"を呼び出すことにより新しいセッションを開始するよう要求されます。これにより、禁止されることを通知するための "
"`VerificationException` （または、より説明的な表現である `Explained Token "
"VerificationException` ）をスローできます。"

#. type: Plain text
msgid ""
"The token handler also determines via method `canUseTokenRepeatedly(token, "
"context)` whether the token would be invalidated after it is used and "
"authentication completes. Note that if you would have a flow utilizing "
"multiple action token, only the last token would be invalidated. In that "
"case, you should use `org.keycloak.models.ActionTokenStoreProvider` in "
"action token handler to invalidate the used tokens manually."
msgstr ""
"また、トークン・ハンドラーにより、 `canUseTokenRepeatedly(token, context)` "
"メソッドを介して、トークンが使用されて認証が完了した後に、トークンが無効になるかどうかが決定されます。複数のアクション・トークンを利用するフローがある場合、最後のトークンだけが無効になることに注意してください。この場合、アクション・トークン・ハンドラー内で"
" `org.keycloak.models.ActionTokenStoreProvider` "
"を使用し、使用されたトークンを手動で無効にする必要があります。"

#. type: Plain text
msgid ""
"Default implementation of most of the `ActionTokenHandler` methods is the "
"`org.keycloak.authentication.actiontoken.AbstractActionTokenHander` abstract"
" class in `keycloak-services` module. The only method that needs to be "
"implemented is `handleToken(token, context)` that performs the actual "
"action."
msgstr ""
"ほとんどの `ActionTokenHandler` メソッドのデフォルト実装は、 `keycloak-services` モジュール内の "
"`org.keycloak.authentication.actiontoken.AbstractActionTokenHander` "
"抽象クラスです。実装する必要のある唯一のメソッドは、実際の動作を実行する `handleToken(token, context)` です。"

#. type: Plain text
msgid ""
"`org.keycloak.authentication.actiontoken.ActionTokenHandlerFactory` - "
"factory that instantiates action token handler. Implementations have to "
"override `getId()` to return value that must match precisely the value of "
"`typ` field in the action token."
msgstr ""
"`org.keycloak.authentication.actiontoken.ActionTokenHandlerFactory` - "
"アクション・トークン・ハンドラーを開始するファクトリー。アクション・トークン内の `typ` フィールドの値と正確に一致する値を返すため、実装は "
"`getId()` をオーバーライドする必要があります。"

#. type: Plain text
msgid ""
"Note that you have to register the custom `ActionTokenHandlerFactory` "
"implementation as explained in the <<_providers,Service Provider "
"Interfaces>> section of this guide."
msgstr ""
"カスタムの `ActionTokenHandlerFactory` "
"実装を、このガイドの<<_providers,サービス・プロバイダー・インターフェイス>>のセクションで説明するとおりに、登録しなければならないことに注意してください。"

#. type: Plain text
msgid ""
"If the action token you are implementing contains any custom fields that "
"should be serializabled to JSON fields, you should consider implementing a "
"descendant of `org.keycloak.representations.JsonWebToken` class that would "
"implement `org.keycloak.models.ActionTokenKeyModel` interface. In that case,"
" you can take advantage of the existing "
"`org.keycloak.authentication.actiontoken.DefaultActionToken` class as it "
"already satisfies both these conditions, and either use it directly or "
"implement its child, the fields of which can be annotated with appropriate "
"Jackson annotations, e.g. `com.fasterxml.jackson.annotation.JsonProperty` to"
" serialize them to JSON."
msgstr ""
"実装しているアクション・トークンが、JSONフィールドにシリアライズされる必要があるカスタム・フィールドを含んでいる場合、 "
"`org.keycloak.models.ActionTokenKeyModel` のインターフェイスを実装する "
"`org.keycloak.representations.JsonWebToken` "
"クラスの子孫を実装することを検討する必要があります。この場合、既存の "
"`org.keycloak.authentication.actiontoken.DefaultActionToken` "
"クラスは、すでに両方の条件を満たしており、直接使用するか、そのクラスの子を実装することができます。フィールドには適切なJacksonアノテーション（たとえば、JSONにそれらをシリアライズするには"
" `com.fasterxml.jackson.annotation.JsonProperty` ）を付けることができます。"
