msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"POT-Creation-Date: 2017-09-20 08:59+0000\n"
"PO-Revision-Date: 2017-09-20 05:29-0400\n"
"Last-Translator: wadahiro <wadahiro@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: keycloak-documentation-i18n\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/i18n/pot/authorization_services__topics__enforcer__authorization-context.pot\n"

#. type: Title ====
#: source/authorization_services/topics/enforcer/authorization-context.adoc:2
#, no-wrap
msgid "Obtaining the Authorization Context"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:6
#, no-wrap
msgid "When policy enforcement is enabled, the permissions obtained from the server are available through `org.keycloak.AuthorizationContext`.\n"
"This class provides several methods you can use to obtain permissions and ascertain whether a permission was granted for a particular resource or scope.\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:16
#, no-wrap
msgid "Obtaining the Authorization Context in a Servlet Container\n"
"```java\n"
"    HttpServletRequest request = ... // obtain javax.servlet.http.HttpServletRequest\n"
"    KeycloakSecurityContext keycloakSecurityContext =\n"
"        (KeycloakSecurityContext) request\n"
"            .getAttribute(KeycloakSecurityContext.class.getName());\n"
"    AuthorizationContext authzContext =\n"
"        keycloakSecurityContext.getAuthorizationContext();\n"
"```\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:20
#, no-wrap
msgid "For more details about how you can obtain a `KeycloakSecurityContext` consult the adapter configuration. The example above should be sufficient\n"
"to obtain the context when running an application using any of the servlet containers supported by {project_name}.\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:23
#, no-wrap
msgid "The authorization context helps give you more control over the decisions made and returned by the server. For example, you can use it\n"
"to build a dynamic menu where items are hidden or shown depending on the permissions associated with a resource or scope.\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:28
#, no-wrap
msgid "```java\n"
"if (authzContext.hasResourcePermission(\"Project Resource\")) {\n"
"    // user can access the Project Resource\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:32
#, no-wrap
msgid "if (authzContext.hasResourcePermission(\"Admin Resource\")) {\n"
"    // user can access administration resources\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:37
#, no-wrap
msgid "if (authzContext.hasScopePermission(\"urn:project.com:project:create\")) {\n"
"    // user can create new projects\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:39
#, no-wrap
msgid "The `AuthorizationContext` represents one of the main capabilities of {project_name} Authorization Services. From the examples above, you can see that the protected resource is not directly associated with the policies that govern them.\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:41
#, no-wrap
msgid "Consider some similar code using role-based access control (RBAC):\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:46
#, no-wrap
msgid "```java\n"
"if (User.hasRole('user')) {\n"
"    // user can access the Project Resource\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:50
#, no-wrap
msgid "if (User.hasRole('admin')) {\n"
"    // user can access administration resources\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:55
#, no-wrap
msgid "if (User.hasRole('project-manager')) {\n"
"    // user can create new projects\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:57
#, no-wrap
msgid "Although both examples address the same requirements, they do so in different ways. In RBAC, roles only _implicitly_ define access for their resources. With {project_name} you gain the capability to create more manageable code that focuses directly on your resources whether you are using RBAC, attribute-based access control (ABAC), or any other BAC variant. Either you have the permission for a given resource or scope, or you don't.\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:59
#, no-wrap
msgid "Now, suppose your security requirements have changed and in addition to project managers, PMOs can also create new projects.\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:61
#, no-wrap
msgid "Security requirements change, but with {project_name} there is no need to change your application code to address the new requirements. Once your application is based on the resource and scope identifier, you need only change the configuration of the permissions or policies associated with a particular resource in the authorization server. In this case, the permissions and policies associated with the `Project Resource` and/or the scope `urn:project.com:project:create` would be changed.\n"
msgstr ""

#. type: Title ====
#: source/authorization_services/topics/enforcer/authorization-context.adoc:62
#, no-wrap
msgid "Using the AuthorizationContext to obtain an Authorization Client Instance"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:65
#, no-wrap
msgid "The ```AuthorizationContext``` can also be used to obtain a reference to the <<_service_client_api, Authorization Client API>> configured to your application:\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:70
#, no-wrap
msgid "```java\n"
"    ClientAuthorizationContext clientContext = ClientAuthorizationContext.class.cast(authzContext);\n"
"    AuthzClient authzClient = clientContext.getClient();\n"
"```\n"
msgstr ""

#. type: Plain text
#: source/authorization_services/topics/enforcer/authorization-context.adoc:71
#, no-wrap
msgid "In some cases, resource servers protected by the policy enforcer need to access the APIs provided by the authorization server. With an ```AuthzClient``` instance in hands, resource servers can interact with the server in order to create resources or check for specific permissions programmatically.\n"
msgstr ""

