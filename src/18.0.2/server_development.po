msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"

msgid "{developerguide_name}"
msgstr ""

msgid "*{release_header_guide}* icon:angle-down[]"
msgstr ""

msgid "{gettingstarted_link}[{gettingstarted_name_short}]"
msgstr ""

msgid "{installguide_link}[{installguide_name_short}]"
msgstr ""

msgid "{adapterguide_link}[{adapterguide_name_short}]"
msgstr ""

msgid "{adminguide_link}[{adminguide_name_short}]"
msgstr ""

msgid "{authorizationguide_link}[{authorizationguide_name_short}]"
msgstr ""

msgid "{upgradingguide_link}[{upgradingguide_name_short}]"
msgstr ""

msgid "{releasenotes_link}[{releasenotes_name_short}]"
msgstr ""

msgid "Version *{project_version}* _{release_header_latest_link}[Click here for latest]_"
msgstr ""

msgid "Preface"
msgstr ""

msgid "In some of the example listings, what is meant to be displayed on one line does not fit inside the available page width. These lines have been broken up. A '\\' at the end of a line means that a break has been introduced to fit in the page, with the following lines indented. So:"
msgstr ""

msgid ""
"Let's pretend to have an extremely \\\n"
"long line that \\\n"
"does not fit\n"
"This one is short"
msgstr ""

msgid "Is really:"
msgstr ""

msgid ""
"Let's pretend to have an extremely long line that does not fit\n"
"This one is short"
msgstr ""

msgid "Admin REST API"
msgstr ""

msgid "{project_name} comes with a fully functional Admin REST API with all features provided by the Admin Console."
msgstr ""

msgid "To invoke the API you need to obtain an access token with the appropriate permissions. The required permissions are described in the Server Administration Guide."
msgstr ""

msgid "You can obtain a token by enabling authentication for your application using {project_name}; see the Securing Applications and Services Guide. You can also use direct access grant to obtain an access token."
msgstr ""

msgid "Examples of using CURL"
msgstr ""

msgid "Authenticating with a username and password"
msgstr ""

msgid "Procedure"
msgstr ""

msgid "Obtain an access token for the user in the realm `master` with username `admin` and password `password`:"
msgstr ""

msgid ""
"curl \\\n"
"  -d \"client_id=admin-cli\" \\\n"
"  -d \"username=admin\" \\\n"
"  -d \"password=password\" \\\n"
"  -d \"grant_type=password\" \\\n"
"  \"http://localhost:8080{kc_realms_path}/master/protocol/openid-connect/token\""
msgstr ""

msgid "By default this token expires in 1 minute"
msgstr ""

msgid "The result will be a JSON document."
msgstr ""

msgid "Invoke the API you need by extracting the value of the `access_token` property."
msgstr ""

msgid "Invoke the API by including the value in the `Authorization` header of requests to the API."
msgstr ""

msgid "The following example shows how to get the details of the master realm:"
msgstr ""

msgid ""
"curl \\\n"
"  -H \"Authorization: bearer eyJhbGciOiJSUz...\" \\\n"
"  \"http://localhost:8080{kc_admins_path}/realms/master\""
msgstr ""

msgid "Authenticating with a service account"
msgstr ""

msgid "To authenticate against the Admin REST API using a `client_id` and a `client_secret`, perform this procedure."
msgstr ""

msgid "Make sure the client is configured as follows:"
msgstr ""

msgid "`client_id` is a **confidential** client that belongs to the realm *master*"
msgstr ""

msgid "`client_id` has `Service Accounts Enabled` option enabled"
msgstr ""

msgid "`client_id` has a custom \"Audience\" mapper"
msgstr ""

msgid "Included Client Audience: `security-admin-console`"
msgstr ""

msgid "Check that `client_id` has the role 'admin' assigned in the \"Service Account Roles\" tab."
msgstr ""

msgid ""
"curl \\\n"
"  -d \"client_id=<YOUR_CLIENT_ID>\" \\\n"
"  -d \"client_secret=<YOUR_CLIENT_SECRET>\" \\\n"
"  -d \"grant_type=client_credentials\" \\\n"
"  \"http://localhost:8080{kc_realms_path}/master/protocol/openid-connect/token\""
msgstr ""

msgid "Example using Java"
msgstr ""

msgid "There's a Java client library for the Admin REST API that makes it easy to use from Java. To use it from your application add a dependency on the `keycloak-admin-client` library."
msgstr ""

msgid "The following example shows how to use the Java client library to get the details of the master realm:"
msgstr ""

msgid ""
"\n"
"import org.keycloak.admin.client.Keycloak;\n"
"import org.keycloak.representations.idm.RealmRepresentation;\n"
"...\n"
"\n"
"Keycloak keycloak = Keycloak.getInstance(\n"
"    \"http://localhost:8080{kc_base_path}\",\n"
"    \"master\",\n"
"    \"admin\",\n"
"    \"password\",\n"
"    \"admin-cli\");\n"
"RealmRepresentation realm = keycloak.realm(\"master\").toRepresentation();"
msgstr ""

msgid "Complete Javadoc for the admin client is available at {apidocs_link}[{apidocs_name}]."
msgstr ""

msgid "Additional resources"
msgstr ""

msgid "{adminguide_link}[{adminguide_name}]"
msgstr ""

msgid "{adapterguide_link}[{adapterguide_name}]"
msgstr ""

msgid "{apidocs_link}[{apidocs_name}]"
msgstr ""

msgid "Themes"
msgstr ""

msgid "{project_name} provides theme support for web pages and emails. This allows customizing the look and feel of end-user facing pages so they can be integrated with your applications."
msgstr ""

msgid "Login page with sunrise example theme"
msgstr ""

msgid "Theme types"
msgstr ""

msgid "A theme can provide one or more types to customize different aspects of {project_name}. The types available are:"
msgstr ""

msgid "Account - Account management"
msgstr ""

msgid "Admin - Admin Console"
msgstr ""

msgid "Email - Emails"
msgstr ""

msgid "Login - Login forms"
msgstr ""

msgid "Welcome - Welcome page"
msgstr ""

msgid "Configuring a theme"
msgstr ""

msgid "All theme types, except welcome, are configured through the Admin Console."
msgstr ""

msgid "Log into the Admin Console."
msgstr ""

msgid "Select your realm from the drop-down box in the top left corner."
msgstr ""

msgid "Click *Realm Settings* from the menu."
msgstr ""

msgid "Click the *Themes* tab."
msgstr ""

msgid "To set the theme for the `master` Admin Console you need to set the Admin Console theme for the `master` realm."
msgstr ""

msgid "To see the changes to the Admin Console refresh the page."
msgstr ""

msgid "Change the welcome theme by using the `spi-theme-welcome-theme` option."
msgstr ""

msgid "For example:"
msgstr ""

msgid "bin/kc.[sh|bat] start --spi-theme-welcome-theme=custom-theme"
msgstr ""

msgid "Default themes"
msgstr ""

msgid "{project_name} comes bundled with default themes in the server's root `themes` directory. To simplify upgrading you should not edit the bundled themes directly. Instead create your own theme that extends one of the bundled themes."
msgstr ""

msgid "Creating a theme"
msgstr ""

msgid "A theme consists of:"
msgstr ""

msgid "HTML templates (https://freemarker.apache.org/[Freemarker Templates])"
msgstr ""

msgid "Images"
msgstr ""

msgid "Message bundles"
msgstr ""

msgid "Stylesheets"
msgstr ""

msgid "Scripts"
msgstr ""

msgid "Theme properties"
msgstr ""

msgid "Unless you plan to replace every single page you should extend another theme. Most likely you will want to extend the {project_name} theme, but you could also consider extending the base theme if you are significantly changing the look and feel of the pages. The base theme primarily consists of HTML templates and message bundles, while the {project_name} theme primarily contains images and stylesheets."
msgstr ""

msgid "When extending a theme you can override individual resources (templates, stylesheets, etc.). If you decide to override HTML templates bear in mind that you may need to update your custom template when upgrading to a new release."
msgstr ""

msgid "While creating a theme it's a good idea to disable caching as this makes it possible to edit theme resources directly from the `themes` directory without restarting {project_name}."
msgstr ""

msgid "Run Keycloak with the following options:"
msgstr ""

msgid "bin/kc.[sh|bat] start --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false"
msgstr ""

msgid "Create a directory in the `themes` directory."
msgstr ""

msgid "The name of the directory becomes the name of the theme. For example to create a theme called `mytheme` create the directory `themes/mytheme`."
msgstr ""

msgid "Inside the theme directory, create a directory for each of the types your theme is going to provide."
msgstr ""

msgid "For example, to add the login type to the `mytheme` theme, create the directory `themes/mytheme/login`."
msgstr ""

msgid "For each type create a file `theme.properties` which allows setting some configuration for the theme."
msgstr ""

msgid "For example, to configure the theme `themes/mytheme/login` to extend the base theme and import some common resources, create the file `themes/mytheme/login/theme.properties` with following contents:"
msgstr ""

msgid ""
"parent=base\n"
"import=common/keycloak"
msgstr ""

msgid "You have now created a theme with support for the login type."
msgstr ""

msgid "Log into the Admin Console to checkout your new theme"
msgstr ""

msgid "Select your realm"
msgstr ""

msgid "Click on the *Themes* tab."
msgstr ""

msgid "For *Login Theme* select *mytheme* and click *Save*."
msgstr ""

msgid "Open the login page for the realm."
msgstr ""

msgid "You can do this either by logging in through your application or by opening the Account Management console (`/realms/{realm name}/account`)."
msgstr ""

msgid "To see the effect of changing the parent theme, set `parent=keycloak` in `theme.properties` and refresh the login page."
msgstr ""

msgid "Be sure to re-enable caching in production as it will significantly impact performance."
msgstr ""

msgid "Theme properties are set in the file `<THEME TYPE>/theme.properties` in the theme directory."
msgstr ""

msgid "parent - Parent theme to extend"
msgstr ""

msgid "import - Import resources from another theme"
msgstr ""

msgid "styles - Space-separated list of styles to include"
msgstr ""

msgid "locales - Comma-separated list of supported locales"
msgstr ""

msgid "There are a list of properties that can be used to change the css class used for certain element types. For a list of these properties look at the theme.properties file in the corresponding type of the keycloak theme (`themes/keycloak/<THEME TYPE>/theme.properties`)."
msgstr ""

msgid "You can also add your own custom properties and use them from custom templates."
msgstr ""

msgid "When doing so, you can substitute system properties or environment variables by using these formats:"
msgstr ""

msgid "`${some.system.property}` - for system properties"
msgstr ""

msgid "`${env.ENV_VAR}` - for environment variables."
msgstr ""

msgid "A default value can also be provided in case the system property or the environment variable is not found with `${foo:defaultValue}`."
msgstr ""

msgid "If no default value is provided and there's no corresponding system property or environment variable, then nothing is replaced and you end up with the format in your template."
msgstr ""

msgid "Here's an example of what is possible:"
msgstr ""

msgid ""
"javaVersion=${java.version}\n"
"\n"
"unixHome=${env.HOME:Unix home not found}\n"
"windowsHome=${env.HOMEPATH:Windows home not found}"
msgstr ""

msgid "Add a stylesheet to a theme"
msgstr ""

msgid "You can add one or more stylesheets to a theme."
msgstr ""

msgid "Create a file in the `<THEME TYPE>/resources/css` directory of your theme."
msgstr ""

msgid "Add this file to the `styles` property in `theme.properties`."
msgstr ""

msgid "For example, to add `styles.css` to the `mytheme`, create `themes/mytheme/login/resources/css/styles.css` with the following content:"
msgstr ""

msgid ""
".login-pf body {\n"
"    background: DimGrey none;\n"
"}"
msgstr ""

msgid "Edit `themes/mytheme/login/theme.properties` and add:"
msgstr ""

msgid "styles=css/styles.css"
msgstr ""

msgid "To see the changes, open the login page for your realm."
msgstr ""

msgid "You will notice that the only styles being applied are those from your custom stylesheet."
msgstr ""

msgid "To include the styles from the parent theme, load the styles from that theme. Edit `themes/mytheme/login/theme.properties` and change `styles` to:"
msgstr ""

msgid "styles=web_modules/@fontawesome/fontawesome-free/css/icons/all.css web_modules/@patternfly/react-core/dist/styles/base.css web_modules/@patternfly/react-core/dist/styles/app.css node_modules/patternfly/dist/css/patternfly.min.css node_modules/patternfly/dist/css/patternfly-additions.min.css css/login.css css/styles.css"
msgstr ""

msgid "To override styles from the parent stylesheets, ensure that your stylesheet is listed last."
msgstr ""

msgid "Adding a script to a theme"
msgstr ""

msgid "You can add one or more scripts to a theme."
msgstr ""

msgid "Create a file in the `<THEME TYPE>/resources/js` directory of your theme."
msgstr ""

msgid "Add the file to the `scripts` property in `theme.properties`."
msgstr ""

msgid "For example, to add `script.js` to the `mytheme`, create `themes/mytheme/login/resources/js/script.js` with the following content:"
msgstr ""

msgid "alert('Hello');"
msgstr ""

msgid "Then edit `themes/mytheme/login/theme.properties` and add:"
msgstr ""

msgid "scripts=js/script.js"
msgstr ""

msgid "Adding an image to a theme"
msgstr ""

msgid "To make images available to the theme add them to the `<THEME TYPE>/resources/img` directory of your theme. These can be used from within stylesheets or directly in HTML templates."
msgstr ""

msgid "For example to add an image to the `mytheme` copy an image to `themes/mytheme/login/resources/img/image.jpg`."
msgstr ""

msgid "You can then use this image from within a custom stylesheet with:"
msgstr ""

msgid ""
"body {\n"
"    background-image: url('../img/image.jpg');\n"
"    background-size: cover;\n"
"}"
msgstr ""

msgid "Or to use directly in HTML templates add the following to a custom HTML template:"
msgstr ""

msgid "<img src=\"${url.resourcesPath}/img/image.jpg\">"
msgstr ""

msgid "Messages"
msgstr ""

msgid "Text in the templates is loaded from message bundles. A theme that extends another theme will inherit all messages from the parent's message bundle and you can override individual messages by adding `<THEME TYPE>/messages/messages_en.properties` to your theme."
msgstr ""

msgid "For example to replace `Username` on the login form with `Your Username` for the `mytheme` create the file `themes/mytheme/login/messages/messages_en.properties` with the following content:"
msgstr ""

msgid "usernameOrEmail=Your Username"
msgstr ""

msgid "Within a message values like `{0}` and `{1}` are replaced with arguments when the message is used. For example {0} in `Log in to {0}` is replaced with the name of the realm."
msgstr ""

msgid "Texts of these message bundles can be overwritten by realm-specific values. The realm-specific values are manageable via UI and API."
msgstr ""

msgid "Adding a language to a realm"
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid "To enable internationalization for a realm, see the {adminguide_link}[{adminguide_name}]."
msgstr ""

msgid "Create the file `<THEME TYPE>/messages/messages_<LOCALE>.properties` in the directory of your theme."
msgstr ""

msgid "Add this file to the `locales` property in `<THEME TYPE>/theme.properties`. For a language to be available to users the realms `login`, `account` and `email`, the theme has to support the language, so you need to add your language for those theme types."
msgstr ""

msgid "For example, to add Norwegian translations to the `mytheme` theme create the file `themes/mytheme/login/messages/messages_no.properties` with the following content:"
msgstr ""

msgid ""
"usernameOrEmail=Brukernavn\n"
"password=Passord"
msgstr ""

msgid "If you omit a translation for messages, they will use English."
msgstr ""

msgid "locales=en,no"
msgstr ""

msgid "Add the same for the `account` and `email` theme types. To do this create `themes/mytheme/account/messages/messages_no.properties` and `themes/mytheme/email/messages/messages_no.properties`. Leaving these files empty will result in the English messages being used."
msgstr ""

msgid "Copy `themes/mytheme/login/theme.properties` to `themes/mytheme/account/theme.properties` and `themes/mytheme/email/theme.properties`."
msgstr ""

msgid "Add a translation for the language selector. This is done by adding a message to the English translation. To do this add the following to `themes/mytheme/account/messages/messages_en.properties` and `themes/mytheme/login/messages/messages_en.properties`:"
msgstr ""

msgid "locale_no=Norsk"
msgstr ""

msgid "By default message properties files should be encoded using ISO-8859-1. It's also possible to specify the encoding using a special header. For example to use UTF-8 encoding:"
msgstr ""

msgid ""
"# encoding: UTF-8\n"
"usernameOrEmail=...."
msgstr ""

msgid "See <<_locale_selector,Locale Selector>> for details on how the current locale is selected."
msgstr ""

msgid "Adding custom Identity Providers icons"
msgstr ""

msgid "{project_name} supports adding icons for custom Identity providers, which are displayed on the login screen."
msgstr ""

msgid "Define icon classes in your login `theme.properties` file (for example, `themes/mytheme/login/theme.properties`) with key pattern `kcLogoIdP-<alias>`."
msgstr ""

msgid "For an Identity Provider with an alias `myProvider`, you may add a line to `theme.properties` file of your custom theme. For example:"
msgstr ""

msgid "kcLogoIdP-myProvider = fa fa-lock"
msgstr ""

msgid "All icons are available on the official website of PatternFly4. Icons for social providers are already defined in base login theme properties (`themes/keycloak/login/theme.properties`), where you can inspire yourself."
msgstr ""

msgid "Creating a custom HTML template"
msgstr ""

msgid "{project_name} uses https://freemarker.apache.org/[Apache Freemarker] templates to generate HTML. You can override individual templates in your own theme by creating `<THEME TYPE>/<TEMPLATE>.ftl`. For a list of templates used see `themes/base/<THEME TYPE>`."
msgstr ""

msgid "Copy the template from the base theme to your own theme."
msgstr ""

msgid "Apply the modifications you need."
msgstr ""

msgid "For example, to create a custom login form for the `mytheme` theme, copy `themes/base/login/login.ftl` to `themes/mytheme/login` and open it in an editor."
msgstr ""

msgid "After the first line (<#import ...>), add `<h1>HELLO WORLD!</h1>` as shown here:"
msgstr ""

msgid ""
"<#import \"template.ftl\" as layout>\n"
"<h1>HELLO WORLD!</h1>\n"
"..."
msgstr ""

msgid "Back up the modified template. When upgrading to a new version of {project_name} you may need to update your custom templates to apply changes to the original template if applicable."
msgstr ""

msgid "See the https://freemarker.apache.org/docs/index.html[FreeMarker Manual] for details on how to edit templates."
msgstr ""

msgid "Emails"
msgstr ""

msgid "To edit the subject and contents for emails, for example password recovery email, add a message bundle to the `email` type of your theme. There are three messages for each email. One for the subject, one for the plain text body and one for the html body."
msgstr ""

msgid "To see all emails available take a look at `themes/base/email/messages/messages_en.properties`."
msgstr ""

msgid "For example to change the password recovery email for the `mytheme` theme create `themes/mytheme/email/messages/messages_en.properties` with the following content:"
msgstr ""

msgid ""
"passwordResetSubject=My password recovery\n"
"passwordResetBody=Reset password link: {0}\n"
"passwordResetBodyHtml=<a href=\"{0}\">Reset password</a>"
msgstr ""

msgid "Deploying themes"
msgstr ""

msgid "Themes can be deployed to {project_name} by copying the theme directory to `themes` or it can be deployed as an archive. During development you can copy the theme to the `themes` directory, but in production you may want to consider using an `archive`. An `archive` makes it simpler to have a versioned copy of the theme, especially when you have multiple instances of {project_name} for example with clustering."
msgstr ""

msgid "To deploy a theme as an archive, create a JAR archive with the theme resources."
msgstr ""

msgid "Add a file `META-INF/keycloak-themes.json` to the archive that lists the available themes in the archive as well as what types each theme provides."
msgstr ""

msgid "For example for the `mytheme` theme create `mytheme.jar` with the contents:"
msgstr ""

msgid "META-INF/keycloak-themes.json"
msgstr ""

msgid "theme/mytheme/login/theme.properties"
msgstr ""

msgid "theme/mytheme/login/login.ftl"
msgstr ""

msgid "theme/mytheme/login/resources/css/styles.css"
msgstr ""

msgid "theme/mytheme/login/resources/img/image.png"
msgstr ""

msgid "theme/mytheme/login/messages/messages_en.properties"
msgstr ""

msgid "theme/mytheme/email/messages/messages_en.properties"
msgstr ""

msgid "The contents of `META-INF/keycloak-themes.json` in this case would be:"
msgstr ""

msgid ""
"{\n"
"    \"themes\": [{\n"
"        \"name\" : \"mytheme\",\n"
"        \"types\": [ \"login\", \"email\" ]\n"
"    }]\n"
"}"
msgstr ""

msgid "A single archive can contain multiple themes and each theme can support one or more types."
msgstr ""

msgid "To deploy the archive to {project_name}, add it to the `providers/` directory of {project_name} and restart the server if it is already running."
msgstr ""

msgid "Theme selector"
msgstr ""

msgid "By default the theme configured for the realm is used, with the exception of clients being able to override the login theme. This behavior can be changed through the Theme Selector SPI."
msgstr ""

msgid "This could be used to select different themes for desktop and mobile devices by looking at the user agent header, for example."
msgstr ""

msgid "To create a custom theme selector you need to implement `ThemeSelectorProviderFactory` and `ThemeSelectorProvider`."
msgstr ""

msgid "Theme resources"
msgstr ""

msgid "When implementing custom providers in {project_name} there may often be a need to add additional templates, resources and messages bundles."
msgstr ""

msgid "An example use-case would be a <<_auth_spi,custom authenticator>> that requires additional templates and resources."
msgstr ""

msgid "The easiest way to load additional theme resources is to create a JAR with templates in `theme-resources/templates` resources in `theme-resources/resources` and messages bundles in `theme-resources/messages`."
msgstr ""

msgid "If you want a more flexible way to load templates and resources that can be achieved through the ThemeResourceSPI. By implementing `ThemeResourceProviderFactory` and `ThemeResourceProvider` you can decide exactly how to load templates and resources."
msgstr ""

msgid "Locale selector"
msgstr ""

msgid "By default, the locale is selected using the `DefaultLocaleSelectorProvider` which implements the `LocaleSelectorProvider` interface. English is the default language when internationalization is disabled. With internationalization enabled, the locale is resolved according to the logic described in the link:{adminguide_link}#_user_locale_selection[{adminguide_name}]."
msgstr ""

msgid "This behavior can be changed through the `LocaleSelectorSPI` by implementing the `LocaleSelectorProvider` and `LocaleSelectorProviderFactory`."
msgstr ""

msgid "The `LocaleSelectorProvider` interface has a single method, `resolveLocale`, which must return a locale given a `RealmModel` and a nullable `UserModel`. The actual request is available from the `KeycloakSession#getContext` method."
msgstr ""

msgid "Custom implementations can extend the `DefaultLocaleSelectorProvider` in order to reuse parts of the default behavior. For example to ignore the `Accept-Language` request header, a custom implementation could extend the default provider, override it's `getAcceptLanguageHeaderLocale`, and return a null value. As a result the locale selection will fall back on the realms's default language."
msgstr ""

msgid "For more details on creating and deploying a custom provider, see <<_providers,Service Provider Interfaces>>."
msgstr ""

msgid "Custom user attributes"
msgstr ""

msgid "You can add custom user attributes to the registration page and account management console with a custom theme."
msgstr ""

msgid "Registration page"
msgstr ""

msgid "Use this procedure to enter custom attributes in the registration page."
msgstr ""

msgid "Copy the template `themes/base/login/register.ftl` to the login type of your custom theme."
msgstr ""

msgid "Open the copy in an editor."
msgstr ""

msgid "For example, to add a mobile number to the registration page, add the following snippet to the form:"
msgstr ""

msgid ""
"<div class=\"form-group\">\n"
"   <div class=\"${properties.kcLabelWrapperClass!}\">\n"
"       <label for=\"user.attributes.mobile\" class=\"${properties.kcLabelClass!}\">Mobile number</label>\n"
"   </div>\n"
"\n"
"   <div class=\"${properties.kcInputWrapperClass!}\">\n"
"       <input type=\"text\" class=\"${properties.kcInputClass!}\" id=\"user.attributes.mobile\" name=\"user.attributes.mobile\" value=\"${(register.formData['user.attributes.mobile']!'')}\"/>\n"
"   </div>\n"
"</div>"
msgstr ""

msgid "Ensure the name of the input html element starts with `user.attributes`. In the example above, the attribute will be stored by {project_name} with the name `mobile`."
msgstr ""

msgid "To see the changes, make sure your realm is using your custom theme for the login theme and open the registration page."
msgstr ""

msgid "Account Management Console"
msgstr ""

msgid "Use this procedure to manage custom attributes in the user profile page in the account management console."
msgstr ""

msgid "Copy the template `themes/base/account/account.ftl` to the account type of your custom theme."
msgstr ""

msgid "As an example to add a mobile number to the account page add the following snippet to the form:"
msgstr ""

msgid ""
"<div class=\"form-group\">\n"
"   <div class=\"col-sm-2 col-md-2\">\n"
"       <label for=\"user.attributes.mobile\" class=\"control-label\">Mobile number</label>\n"
"   </div>\n"
"\n"
"   <div class=\"col-sm-10 col-md-10\">\n"
"       <input type=\"text\" class=\"form-control\" id=\"user.attributes.mobile\" name=\"user.attributes.mobile\" value=\"${(account.attributes.mobile!'')}\"/>\n"
"   </div>\n"
"</div>"
msgstr ""

msgid "Ensure the name of the input html element starts with `user.attributes`."
msgstr ""

msgid "To see the changes, make sure your realm is using your custom theme for the account theme and open the user profile page in the account management console."
msgstr ""

msgid "See <<_themes,Themes>> for how to create a custom theme."
msgstr ""

msgid "Identity Brokering APIs"
msgstr ""

msgid "{project_name} can delegate authentication to a parent IDP for login.  A typical example of this is the case where you want users to be able to login through a social provider such as Facebook or Google. You can also link existing accounts to a brokered IDP.  This section describes some APIs that your applications can use as it pertains to identity brokering."
msgstr ""

msgid "Retrieving external IDP tokens"
msgstr ""

msgid "{project_name} allows you to store tokens and responses from the authentication process with the external IDP. For that, you can use the `Store Token` configuration option on the IDP's settings page."
msgstr ""

msgid "Application code can retrieve these tokens and responses to pull in extra user information, or to securely invoke requests on the external IDP. For example, an application might want to use the Google token to invoke on other Google services and REST APIs. To retrieve a token for a particular identity provider you need to send a request as follows:"
msgstr ""

msgid ""
"GET {kc_realms_path}/{realm}/broker/{provider_alias}/token HTTP/1.1\n"
"Host: localhost:8080\n"
"Authorization: Bearer <KEYCLOAK ACCESS TOKEN>"
msgstr ""

msgid "An application must have authenticated with {project_name} and have received an access token.  This access token will need to have the `broker` client-level role `read-token` set.  This means that the user must have a role mapping for this role and the client application must have that role within its scope. In this case, given that you are accessing a protected service in {project_name}, you need to send the access token issued by {project_name} during the user authentication. In the broker configuration page you can automatically assign this role to newly imported users by turning on the `Stored Tokens Readable` switch."
msgstr ""

msgid "These external tokens can be re-established by either logging in again through the provider, or using the client initiated account linking API."
msgstr ""

msgid "Client initiated account linking"
msgstr ""

msgid "Some applications want to integrate with social providers like Facebook, but do not want to provide an option to login via these social providers.  {project_name} offers a browser-based API that applications can use to link an existing user account to a specific external IDP.  This is called client-initiated account linking. Account linking can only be initiated by OIDC applications."
msgstr ""

msgid "The way it works is that the application forwards the user's browser to a URL on the {project_name} server requesting that it wants to link the user's account to a specific external provider (i.e. Facebook).  The server initiates a login with the external provider.  The browser logs in at the external provider and is redirected back to the server.  The server establishes the link and redirects back to the application with a confirmation."
msgstr ""

msgid "There are some preconditions that must be met by the client application before it can initiate this protocol:"
msgstr ""

msgid "The desired identity provider must be configured and enabled for the user's realm in the admin console."
msgstr ""

msgid "The user account must already be logged in as an existing user via the OIDC protocol"
msgstr ""

msgid "The user must have an `account.manage-account` or `account.manage-account-links` role mapping."
msgstr ""

msgid "The application must be granted the scope for those roles within its access token"
msgstr ""

msgid "The application must have access to its access token as it needs information within it to generate the redirect URL."
msgstr ""

msgid "To initiate the login, the application must fabricate a URL and redirect the user's browser to this URL.  The URL looks like this:"
msgstr ""

msgid "/{auth-server-root}{kc_realms_path}/{realm}/broker/{provider}/link?client_id={id}&redirect_uri={uri}&nonce={nonce}&hash={hash}"
msgstr ""

msgid "Here's a description of each path and query param:"
msgstr ""

msgid "provider"
msgstr ""

msgid "This is the provider alias of the external IDP that you defined in the `Identity Provider` section of the admin console."
msgstr ""

msgid "client_id"
msgstr ""

msgid "This is the OIDC client id of your application.  When you registered the application as a client in the admin console, you had to specify this client id."
msgstr ""

msgid "redirect_uri"
msgstr ""

msgid "This is the application callback URL you want to redirect to after the account link is established.  It must be a valid client redirect URI pattern.  In other words, it must match one of the valid URL patterns you defined when you registered the client in the admin console."
msgstr ""

msgid "nonce"
msgstr ""

msgid "This is a random string that your application must generate"
msgstr ""

msgid "hash"
msgstr ""

msgid "This is a Base64 URL encoded hash.  This hash is generated by Base64 URL encoding a SHA_256 hash of `nonce` + `token.getSessionState()` + `token.getIssuedFor()` + `provider`. The token variable are obtained from the OIDC access token.  Basically you are hashing the random nonce, the user session id, the client id, and the identity provider alias you want to access."
msgstr ""

msgid "Here's an example of Java Servlet code that generates the URL to establish the account link."
msgstr ""

msgid ""
"   KeycloakSecurityContext session = (KeycloakSecurityContext) httpServletRequest.getAttribute(KeycloakSecurityContext.class.getName());\n"
"   AccessToken token = session.getToken();\n"
"   String clientId = token.getIssuedFor();\n"
"   String nonce = UUID.randomUUID().toString();\n"
"   MessageDigest md = null;\n"
"   try {\n"
"      md = MessageDigest.getInstance(\"SHA-256\");\n"
"   } catch (NoSuchAlgorithmException e) {\n"
"      throw new RuntimeException(e);\n"
"   }\n"
"   String input = nonce + token.getSessionState() + clientId + provider;\n"
"   byte[] check = md.digest(input.getBytes(StandardCharsets.UTF_8));\n"
"   String hash = Base64Url.encode(check);\n"
"   request.getSession().setAttribute(\"hash\", hash);\n"
"   String redirectUri = ...;\n"
"   String accountLinkUrl = KeycloakUriBuilder.fromUri(authServerRootUrl)\n"
"                    .path(\"{kc_realms_path}/{realm}/broker/{provider}/link\")\n"
"                    .queryParam(\"nonce\", nonce)\n"
"                    .queryParam(\"hash\", hash)\n"
"                    .queryParam(\"client_id\", clientId)\n"
"                    .queryParam(\"redirect_uri\", redirectUri).build(realm, provider).toString();"
msgstr ""

msgid "Why is this hash included?  We do this so that the auth server is guaranteed to know that the client application initiated the request and no other rogue app just randomly asked for a user account to be linked to a specific provider.  The auth server will first check to see if the user is logged in by checking the SSO cookie set at login.  It will then try to regenerate the hash based on the current login and match it up to the hash sent by the application."
msgstr ""

msgid "After the account has been linked, the auth server will redirect back to the `redirect_uri`.  If there is a problem servicing the link request, the auth server may or may not redirect back to the `redirect_uri`.  The browser may just end up at an error page instead of being redirected back to the application.  If there is an error condition and the auth server deems it safe enough to redirect back to the client app, an additional `error` query parameter will be appended to the `redirect_uri`."
msgstr ""

msgid "   While this API guarantees that the application initiated the request, it does not completely prevent CSRF attacks for this operation.  The application    is still responsible for guarding against CSRF attacks target at itself."
msgstr ""

msgid "Refreshing external tokens"
msgstr ""

msgid "If you are using the external token generated by logging into the provider (i.e. a Facebook or GitHub token), you can refresh this token by re-initiating the account linking API."
msgstr ""

msgid "Service Provider Interfaces (SPI)"
msgstr ""

msgid "{project_name} is designed to cover most use-cases without requiring custom code, but we also want it to be customizable. To achieve this {project_name} has a number of Service Provider Interfaces (SPI) for which you can implement your own providers."
msgstr ""

msgid "Implementing an SPI"
msgstr ""

msgid "To implement an SPI you need to implement its ProviderFactory and Provider interfaces. You also need to create a service configuration file."
msgstr ""

msgid "For example, to implement the Theme Selector SPI you need to implement ThemeSelectorProviderFactory and ThemeSelectorProvider and also provide the file `META-INF/services/org.keycloak.theme.ThemeSelectorProviderFactory`."
msgstr ""

msgid "Example ThemeSelectorProviderFactory:"
msgstr ""

msgid ""
"package org.acme.provider;\n"
"\n"
"import ...\n"
"\n"
"public class MyThemeSelectorProviderFactory implements ThemeSelectorProviderFactory {\n"
"\n"
"    @Override\n"
"    public ThemeSelectorProvider create(KeycloakSession session) {\n"
"        return new MyThemeSelectorProvider(session);\n"
"    }\n"
"\n"
"    @Override\n"
"    public void init(Config.Scope config) {\n"
"    }\n"
"\n"
"    @Override\n"
"    public void postInit(KeycloakSessionFactory factory) {\n"
"    }\n"
"\n"
"    @Override\n"
"    public void close() {\n"
"    }\n"
"\n"
"    @Override\n"
"    public String getId() {\n"
"        return \"myThemeSelector\";\n"
"    }\n"
"}"
msgstr ""

msgid "{project_name} creates a single instance of provider factories which makes it possible to store state for multiple requests. Provider instances are created by calling create on the factory for each request so these should be light-weight object."
msgstr ""

msgid "Example ThemeSelectorProvider:"
msgstr ""

msgid ""
"package org.acme.provider;\n"
"\n"
"import ...\n"
"\n"
"public class MyThemeSelectorProvider implements ThemeSelectorProvider {\n"
"\n"
"    public MyThemeSelectorProvider(KeycloakSession session) {\n"
"    }\n"
"\n"
"\n"
"    @Override\n"
"    public String getThemeName(Theme.Type type) {\n"
"        return \"my-theme\";\n"
"    }\n"
"\n"
"    @Override\n"
"\tpublic void close() {\n"
"    }\n"
"}"
msgstr ""

msgid "Example service configuration file (`META-INF/services/org.keycloak.theme.ThemeSelectorProviderFactory`):"
msgstr ""

msgid "org.acme.provider.MyThemeSelectorProviderFactory"
msgstr ""

msgid "You can configure your provider through server configuring."
msgstr ""

msgid "For example by adding starting the server with the following arguments:"
msgstr ""

msgid "bin/kc.[sh|bat] --spi-theme-selector-my-theme-selector-enabled=true --spi-theme-selector-my-theme-selector-theme=my-theme"
msgstr ""

msgid "Then you can retrieve the config in the `ProviderFactory` init method:"
msgstr ""

msgid ""
"public void init(Config.Scope config) {\n"
"    String themeName = config.get(\"theme\");\n"
"}"
msgstr ""

msgid "Your provider can also lookup other providers if needed. For example:"
msgstr ""

msgid ""
"public class MyThemeSelectorProvider implements ThemeSelectorProvider {\n"
"\n"
"    private KeycloakSession session;\n"
"\n"
"    public MyThemeSelectorProvider(KeycloakSession session) {\n"
"        this.session = session;\n"
"    }\n"
"\n"
"    @Override\n"
"    public String getThemeName(Theme.Type type) {\n"
"        return session.getContext().getRealm().getLoginTheme();\n"
"    }\n"
"}"
msgstr ""

msgid "Show info from your SPI implementation in the Admin Console"
msgstr ""

msgid "Sometimes it is useful to show additional info about your Provider to a {project_name} administrator. You can show provider build time information (for example, version of custom provider currently installed), current configuration of the provider (eg. url of remote system your provider talks to) or some operational info (average time of response from remote system your provider talks to). {project_name} Admin Console provides Server Info page to show this kind of information."
msgstr ""

msgid "To show info from your provider it is enough to implement `org.keycloak.provider.ServerInfoAwareProviderFactory` interface in your `ProviderFactory`."
msgstr ""

msgid "Example implementation for `MyThemeSelectorProviderFactory` from previous example:"
msgstr ""

msgid ""
"package org.acme.provider;\n"
"\n"
"import ...\n"
"\n"
"public class MyThemeSelectorProviderFactory implements ThemeSelectorProviderFactory, ServerInfoAwareProviderFactory {\n"
"    ...\n"
"\n"
"    @Override\n"
"    public Map<String, String> getOperationalInfo() {\n"
"        Map<String, String> ret = new LinkedHashMap<>();\n"
"        ret.put(\"theme-name\", \"my-theme\");\n"
"        return ret;\n"
"    }\n"
"}"
msgstr ""

msgid "Use available providers"
msgstr ""

msgid "In your provider implementation, you can use other providers available in {project_name}. The existing providers can be typically retrieved with the usage of the `KeycloakSession`, which is available to your provider as described in the section <<_implementing_spi,Implementing an SPI>>."
msgstr ""

msgid "{project_name} has two provider types:"
msgstr ""

msgid "*Single-implementation provider types* - There can be only a single active implementation of the particular provider type in {project_name} runtime."
msgstr ""

msgid "For example `HostnameProvider` specifies the hostname to be used by {project_name} and that is shared for the whole {project_name} server. Hence there can be only single implementation of this provider active for the {project_name} server. If there are multiple provider implementations available to the server runtime, one of them needs to be specified as the default one."
msgstr ""

msgid "For example such as:"
msgstr ""

msgid "bin/kc.[sh|bat] build --spi-hostname-provider=default"
msgstr ""

msgid "The value `default` used as the value of `default-provider` must match the ID returned by the `ProviderFactory.getId()` of the particular provider factory implementation. In the code, you can obtain the provider such as `keycloakSession.getProvider(HostnameProvider.class)`"
msgstr ""

msgid "*Multiple implementation provider types* - Those are provider types, that allow multiple implementations available and working together in the {project_name} runtime."
msgstr ""

msgid "For example `EventListener` provider allows to have multiple implementations available and registered, which means that particular event can be sent to all the listeners (jboss-logging, sysout etc). In the code, you can obtain a specified instance of the provider for example such as `session.getProvider(EventListener.class, \"jboss-logging\")` . You need to specify `provider_id` of the provider as the second argument as there can be multiple instances of this provider type as described above."
msgstr ""

msgid "The provider ID must match the ID returned by the `ProviderFactory.getId()` of the particular provider factory implementation. Some provider types can be retrieved with the usage of `ComponentModel` as the second argument and some (for example `Authenticator`) even need to be retrieved with the usage of `KeycloakSessionFactory`. It is not recommended to implement your own providers this way as it may be deprecated in the future."
msgstr ""

msgid "Registering provider implementations"
msgstr ""

msgid "Providers are registered with the server by simply copying them to the `providers` directory."
msgstr ""

msgid "If your provider needs additional dependencies not already provided by Keycloak copy these to the `providers` directory."
msgstr ""

msgid "After registering new providers or dependencies Keycloak needs to be re-built with the `kc.[sh|bat] build` command."
msgstr ""

msgid "Disabling a provider"
msgstr ""

msgid "You can disable a provider by setting the enabled attribute for the provider to false. For example to disable the Infinispan user cache provider use:"
msgstr ""

msgid "bin/kc.[sh|bat] build --spi-user-cache-infinispan-enabled=false"
msgstr ""

msgid "JavaScript providers"
msgstr ""

msgid "{project_name} has the ability to execute scripts during runtime in order to allow administrators to customize specific functionalities:"
msgstr ""

msgid "Authenticator"
msgstr ""

msgid "JavaScript Policy"
msgstr ""

msgid "OpenID Connect Protocol Mapper"
msgstr ""

msgid "Authentication scripts must provide at least one of the following functions: `authenticate(..)`, which is called from `Authenticator#authenticate(AuthenticationFlowContext)` `action(..)`, which is called from `Authenticator#action(AuthenticationFlowContext)`"
msgstr ""

msgid "Custom `Authenticator` should at least provide the `authenticate(..)` function. You can use the `javax.script.Bindings` script within the code."
msgstr ""

msgid "`script`"
msgstr ""

msgid "the `ScriptModel` to access script metadata"
msgstr ""

msgid "`realm`"
msgstr ""

msgid "the `RealmModel`"
msgstr ""

msgid "`user`"
msgstr ""

msgid "the current `UserModel`"
msgstr ""

msgid "`session`"
msgstr ""

msgid "the active `KeycloakSession`"
msgstr ""

msgid "`authenticationSession`"
msgstr ""

msgid "the current `AuthenticationSessionModel`"
msgstr ""

msgid "`httpRequest`"
msgstr ""

msgid "the current `org.jboss.resteasy.spi.HttpRequest`"
msgstr ""

msgid "`LOG`"
msgstr ""

msgid "a `org.jboss.logging.Logger` scoped to `ScriptBasedAuthenticator`"
msgstr ""

msgid "You can extract additional context information from the `context` argument passed to the `authenticate(context)` `action(context)` function."
msgstr ""

msgid ""
"AuthenticationFlowError = Java.type(\"org.keycloak.authentication.AuthenticationFlowError\");\n"
"\n"
"function authenticate(context) {\n"
"\n"
"  LOG.info(script.name + \" --> trace auth for: \" + user.username);\n"
"\n"
"  if (   user.username === \"tester\"\n"
"      && user.getAttribute(\"someAttribute\")\n"
"      && user.getAttribute(\"someAttribute\").contains(\"someValue\")) {\n"
"\n"
"      context.failure(AuthenticationFlowError.INVALID_USER);\n"
"      return;\n"
"  }\n"
"\n"
"  context.success();\n"
"}"
msgstr ""

msgid "Create a JAR with the scripts to deploy"
msgstr ""

msgid "JAR files are regular ZIP files with a `.jar` extension."
msgstr ""

msgid "In order to make your scripts available to {project_name} you need to deploy them to the server. For that, you should create a `JAR` file with the following structure:"
msgstr ""

msgid ""
"META-INF/keycloak-scripts.json\n"
"\n"
"my-script-authenticator.js\n"
"my-script-policy.js\n"
"my-script-mapper.js"
msgstr ""

msgid "The `META-INF/keycloak-scripts.json` is a file descriptor that provides metadata information about the scripts you want to deploy. It is a JSON file with the following structure:"
msgstr ""

msgid ""
"{\n"
"    \"authenticators\": [\n"
"        {\n"
"            \"name\": \"My Authenticator\",\n"
"            \"fileName\": \"my-script-authenticator.js\",\n"
"            \"description\": \"My Authenticator from a JS file\"\n"
"        }\n"
"    ],\n"
"    \"policies\": [\n"
"        {\n"
"            \"name\": \"My Policy\",\n"
"            \"fileName\": \"my-script-policy.js\",\n"
"            \"description\": \"My Policy from a JS file\"\n"
"        }\n"
"    ],\n"
"    \"mappers\": [\n"
"        {\n"
"            \"name\": \"My Mapper\",\n"
"            \"fileName\": \"my-script-mapper.js\",\n"
"            \"description\": \"My Mapper from a JS file\"\n"
"        }\n"
"    ]\n"
"}"
msgstr ""

msgid "This file should reference the different types of script providers that you want to deploy:"
msgstr ""

msgid "`authenticators`"
msgstr ""

msgid "For OpenID Connect Script Authenticators. You can have one or multiple authenticators in the same JAR file"
msgstr ""

msgid "`policies`"
msgstr ""

msgid "For JavaScript Policies when using {project_name} Authorization Services. You can have one or multiple policies in the same JAR file"
msgstr ""

msgid "`mappers`"
msgstr ""

msgid "For OpenID Connect Script Protocol Mappers. You can have one or multiple mappers in the same JAR file"
msgstr ""

msgid "For each script file in your `JAR` file, you need a corresponding entry in `META-INF/keycloak-scripts.json` that maps your scripts files to a specific provider type. For that you should provide the following properties for each entry:"
msgstr ""

msgid "`name`"
msgstr ""

msgid "A friendly name that will be used to show the scripts through the {project_name} Administration Console. If not provided, the name of the script file will be used instead"
msgstr ""

msgid "`description`"
msgstr ""

msgid "An optional text that better describes the intend of the script file"
msgstr ""

msgid "`fileName`"
msgstr ""

msgid "The name of the script file. This property is *mandatory* and should map to a file within the JAR."
msgstr ""

msgid "Deploy the script JAR"
msgstr ""

msgid "Once you have a JAR file with a descriptor and the scripts you want to deploy, you just need to copy the JAR to the {project_name} `providers/` directory, then run `bin/kc.[sh|bat] build`."
msgstr ""

msgid "Using the {project_name} Admin Console to upload scripts"
msgstr ""

msgid "Ability to upload scripts through the Admin Console is deprecated and will be removed in a future version of {project_name}."
msgstr ""

msgid "Administrators cannot upload scripts to the server. This behavior prevents potential harm to the system in case malicious scripts are accidentally executed. Administrators should always deploy scripts directly to the server using a JAR file to prevent attacks when you run scripts at runtime."
msgstr ""

msgid "Ability to upload scripts can be explicitly enabled. This should be used with great care and plans should be created to deploy all scripts directly to the server as soon as possible."
msgstr ""

msgid "For more details about how to enable the `upload_scripts` feature, see link:{installguide_profile_link}[{installguide_profile_name}]."
msgstr ""

msgid "Available SPIs"
msgstr ""

msgid "If you want to see list of all available SPIs at runtime, you can check `Server Info` page in Admin Console as described in <<_providers_admin_console,Admin Console>> section."
msgstr ""

msgid "Extending the server"
msgstr ""

msgid "The {project_name} SPI framework offers the possibility to implement or override particular built-in providers. However {project_name} also provides capabilities to extend its core functionalities and domain. This includes possibilities to:"
msgstr ""

msgid "Add custom REST endpoints to the {project_name} server"
msgstr ""

msgid "Add your own custom SPI"
msgstr ""

msgid "Add custom JPA entities to the {project_name} data model"
msgstr ""

msgid "Add custom REST endpoints"
msgstr ""

msgid "This is a very powerful extension, which allows you to deploy your own REST endpoints to the {project_name} server. It enables all kinds of extensions, for example the possibility to trigger functionality on the {project_name} server, which is not available through the default set of built-in {project_name} REST endpoints."
msgstr ""

msgid "To add a custom REST endpoint, you need to implement the `RealmResourceProviderFactory` and `RealmResourceProvider` interfaces. `RealmResourceProvider` has one important method:"
msgstr ""

msgid ""
"\n"
"Object getResource();\n"
msgstr ""

msgid "Use this method to return an object, which acts as a https://github.com/jax-rs[JAX-RS Resource]. For more details, see the Javadoc and our examples. There is a very simple example in the example distribution in `providers/rest` and there is a more advanced example in `providers/domain-extension`, which shows how to add an authenticated REST endpoint and other functionalities like <<_extensions_spi, Adding your own SPI>> or <<_extensions_jpa,Extending the datamodel with custom JPA entities>>."
msgstr ""

msgid "For details on how to package and deploy a custom provider, refer to the <<_providers,Service Provider Interfaces>> chapter."
msgstr ""

msgid "A custom SPI is especially useful with Custom REST endpoints. Use this procedure to add your own SPI"
msgstr ""

msgid "implement the interface `org.keycloak.provider.Spi` and define the ID of your SPI and the `ProviderFactory` and `Provider` classes. That looks like this:"
msgstr ""

msgid ""
"package org.keycloak.examples.domainextension.spi;\n"
"\n"
"import ...\n"
"\n"
"public class ExampleSpi implements Spi {\n"
"\n"
"    @Override\n"
"    public boolean isInternal() {\n"
"        return false;\n"
"    }\n"
"\n"
"    @Override\n"
"    public String getName() {\n"
"        return \"example\";\n"
"    }\n"
"\n"
"    @Override\n"
"    public Class<? extends Provider> getProviderClass() {\n"
"        return ExampleService.class;\n"
"    }\n"
"\n"
"    @Override\n"
"    @SuppressWarnings(\"rawtypes\")\n"
"    public Class<? extends ProviderFactory> getProviderFactoryClass() {\n"
"        return ExampleServiceProviderFactory.class;\n"
"    }\n"
"\n"
"}\n"
msgstr ""

msgid "Create the file `META-INF/services/org.keycloak.provider.Spi` and add the class of your SPI to it. For example:"
msgstr ""

msgid "org.keycloak.examples.domainextension.spi.ExampleSpi"
msgstr ""

msgid "Create the interfaces `ExampleServiceProviderFactory`, which extends from `ProviderFactory` and `ExampleService`, which extends from `Provider`. The `ExampleService` will usually contain the business methods you need for your use case. Note that the `ExampleServiceProviderFactory` instance is always scoped per application, however `ExampleService` is scoped per-request (or more accurately per `KeycloakSession` lifecycle)."
msgstr ""

msgid "Finally you need to implement your providers in the same manner as described in the <<_providers,Service Provider Interfaces>> chapter."
msgstr ""

msgid "For more details, take a look at the example distribution at `providers/domain-extension`, which shows an Example SPI similar to the one above."
msgstr ""

msgid "<<_extensions_rest,Custom REST endpoints>>"
msgstr ""

msgid "If the {project_name} data model does not exactly match your desired solution, or if you want to add some core functionality to {project_name}, or when you have your own REST endpoint, you might want to extend the {project_name} data model. We enable you to add your own JPA entities to the {project_name} JPA `EntityManager` ."
msgstr ""

msgid "To add your own JPA entities, you need to implement `JpaEntityProviderFactory` and `JpaEntityProvider`. The `JpaEntityProvider` allows you to return a list of your custom JPA entities and provide the location and id of the Liquibase changelog. An example implementation can look like this:"
msgstr ""

msgid "This is an unsupported API, which means you can use it but there is no guarantee that it will not be removed or changed without warning."
msgstr ""

msgid ""
"public class ExampleJpaEntityProvider implements JpaEntityProvider {\n"
"\n"
"    // List of your JPA entities.\n"
"    @Override\n"
"    public List<Class<?>> getEntities() {\n"
"        return Collections.<Class<?>>singletonList(Company.class);\n"
"    }\n"
"\n"
"    // This is used to return the location of the Liquibase changelog file.\n"
"    // You can return null if you don't want Liquibase to create and update the DB schema.\n"
"    @Override\n"
"    public String getChangelogLocation() {\n"
"    \treturn \"META-INF/example-changelog.xml\";\n"
"    }\n"
"\n"
"    // Helper method, which will be used internally by Liquibase.\n"
"    @Override\n"
"    public String getFactoryId() {\n"
"        return \"sample\";\n"
"    }\n"
"\n"
"    ...\n"
"}"
msgstr ""

msgid "In the example above, we added a single JPA entity represented by class `Company`. In the code of your REST endpoint, you can then use something like this to retrieve `EntityManager` and call DB operations on it."
msgstr ""

msgid ""
"EntityManager em = session.getProvider(JpaConnectionProvider.class).getEntityManager();\n"
"Company myCompany = em.find(Company.class, \"123\");"
msgstr ""

msgid "The methods `getChangelogLocation` and `getFactoryId` are important to support automatic updating of your entities by Liquibase. https://www.liquibase.org/[Liquibase] is a framework for updating the database schema, which {project_name} internally uses to create the DB schema and update the DB schema among versions. You may need to use it as well and create a changelog for your entities. Note that versioning of your own Liquibase changelog is independent of {project_name} versions. In other words, when you update to a new {project_name} version, you are not forced to update your schema at the same time. And vice versa, you can update your schema even without updating the {project_name} version. The Liquibase update is always done at the server startup, so to trigger a DB update of your schema, you just need to add the new changeset to your Liquibase changelog file (in the example above it's the file `META-INF/example-changelog.xml` which must be packed in same JAR as the JPA entities and `ExampleJpaEntityProvider`) and then restart server. The DB schema will be automatically updated at startup."
msgstr ""

msgid "For more details, take a look at the example distribution at example `providers/domain-extension`, which shows the `ExampleJpaEntityProvider` and `example-changelog.xml` described above."
msgstr ""

msgid "Don't forget to always backup your database before doing any changes in the Liquibase changelog and triggering a DB update."
msgstr ""

msgid "Authentication SPI"
msgstr ""

msgid "{project_name} includes a range of different authentication mechanisms: kerberos, password, otp and others. These mechanisms may not meet all of your requirements and you may want to plug in your own custom ones. {project_name} provides an authentication SPI that you can use to write new plugins. The Admin Console supports applying, ordering, and configuring these new mechanisms."
msgstr ""

msgid "{project_name} also supports a simple registration form. Different aspects of this form can be enabled and disabled for example Recaptcha support can be turned off and on. The same authentication SPI can be used to add another page to the registration flow or reimplement it entirely. There's also an additional fine-grained SPI you can use to add specific validations and user extensions to the built in registration form."
msgstr ""

msgid "A required action in {project_name} is an action that a user has to perform after he authenticates. After the action is performed successfully, the user doesn't have to perform the action again. {project_name} comes with some built in required actions like \"reset password\".  This action forces the user to change their password after they have logged in. You can write and plug in your own required actions."
msgstr ""

msgid "If your authenticator or required action implementation is using some user attributes as the metadata attributes for linking/establishing the user identity, then please make sure that users are not able to edit the attributes and the corresponding attributes are read-only. See the details in the link:{adminguide_link}#_read_only_user_attributes[Threat model mitigation chapter]."
msgstr ""

msgid "Terms"
msgstr ""

msgid "To first learn about the Authentication SPI, let's go over some of the terms used to describe it."
msgstr ""

msgid "Authentication Flow"
msgstr ""

msgid "A flow is a container for all authentications that must happen during login or registration. If you go to the Admin Console authentication page, you can view all the defined flows in the system and what authenticators they are made up of. Flows can contain other flows. You can also bind a new different flow for browser login, direct grant access, and registration."
msgstr ""

msgid "An authenticator is a pluggable component that hold the logic for performing the authentication or action within a flow. It is usually a singleton."
msgstr ""

msgid "Execution"
msgstr ""

msgid "An execution is an object that binds the authenticator to the flow and the authenticator to the configuration of the authenticator. Flows contain execution entries."
msgstr ""

msgid "Execution Requirement"
msgstr ""

msgid "Each execution defines how an authenticator behaves in a flow. The requirement defines whether the authenticator is enabled, disabled, conditional, required, or an alternative. An alternative requirement means that the authenticator is enough to validate the flow it's in, but isn't necessary. For example, in the built-in browser flow, cookie authentication, the Identity Provider Redirector, and the set of all authenticators in the forms subflow are all alternative. As they are executed in a sequential top-to-bottom order, if one of them is successful, the flow is successful, and any following execution in the flow (or sub-flow) is not evaluated."
msgstr ""

msgid "Authenticator Config"
msgstr ""

msgid "This object defines the configuration for the Authenticator for a specific execution within an authentication flow. Each execution can have a different config."
msgstr ""

msgid "Required Action"
msgstr ""

msgid "After authentication completes, the user might have one or more one-time actions he must complete before he is allowed to login. The user might be required to set up an OTP token generator or reset an expired password or even accept a Terms and Conditions document."
msgstr ""

msgid "Algorithm overview"
msgstr ""

msgid "Let's talk about how this all works for browser login. Let's assume the following flows, executions and sub flows."
msgstr ""

msgid ""
"\n"
"Cookie - ALTERNATIVE\n"
"Kerberos - ALTERNATIVE\n"
"Forms subflow - ALTERNATIVE\n"
"           Username/Password Form - REQUIRED\n"
"           Conditional OTP subflow - CONDITIONAL\n"
"                      Condition - User Configured - REQUIRED\n"
"                      OTP Form - REQUIRED"
msgstr ""

msgid "In the top level of the form we have 3 executions of which all are alternatively required. This means that if any of these are successful, then the others do not have to execute. The Username/Password form is not executed if there is an SSO Cookie set or a successful Kerberos login. Let's walk through the steps from when a client first redirects to keycloak to authenticate the user."
msgstr ""

msgid "The OpenID Connect or SAML protocol provider unpacks relevant data, verifies the client and any signatures. It creates an AuthenticationSessionModel. It looks up what the browser flow should be, then starts executing the flow."
msgstr ""

msgid "The flow looks at the cookie execution and sees that it is an alternative. It loads the cookie provider. It checks to see if the cookie provider requires that a user already be associated with the authentication session. Cookie provider does not require a user. If it did, the flow would abort and the user would see an error screen. Cookie provider then executes. Its purpose is to see if there is an SSO cookie set. If there is one set, it is validated and the UserSessionModel is verified and associated with the AuthenticationSessionModel. The Cookie provider returns a success() status if the SSO cookie exists and is validated. Since the cookie provider returned success and each execution at this level of the flow is ALTERNATIVE, no other execution is executed and this results in a successful login. If there is no SSO cookie, the cookie provider returns with a status of attempted().  This means there was no error condition, but no success either. The provider tried, but the request just wasn't set up to handle this authenticator."
msgstr ""

msgid "Next the flow looks at the Kerberos execution. This is also an alternative. The kerberos provider also does not require a user to be already set up and associated with the AuthenticationSessionModel so this provider is executed. Kerberos uses the SPNEGO browser protocol. This requires a series of challenge/responses between the server and client exchanging negotiation headers. The kerberos provider does not see any negotiate header, so it assumes that this is the first interaction between the server and client. It therefore creates an HTTP challenge response to the client and sets a forceChallenge() status. A forceChallenge() means that this HTTP response cannot be ignored by the flow and must be returned to the client. If instead the provider returned a challenge() status, the flow would hold the challenge response until all other alternatives are attempted. So, in this initial phase, the flow would stop and the challenge response would be sent back to the browser. If the browser then responds with a successful negotiate header, the provider associates the user with the AuthenticationSession and the flow ends because the rest of the executions on this level of the flow are all alternatives. Otherwise, again, the kerberos provider sets an attempted() status and the flow continues."
msgstr ""

msgid "The next execution is a subflow called Forms. The executions for this subflow are loaded and the same processing logic occurs."
msgstr ""

msgid "The first execution in the Forms subflow is the UsernamePassword provider. This provider also does not require for a user to already be associated with the flow. This provider creates a challenge HTTP response and sets its status to challenge(). This execution is required, so the flow honors this challenge and sends the HTTP response back to the browser. This response is a rendering of the Username/Password HTML page. The user enters in their username and password and clicks submit. This HTTP request is directed to the UsernamePassword provider. If the user entered an invalid username or password, a new challenge response is created and a status of failureChallenge() is set for this execution. A failureChallenge() means that there is a challenge, but that the flow should log this as an error in the error log. This error log can be used to lock accounts or IP Addresses that have had too many login failures. If the username and password is valid, the provider associated the UserModel with the AuthenticationSessionModel and returns a status of success()."
msgstr ""

msgid "The next execution is a subflow called Conditional OTP. The executions for this subflow are loaded and the same processing logic occurs. Its Requirement is Conditional. This means that the flow will first evaluate all conditional executors that it contains. Conditional executors are authenticators that implement `ConditionalAuthenticator`, and must implement the method `boolean matchCondition(AuthenticationFlowContext context)`. A conditional subflow will call the `matchCondition` method of all conditional executions it contains, and if all of them evaluate to true, it will act as if it was a required subflow. If not, it will act as if it was a disabled subflow. Conditional authenticators are only used for this purpose, and are not used as authenticators. This means that even if the conditional authenticator evaluates to \"true\", then this will not mark a flow or subflow as successful. For example, a flow containing only a Conditional subflow with only a conditional authenticator will never allow a user to log in."
msgstr ""

msgid "The first execution of the Conditional OTP subflow is the Condition - User Configured. This provider requires that a user has been associated with the flow. This requirement is satisfied because the UsernamePassword provider already associated the user with the flow. This provider's `matchCondition` method will evaluate the `configuredFor` method for all other Authenticators in its current subflow. If the subflow contains executors with their Requirement set to required, then the `matchCondition` method will only evaluate to true if all the required authenticators' `configuredFor` method evaluate to true. Otherwise, the `matchCondition` method will evaluate to true if any alternative authenticator evaluates to true."
msgstr ""

msgid "The next execution is the OTP Form. This provider also requires that a user has been associated with the flow. This requirement is satisfied because the UsernamePassword provider already associated the user with the flow. Since a user is required for this provider, the provider is also asked if the user is configured to use this provider. If user is not configured, then the flow will then set up a required action that the user must perform after authentication is complete. For OTP, this means the OTP setup page. If the user is configured, he will be asked to enter his otp code. In our scenario, because of the conditional sub-flow, the user will never see the OTP login page, unless the Conditional OTP subflow is set to Required."
msgstr ""

msgid "After the flow is complete, the authentication processor creates a UserSessionModel and associates it with the AuthenticationSessionModel. It then checks to see if the user is required to complete any required actions before logging in."
msgstr ""

msgid "First, each required action's evaluateTriggers() method is called. This allows the required action provider to figure out if there is some state that might trigger the action to be fired. For example, if your realm has a password expiration policy, it might be triggered by this method."
msgstr ""

msgid "Each required action associated with the user that has its requiredActionChallenge() method called. Here the provider sets up an HTTP response which renders the page for the required action. This is done by setting a challenge status."
msgstr ""

msgid "If the required action is ultimately successful, then the required action is removed from the user's required actions list."
msgstr ""

msgid "After all required actions have been resolved, the user is finally logged in."
msgstr ""

msgid "Authenticator SPI walk through"
msgstr ""

msgid "In this section, we'll take a look at the Authenticator interface. For this, we are going to implement an authenticator that requires that a user enter in the answer to a secret question like \"What is your mother's maiden name?\". This example is fully implemented and contained in the examples/providers/authenticator directory of the demo distribution of {project_name}."
msgstr ""

msgid "To create an authenticator, you must at minimum implement the org.keycloak.authentication.AuthenticatorFactory and Authenticator interfaces. The Authenticator interface defines the logic. The AuthenticatorFactory is responsible for creating instances of an Authenticator. They both extend a more generic Provider and ProviderFactory set of interfaces that other {project_name} components like User Federation do."
msgstr ""

msgid "Some authenticators, like the CookieAuthenticator don't rely on a Credential that the user has or knows to authenticate the user. However, some authenticators, such as the PasswordForm authenticator or the OTPFormAuthenticator rely on the user inputting some information and verifying that information against some information in the database. For the PasswordForm for example, the authenticator will verify the hash of the password against a hash stored in the database, while the OTPFormAuthenticator will verify the OTP received against the one generated from the shared secret stored in the database."
msgstr ""

msgid "These types of authenticators are called CredentialValidators, and will require you to implement a few more classes:"
msgstr ""

msgid "A class that extends org.keycloak.credential.CredentialModel, and that can generate the correct format of the credential in the database"
msgstr ""

msgid "A class implementing the org.keycloak.credential.CredentialProvider and interface, and a class implementing its CredentialProviderFactory factory interface."
msgstr ""

msgid "The SecretQuestionAuthenticator we'll see in this walk through is a CredentialValidator, so we'll see how to implement all these classes."
msgstr ""

msgid "Packaging classes and deployment"
msgstr ""

msgid "You will package your classes within a single jar. This jar must contain a file named  `org.keycloak.authentication.AuthenticatorFactory` and must be contained in the `META-INF/services/` directory of your jar. This file must list the fully qualified class name of each AuthenticatorFactory implementation you have in the jar. For example:"
msgstr ""

msgid ""
"org.keycloak.examples.authenticator.SecretQuestionAuthenticatorFactory\n"
"org.keycloak.examples.authenticator.AnotherProviderFactory"
msgstr ""

msgid "This services/ file is used by {project_name} to scan the providers it has to load into the system."
msgstr ""

msgid "To deploy this jar, just copy it to the providers directory."
msgstr ""

msgid "Extending the CredentialModel class"
msgstr ""

msgid "In {project_name}, credentials are stored in the database in the Credentials table. It has the following structure:"
msgstr ""

msgid ""
"-----------------------------\n"
"| ID                        |\n"
"-----------------------------\n"
"| user_ID                   |\n"
"-----------------------------\n"
"| credential_type           |\n"
"-----------------------------\n"
"| created_date              |\n"
"-----------------------------\n"
"| user_label                |\n"
"-----------------------------\n"
"| secret_data               |\n"
"-----------------------------\n"
"| credential_data           |\n"
"-----------------------------\n"
"| priority                  |\n"
"-----------------------------"
msgstr ""

msgid "Where:"
msgstr ""

msgid "`ID` is the primary key of the credential."
msgstr ""

msgid "`user_ID` is the foreign key linking the credential to a user."
msgstr ""

msgid "`credential_type` is a string set during the creation that must reference an existing credential type."
msgstr ""

msgid "`created_date` is the creation timestamp (in long format) of the credential."
msgstr ""

msgid "`user_label` is the editable name of the credential by the user"
msgstr ""

msgid "`secret_data` contains a static json with the information that cannot be transmitted outside of {project_name}"
msgstr ""

msgid "`credential_data` contains a json with the static information of the credential that can be shared in the Admin Console or via the REST API."
msgstr ""

msgid "`priority` defines how \"preferred\" a credential is for a user, to determine which credential to present when a user has multiple choices."
msgstr ""

msgid "As the secret_data and credential_data fields are designed to contain json, it is up to you to determine how to structure, read and write into these fields, allowing you a lot of flexibility."
msgstr ""

msgid "For this example, we are going to use a very simple credential data, containing only the question asked to the user:"
msgstr ""

msgid ""
"{\n"
"  \"question\":\"aQuestion\"\n"
"}"
msgstr ""

msgid "with an equally simple secret data, containing only the secret answer:"
msgstr ""

msgid ""
"{\n"
"  \"answer\":\"anAnswer\"\n"
"}"
msgstr ""

msgid "Here the answer will be kept in plain text in the database for the sake of simplicity, but it would also be possible to have a salted hash for the answer, as is the case for passwords in {project_name}. In this case, the secret data would also have to contain a field for the salt, and the credential data information about the algorithm such as the type of algorithm used and the number of iterations used. For more details you can consult the implementation of the `org.keycloak.models.credential.PasswordCredentialModel` class."
msgstr ""

msgid "In our case we create the class `SecretQuestionCredentialModel`:"
msgstr ""

msgid ""
"public class SecretQuestionCredentialModel extends CredentialModel {\n"
"    public static final String TYPE = \"SECRET_QUESTION\";\n"
"\n"
"    private final SecretQuestionCredentialData credentialData;\n"
"    private final SecretQuestionSecretData secretData;"
msgstr ""

msgid "Where `TYPE` is the credential_type we write in the database. For consistency, we make sure that this String is always the one referenced when getting the type for this credential. The classes `SecretQuestionCredentialData` and `SecretQuestionSecretData` are used to marshal and unmarshal the json:"
msgstr ""

msgid ""
"public class SecretQuestionCredentialData {\n"
"\n"
"    private final String question;\n"
"\n"
"    @JsonCreator\n"
"    public SecretQuestionCredentialData(@JsonProperty(\"question\") String question) {\n"
"        this.question = question;\n"
"    }\n"
"\n"
"    public String getQuestion() {\n"
"        return question;\n"
"    }\n"
"}"
msgstr ""

msgid ""
"public class SecretQuestionSecretData {\n"
"\n"
"     private final String answer;\n"
"\n"
"    @JsonCreator\n"
"     public SecretQuestionSecretData(@JsonProperty(\"answer\") String answer) {\n"
"         this.answer = answer;\n"
"     }\n"
"\n"
"    public String getAnswer() {\n"
"        return answer;\n"
"    }\n"
"}"
msgstr ""

msgid "To be fully usable, the `SecretQuestionCredentialModel` objects must both contain the raw json data from its parent class, and the unmarshalled objects in its own attributes. This leads us to create a method which reads from a simple CredentialModel, such as is created when reading from the database, to make a `SecretQuestionCredentialModel`:"
msgstr ""

msgid ""
"private SecretQuestionCredentialModel(SecretQuestionCredentialData credentialData, SecretQuestionSecretData secretData) {\n"
"    this.credentialData = credentialData;\n"
"    this.secretData = secretData;\n"
"}\n"
"\n"
"public static SecretQuestionCredentialModel createFromCredentialModel(CredentialModel credentialModel){\n"
"    try {\n"
"        SecretQuestionCredentialData credentialData = JsonSerialization.readValue(credentialModel.getCredentialData(), SecretQuestionCredentialData.class);\n"
"        SecretQuestionSecretData secretData = JsonSerialization.readValue(credentialModel.getSecretData(), SecretQuestionSecretData.class);\n"
"\n"
"        SecretQuestionCredentialModel secretQuestionCredentialModel = new SecretQuestionCredentialModel(credentialData, secretData);\n"
"        secretQuestionCredentialModel.setUserLabel(credentialModel.getUserLabel());\n"
"        secretQuestionCredentialModel.setCreatedDate(credentialModel.getCreatedDate());\n"
"        secretQuestionCredentialModel.setType(TYPE);\n"
"        secretQuestionCredentialModel.setId(credentialModel.getId());\n"
"        secretQuestionCredentialModel.setSecretData(credentialModel.getSecretData());\n"
"        secretQuestionCredentialModel.setCredentialData(credentialModel.getCredentialData());\n"
"        return secretQuestionCredentialModel;\n"
"    } catch (IOException e){\n"
"        throw new RuntimeException(e);\n"
"    }\n"
"}"
msgstr ""

msgid "And a method to create a `SecretQuestionCredentialModel` from the question and answer:"
msgstr ""

msgid ""
"private SecretQuestionCredentialModel(String question, String answer) {\n"
"    credentialData = new SecretQuestionCredentialData(question);\n"
"    secretData = new SecretQuestionSecretData(answer);\n"
"}\n"
"\n"
"public static SecretQuestionCredentialModel createSecretQuestion(String question, String answer) {\n"
"    SecretQuestionCredentialModel credentialModel = new SecretQuestionCredentialModel(question, answer);\n"
"    credentialModel.fillCredentialModelFields();\n"
"    return credentialModel;\n"
"}\n"
"\n"
"private void fillCredentialModelFields(){\n"
"    try {\n"
"        setCredentialData(JsonSerialization.writeValueAsString(credentialData));\n"
"        setSecretData(JsonSerialization.writeValueAsString(secretData));\n"
"        setType(TYPE);\n"
"        setCreatedDate(Time.currentTimeMillis());\n"
"    } catch (IOException e) {\n"
"        throw new RuntimeException(e);\n"
"    }\n"
"}"
msgstr ""

msgid "Implementing a CredentialProvider"
msgstr ""

msgid "As with all Providers, to allow {project_name} to generate the CredentialProvider, we require a CredentialProviderFactory. For this requirement we create the SecretQuestionCredentialProviderFactory, whose `create` method will be called when a SecretQuestionCredentialProvider is asked for:"
msgstr ""

msgid ""
"public class SecretQuestionCredentialProviderFactory implements CredentialProviderFactory<SecretQuestionCredentialProvider> {\n"
"\n"
"    public static final String PROVIDER_ID =  \"secret-question\";\n"
"\n"
"    @Override\n"
"    public String getId() {\n"
"        return PROVIDER_ID;\n"
"    }\n"
"\n"
"    @Override\n"
"    public CredentialProvider create(KeycloakSession session) {\n"
"        return new SecretQuestionCredentialProvider(session);\n"
"    }\n"
"}"
msgstr ""

msgid "The CredentialProvider interface takes a generic parameter that extends a CredentialModel. In our case we to use the SecretQuestionCredentialModel we created:"
msgstr ""

msgid ""
"public class SecretQuestionCredentialProvider implements CredentialProvider<SecretQuestionCredentialModel>, CredentialInputValidator {\n"
"    private static final Logger logger = Logger.getLogger(SecretQuestionCredentialProvider.class);\n"
"\n"
"    protected KeycloakSession session;\n"
"\n"
"    public SecretQuestionCredentialProvider(KeycloakSession session) {\n"
"        this.session = session;\n"
"    }\n"
"\n"
"    private UserCredentialStore getCredentialStore() {\n"
"        return session.userCredentialManager();\n"
"    }"
msgstr ""

msgid "We also want to implement the CredentialInputValidator interface, as this allows {project_name} to know that this provider can also be used to validate a credential for an Authenticator. For the CredentialProvider interface, the first method that needs to be implemented is the `getType()` method. This will simply return the `SecretQuestionCredentialModel`'s TYPE String:"
msgstr ""

msgid ""
"@Override\n"
"public String getType() {\n"
"    return SecretQuestionCredentialModel.TYPE;\n"
"}"
msgstr ""

msgid "The second method is to create a `SecretQuestionCredentialModel` from a `CredentialModel`. For this method we simply call the existing static method from `SecretQuestionCredentialModel`:"
msgstr ""

msgid ""
"@Override\n"
"public SecretQuestionCredentialModel getCredentialFromModel(CredentialModel model) {\n"
"    return SecretQuestionCredentialModel.createFromCredentialModel(model);\n"
"}"
msgstr ""

msgid "Finally, we have the methods to create a credential and delete a credential. These methods call the KeycloakSession's `userCredentialManager`, which is responsible for knowing where to read or write the credential, for example local storage or federated storage."
msgstr ""

msgid ""
"@Override\n"
"public CredentialModel createCredential(RealmModel realm, UserModel user, SecretQuestionCredentialModel credentialModel) {\n"
"    if (credentialModel.getCreatedDate() == null) {\n"
"        credentialModel.setCreatedDate(Time.currentTimeMillis());\n"
"    }\n"
"    return getCredentialStore().createCredential(realm, user, credentialModel);\n"
"}\n"
"\n"
"@Override\n"
"public boolean deleteCredential(RealmModel realm, UserModel user, String credentialId) {\n"
"    return getCredentialStore().removeStoredCredential(realm, user, credentialId);\n"
"}"
msgstr ""

msgid "For the CredentialInputValidator, the main method to implement is the `isValid`, which tests whether a credential is valid for a given user in a given realm. This is the method that is called by the Authenticator when it seeks to validate the user's input. Here we simply need to check that the input String is the one recorded in the Credential:"
msgstr ""

msgid ""
"@Override\n"
"public boolean isValid(RealmModel realm, UserModel user, CredentialInput input) {\n"
"    if (!(input instanceof UserCredentialModel)) {\n"
"        logger.debug(\"Expected instance of UserCredentialModel for CredentialInput\");\n"
"        return false;\n"
"    }\n"
"    if (!input.getType().equals(getType())) {\n"
"        return false;\n"
"    }\n"
"    String challengeResponse = input.getChallengeResponse();\n"
"    if (challengeResponse == null) {\n"
"        return false;\n"
"    }\n"
"    CredentialModel credentialModel = getCredentialStore().getStoredCredentialById(realm, user, input.getCredentialId());\n"
"    SecretQuestionCredentialModel sqcm = getCredentialFromModel(credentialModel);\n"
"    return sqcm.getSecretQuestionSecretData().getAnswer().equals(challengeResponse);\n"
"}"
msgstr ""

msgid "The other two methods to implement are a test if the CredentialProvider supports the given credential type and a test to check if the credential type is configured for a given user. For our case, the latter test simply means checking if the user has a credential of the SECRET_QUESTION type:"
msgstr ""

msgid ""
"@Override\n"
"public boolean supportsCredentialType(String credentialType) {\n"
"    return getType().equals(credentialType);\n"
"}\n"
"\n"
"@Override\n"
"public boolean isConfiguredFor(RealmModel realm, UserModel user, String credentialType) {\n"
"    if (!supportsCredentialType(credentialType)) return false;\n"
"    return !getCredentialStore().getStoredCredentialsByType(realm, user, credentialType).isEmpty();\n"
"}"
msgstr ""

msgid "Implementing an authenticator"
msgstr ""

msgid "When implementing an authenticator that uses Credentials to authenticate a user, you should have the authenticator implement the CredentialValidator interface. This interfaces takes a class extending a CredentialProvider as a parameter, and will allow {project_name} to directly call the methods from the CredentialProvider. The only method that needs to be implemented is `getCredentialProvider` method, which in our example allows the SecretQuestionAuthenticator to retrieve the SecretQuestionCredentialProvider:"
msgstr ""

msgid ""
"public SecretQuestionCredentialProvider getCredentialProvider(KeycloakSession session) {\n"
"    return (SecretQuestionCredentialProvider)session.getProvider(CredentialProvider.class, SecretQuestionCredentialProviderFactory.PROVIDER_ID);\n"
"}"
msgstr ""

msgid "When implementing the Authenticator interface, the first method that needs to be implemented is the requiresUser() method. For our example, this method must return true as we need to validate the secret question associated with the user. A provider like kerberos would return false from this method as it can resolve a user from the negotiate header. This example, however, is validating a specific credential of a specific user."
msgstr ""

msgid "The next method to implement is the configuredFor() method. This method is responsible for determining if the user is configured for this particular authenticator. In our case, we can just call the method implemented in the SecretQuestionCredentialProvider"
msgstr ""

msgid ""
"@Override\n"
"public boolean configuredFor(KeycloakSession session, RealmModel realm, UserModel user) {\n"
"    return getCredentialProvider(session).isConfiguredFor(realm, user, getType(session));\n"
"}"
msgstr ""

msgid "The next method to implement on the Authenticator is setRequiredActions(). If configuredFor() returns false and our example authenticator is required within the flow, this method will be called, but only if the associated AuthenticatorFactory's `isUserSetupAllowed` method returns true. The setRequiredActions() method is responsible for registering any required actions that must be performed by the user. In our example, we need to register a required action that will force the user to set up the answer to the secret question. We will implement this required action provider later in this chapter. Here is the implementation of the setRequiredActions() method."
msgstr ""

msgid ""
"    @Override\n"
"    public void setRequiredActions(KeycloakSession session, RealmModel realm, UserModel user) {\n"
"        user.addRequiredAction(\"SECRET_QUESTION_CONFIG\");\n"
"    }"
msgstr ""

msgid "Now we are getting into the meat of the Authenticator implementation. The next method to implement is authenticate().  This is the initial method the flow invokes when the execution is first visited. What we want is that if a user has answered the secret question already on their browser's machine, then the user doesn't have to answer the question again, making that machine \"trusted\".  The authenticate() method isn't responsible for processing the secret question form. Its sole purpose is to render the page or to continue the flow."
msgstr ""

msgid ""
"@Override\n"
"public void authenticate(AuthenticationFlowContext context) {\n"
"    if (hasCookie(context)) {\n"
"        context.success();\n"
"        return;\n"
"    }\n"
"    Response challenge = context.form()\n"
"            .createForm(\"secret-question.ftl\");\n"
"    context.challenge(challenge);\n"
"}\n"
"\n"
"protected boolean hasCookie(AuthenticationFlowContext context) {\n"
"    Cookie cookie = context.getHttpRequest().getHttpHeaders().getCookies().get(\"SECRET_QUESTION_ANSWERED\");\n"
"    boolean result = cookie != null;\n"
"    if (result) {\n"
"        System.out.println(\"Bypassing secret question because cookie is set\");\n"
"    }\n"
"    return result;\n"
"}"
msgstr ""

msgid "The hasCookie() method checks to see if there is already a cookie set on the browser which indicates that the secret question has already been answered. If that returns true, we just mark this execution's status as SUCCESS using the AuthenticationFlowContext.success() method and returning from the authentication() method."
msgstr ""

msgid "If the hasCookie() method returns false, we must return a response that renders the secret question HTML form. AuthenticationFlowContext has a form() method that initializes a Freemarker page builder with appropriate base information needed to build the form. This page builder is called `org.keycloak.login.LoginFormsProvider`. The LoginFormsProvider.createForm() method loads a Freemarker template file from your login theme. Additionally you can call the LoginFormsProvider.setAttribute() method if you want to pass additional information to the Freemarker template. We'll go over this later."
msgstr ""

msgid "Calling LoginFormsProvider.createForm() returns a JAX-RS Response object. We then call AuthenticationFlowContext.challenge() passing in this response. This sets the status of the execution as CHALLENGE and if the execution is Required, this JAX-RS Response object will be sent to the browser."
msgstr ""

msgid "So, the HTML page asking for the answer to a secret question is displayed to the user and the user enters in the answer and clicks submit. The action URL of the HTML form will send an HTTP request to the flow. The flow will end up invoking the action() method of our Authenticator implementation."
msgstr ""

msgid ""
"@Override\n"
"public void action(AuthenticationFlowContext context) {\n"
"    boolean validated = validateAnswer(context);\n"
"    if (!validated) {\n"
"        Response challenge =  context.form()\n"
"                .setError(\"badSecret\")\n"
"                .createForm(\"secret-question.ftl\");\n"
"        context.failureChallenge(AuthenticationFlowError.INVALID_CREDENTIALS, challenge);\n"
"        return;\n"
"    }\n"
"    setCookie(context);\n"
"    context.success();\n"
"}"
msgstr ""

msgid "If the answer is not valid, we rebuild the HTML Form with an additional error message. We then call AuthenticationFlowContext.failureChallenge() passing in the reason for the value and the JAX-RS response. failureChallenge() works the same as challenge(), but it also records the failure so it can be analyzed by any attack detection service."
msgstr ""

msgid "If validation is successful, then we set a cookie to remember that the secret question has been answered and we call AuthenticationFlowContext.success()."
msgstr ""

msgid "The validation itself gets the data that was received from the form, and calls the isValid method from the SecretQuestionCredentialProvider. You'll notice that there's a section of the code concerning getting the credential Id. This is because if {project_name} is configured to allow multiple types of alternative authenticators, or if the user could record multiple credentials of the SECRET_QUESTION type (for example if we allowed to choose from several questions, and we allowed the user to have answers for more than one of those questions), then {project_name} needs to know which credential is being used to log the user. In case there is more than one credential, {project_name} allows the user to choose during the login which credential is being used, and the information is transmitted by the form to the Authenticator. In case the form doesn't present this information, credential id used is given by the CredentialProvider's `default getDefaultCredential` method, which will return the \"most preferred\" credential of the correct type of the user,"
msgstr ""

msgid ""
"protected boolean validateAnswer(AuthenticationFlowContext context) {\n"
"    MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"    String secret = formData.getFirst(\"secret_answer\");\n"
"    String credentialId = formData.getFirst(\"credentialId\");\n"
"    if (credentialId == null || credentialId.isEmpty()) {\n"
"        credentialId = getCredentialProvider(context.getSession())\n"
"                .getDefaultCredential(context.getSession(), context.getRealm(), context.getUser()).getId();\n"
"    }\n"
"\n"
"    UserCredentialModel input = new UserCredentialModel(credentialId, getType(context.getSession()), secret);\n"
"    return getCredentialProvider(context.getSession()).isValid(context.getRealm(), context.getUser(), input);\n"
"}"
msgstr ""

msgid "Next method is the setCookie(). This is an example of providing configuration for the Authenticator. In this case we want the max age of the cookie to be configurable."
msgstr ""

msgid ""
"protected void setCookie(AuthenticationFlowContext context) {\n"
"    AuthenticatorConfigModel config = context.getAuthenticatorConfig();\n"
"    int maxCookieAge = 60 * 60 * 24 * 30; // 30 days\n"
"    if (config != null) {\n"
"        maxCookieAge = Integer.valueOf(config.getConfig().get(\"cookie.max.age\"));\n"
"\n"
"    }\n"
"    URI uri = context.getUriInfo().getBaseUriBuilder().path(\"realms\").path(context.getRealm().getName()).build();\n"
"    addCookie(context, \"SECRET_QUESTION_ANSWERED\", \"true\",\n"
"            uri.getRawPath(),\n"
"            null, null,\n"
"            maxCookieAge,\n"
"            false, true);\n"
"}"
msgstr ""

msgid "We obtain an AuthenticatorConfigModel from the AuthenticationFlowContext.getAuthenticatorConfig() method. If configuration exists we pull the max age config out of it. We will see how we can define what should be configured when we talk about the AuthenticatorFactory implementation. The config values can be defined within the Admin Console if you set up config definitions in your AuthenticatorFactory implementation."
msgstr ""

msgid ""
"@Override\n"
"    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n"
"        return CredentialTypeMetadata.builder()\n"
"                .type(getType())\n"
"                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n"
"                .displayName(SecretQuestionCredentialProviderFactory.PROVIDER_ID)\n"
"                .helpText(\"secret-question-text\")\n"
"                .createAction(SecretQuestionAuthenticatorFactory.PROVIDER_ID)\n"
"                .removeable(false)\n"
"                .build(session);\n"
"    }"
msgstr ""

msgid "The last method to implement in the SecretQuestionCredentialProvider class is getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext), which is an abstract method of the CredentialProvider interface. Each Credential provider has to provide and implement this method. The method returns an instance of CredentialTypeMetadata, which should at least include type and category of authenticator, displayName and removable item. In this example, the builder takes type of authenticator from method getType(), category is Two Factor (the authenticator can be used as second factor of authentication) and removable, which is set up to false (user can't remove some previously registered credentials)."
msgstr ""

msgid "Other items of builder are helpText (will be shown to the user on various screens), createAction (the providerID of the required action, which can be used by the user to create new credential) or updateAction (same as createAction, but instead of creating the new credential, it will update the credential)."
msgstr ""

msgid "Implementing an AuthenticatorFactory"
msgstr ""

msgid "The next step in this process is to implement an AuthenticatorFactory. This factory is responsible for instantiating an Authenticator. It also provides deployment and configuration metadata about the Authenticator."
msgstr ""

msgid "The getId() method is just the unique name of the component. The create() method is called by the runtime to allocate and process the Authenticator."
msgstr ""

msgid ""
"\n"
"public class SecretQuestionAuthenticatorFactory implements AuthenticatorFactory, ConfigurableAuthenticatorFactory {\n"
"\n"
"    public static final String PROVIDER_ID = \"secret-question-authenticator\";\n"
"    private static final SecretQuestionAuthenticator SINGLETON = new SecretQuestionAuthenticator();\n"
"\n"
"    @Override\n"
"    public String getId() {\n"
"        return PROVIDER_ID;\n"
"    }\n"
"\n"
"    @Override\n"
"    public Authenticator create(KeycloakSession session) {\n"
"        return SINGLETON;\n"
"    }"
msgstr ""

msgid "The next thing the factory is responsible for is to specify the allowed requirement switches. While there are four different requirement types:  ALTERNATIVE, REQUIRED, CONDITIONAL, DISABLED, AuthenticatorFactory implementations can limit which requirement options are shown in the Admin Console when defining a flow. CONDITIONAL should only always be used for subflows, and unless there's a good reason for doing otherwise, the requirement on a authenticator should be REQUIRED, ALTERNATIVE and DISABLED:"
msgstr ""

msgid ""
"\n"
"    private static AuthenticationExecutionModel.Requirement[] REQUIREMENT_CHOICES = {\n"
"            AuthenticationExecutionModel.Requirement.REQUIRED,\n"
"            AuthenticationExecutionModel.Requirement.ALTERNATIVE,\n"
"            AuthenticationExecutionModel.Requirement.DISABLED\n"
"    };\n"
"    @Override\n"
"    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n"
"        return REQUIREMENT_CHOICES;\n"
"    }"
msgstr ""

msgid "The AuthenticatorFactory.isUserSetupAllowed() is a flag that tells the flow manager whether or not Authenticator.setRequiredActions() method will be called. If an Authenticator is not configured for a user, the flow manager checks isUserSetupAllowed().  If it is false, then the flow aborts with an error. If it returns true, then the flow manager will invoke Authenticator.setRequiredActions()."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public boolean isUserSetupAllowed() {\n"
"        return true;\n"
"    }"
msgstr ""

msgid "The next few methods define how the Authenticator can be configured. The isConfigurable() method is a flag which specifies to the Admin Console on whether the Authenticator can be configured within a flow. The getConfigProperties() method returns a list of ProviderConfigProperty objects. These objects define a specific configuration attribute."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public List<ProviderConfigProperty> getConfigProperties() {\n"
"        return configProperties;\n"
"    }\n"
"\n"
"    private static final List<ProviderConfigProperty> configProperties = new ArrayList<ProviderConfigProperty>();\n"
"\n"
"    static {\n"
"        ProviderConfigProperty property;\n"
"        property = new ProviderConfigProperty();\n"
"        property.setName(\"cookie.max.age\");\n"
"        property.setLabel(\"Cookie Max Age\");\n"
"        property.setType(ProviderConfigProperty.STRING_TYPE);\n"
"        property.setHelpText(\"Max age in seconds of the SECRET_QUESTION_COOKIE.\");\n"
"        configProperties.add(property);\n"
"    }"
msgstr ""

msgid "Each ProviderConfigProperty defines the name of the config property. This is the key used in the config map stored in AuthenticatorConfigModel. The label defines how the config option will be displayed in the Admin Console. The type defines if it is a String, Boolean, or other type. The Admin Console will display different UI inputs depending on the type. The help text is what will be shown in the tooltip for the config attribute in the Admin Console. Read the javadoc of ProviderConfigProperty for more detail."
msgstr ""

msgid "The rest of the methods are for the Admin Console. getHelpText() is the tooltip text that will be shown when you are picking the Authenticator you want to bind to an execution. getDisplayType() is the text that will be shown in the Admin Console when listing the Authenticator. getReferenceCategory() is just a category the Authenticator belongs to."
msgstr ""

msgid "Adding an authenticator form"
msgstr ""

msgid "{project_name} comes with a Freemarker <<_themes,theme and template engine>>. The createForm() method you called within authenticate() of your Authenticator class, builds an HTML page from a file within your login theme: `secret-question.ftl`. This file should be added to the `theme-resources/templates` in your JAR, see <<_theme_resource,Theme Resource Provider>> for more details."
msgstr ""

msgid "Let's take a bigger look at secret-question.ftl  Here's a small code snippet:"
msgstr ""

msgid ""
"\n"
"        <form id=\"kc-totp-login-form\" class=\"${properties.kcFormClass!}\" action=\"${url.loginAction}\" method=\"post\">\n"
"            <div class=\"${properties.kcFormGroupClass!}\">\n"
"                <div class=\"${properties.kcLabelWrapperClass!}\">\n"
"                    <label for=\"totp\" class=\"${properties.kcLabelClass!}\">${msg(\"loginSecretQuestion\")}</label>\n"
"                </div>\n"
"\n"
"                <div class=\"${properties.kcInputWrapperClass!}\">\n"
"                    <input id=\"totp\" name=\"secret_answer\" type=\"text\" class=\"${properties.kcInputClass!}\" />\n"
"                </div>\n"
"            </div>\n"
"        </form>"
msgstr ""

msgid "Any piece of text enclosed in `${}` corresponds to an attribute or template funtion. If you see the form's action, you see it points to `${url.loginAction}`. This value is automatically generated when you invoke the AuthenticationFlowContext.form() method. You can also obtain this value by calling the AuthenticationFlowContext.getActionURL() method in Java code."
msgstr ""

msgid "You'll also see `${properties.someValue}`. These correspond to properties defined in your theme.properties file of our theme.  `${msg(\"someValue\")}` corresponds to the internationalized message bundles (.properties files) included with the login theme messages/ directory. If you're just using english, you can just add the value of the `loginSecretQuestion`. This should be the question you want to ask the user."
msgstr ""

msgid "When you call AuthenticationFlowContext.form() this gives you a LoginFormsProvider  instance. If you called, `LoginFormsProvider.setAttribute(\"foo\", \"bar\")`, the value of \"foo\" would be available for reference in your form as `${foo}`. The value of an attribute can be any Java bean as well."
msgstr ""

msgid "If you look at the top of the file, you'll see that we are importing a template:"
msgstr ""

msgid "<#import \"select.ftl\" as layout>"
msgstr ""

msgid "Importing this template, instead of the standard `template.ftl` allows {project_name} to display a dropdown box that allows the user to select a different credential or execution."
msgstr ""

msgid "Adding an authenticator to a flow"
msgstr ""

msgid "Adding an Authenticator to a flow must be done in the Admin Console. If you go to the Authentication menu item and go to the Flow tab, you will be able to view the currently defined flows. You cannot modify built in flows, so, to add the Authenticator we've created you have to copy an existing flow or create your own. Our hope is that the user interface is sufficiently clear so that you can determine how to create a flow and add the Authenticator. For more details, see the `Authentication Flows` chapter in link:{adminguide_link}[{adminguide_name}] ."
msgstr ""

msgid "After you've created your flow, you have to bind it to the login action you want to bind it to. If you go to the Authentication menu and go  to the Bindings tab you will see options to bind a flow to the browser, registration, or direct grant flow."
msgstr ""

msgid "Required action walkthrough"
msgstr ""

msgid "In this section we will discuss how to define a required action. In the Authenticator section you may have wondered, \"How will we get the user's answer to the secret question entered into the system?\".  As we showed in the example, if the answer is not set up, a required action will be triggered. This section discusses how to implement the required action for the Secret Question Authenticator."
msgstr ""

msgid "You will package your classes within a single jar. This jar does not have to be separate from other provider classes but it must contain a file named  `org.keycloak.authentication.RequiredActionFactory`                and must be contained in the `META-INF/services/` directory of your jar. This file must list the fully qualified classname of each RequiredActionFactory implementation you have in the jar. For example:"
msgstr ""

msgid "org.keycloak.examples.authenticator.SecretQuestionRequiredActionFactory"
msgstr ""

msgid "To deploy this jar, copy it to the `providers/` directory, then run `bin/kc.[sh|bat] build`."
msgstr ""

msgid "Implement the RequiredActionProvider"
msgstr ""

msgid "Required actions must first implement the RequiredActionProvider interface. The RequiredActionProvider.requiredActionChallenge() is the initial call by the flow manager into the required action. This method is responsible for rendering the HTML form that will drive the required action."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public void requiredActionChallenge(RequiredActionContext context) {\n"
"        Response challenge = context.form().createForm(\"secret_question_config.ftl\");\n"
"        context.challenge(challenge);\n"
"\n"
"    }"
msgstr ""

msgid "You see that RequiredActionContext has similar methods to AuthenticationFlowContext. The form() method allows you to render the page from a Freemarker template. The action URL is preset by the call to this form() method. You just need to reference it within your HTML form. I'll show you this later."
msgstr ""

msgid "The challenge() method notifies the flow manager that a required action must be executed."
msgstr ""

msgid "The next method is responsible for processing input from the HTML form of the required action. The action URL of the form will be routed to the RequiredActionProvider.processAction() method"
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public void processAction(RequiredActionContext context) {\n"
"        String answer = (context.getHttpRequest().getDecodedFormParameters().getFirst(\"answer\"));\n"
"        UserCredentialValueModel model = new UserCredentialValueModel();\n"
"        model.setValue(answer);\n"
"        model.setType(SecretQuestionAuthenticator.CREDENTIAL_TYPE);\n"
"        context.getUser().updateCredentialDirectly(model);\n"
"        context.success();\n"
"    }"
msgstr ""

msgid "The answer is pulled out of the form post. A UserCredentialValueModel is created and the type and value of the credential are set. Then UserModel.updateCredentialDirectly() is invoked. Finally, RequiredActionContext.success() notifies the container that the required action was successful."
msgstr ""

msgid "Implement the RequiredActionFactory"
msgstr ""

msgid "This class is really simple. It is just responsible for creating the required action provider instance."
msgstr ""

msgid ""
"\n"
"public class SecretQuestionRequiredActionFactory implements RequiredActionFactory {\n"
"\n"
"    private static final SecretQuestionRequiredAction SINGLETON = new SecretQuestionRequiredAction();\n"
"\n"
"    @Override\n"
"    public RequiredActionProvider create(KeycloakSession session) {\n"
"        return SINGLETON;\n"
"    }\n"
"\n"
"\n"
"    @Override\n"
"    public String getId() {\n"
"        return SecretQuestionRequiredAction.PROVIDER_ID;\n"
"    }\n"
"\n"
"    @Override\n"
"    public String getDisplayText() {\n"
"        return \"Secret Question\";\n"
"    }"
msgstr ""

msgid "The getDisplayText() method is just for the Admin Console when it wants to display a friendly name for the required action."
msgstr ""

msgid "Enable required action"
msgstr ""

msgid "The final thing you have to do is go into the Admin Console. Click on the Authentication left menu. Click on the Required Actions tab. Click on the Register button and choose your new Required Action. Your new required action should now be displayed and enabled in the required actions list."
msgstr ""

msgid "Modifying or extending the registration form"
msgstr ""

msgid "It is entirely possible for you to implement your own flow with a set of Authenticators to totally change how registration is done in {project_name}. But what you'll usually want to do is just add a little bit of validation to the out of the box registration page. An additional SPI was created to be able to do this. It basically allows you to add validation of form elements on the page as well as to initialize UserModel attributes and data after the user has been registered. We'll look at both the implementation of the user profile registration processing as well as the registration Google Recaptcha plugin."
msgstr ""

msgid "Implementation FormAction interface"
msgstr ""

msgid "The core interface you have to implement is the FormAction interface. A FormAction is responsible for rendering and processing a portion of the page. Rendering is done in the buildPage() method, validation is done in the validate() method, post validation operations are done in success().  Let's first take a look at buildPage() method of the Recaptcha plugin."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public void buildPage(FormContext context, LoginFormsProvider form) {\n"
"        AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n"
"        if (captchaConfig == null || captchaConfig.getConfig() == null\n"
"                || captchaConfig.getConfig().get(SITE_KEY) == null\n"
"                || captchaConfig.getConfig().get(SITE_SECRET) == null\n"
"                ) {\n"
"            form.addError(new FormMessage(null, Messages.RECAPTCHA_NOT_CONFIGURED));\n"
"            return;\n"
"        }\n"
"        String siteKey = captchaConfig.getConfig().get(SITE_KEY);\n"
"        form.setAttribute(\"recaptchaRequired\", true);\n"
"        form.setAttribute(\"recaptchaSiteKey\", siteKey);\n"
"        form.addScript(\"https://www.google.com/recaptcha/api.js\");\n"
"    }"
msgstr ""

msgid "The Recaptcha buildPage() method is a callback by the form flow to help render the page. It receives a form parameter which is a LoginFormsProvider. You can add additional attributes to the form provider so that they can be displayed in the HTML page generated by the registration Freemarker template."
msgstr ""

msgid "The code above is from the registration recaptcha plugin. Recaptcha requires some specific settings that must be obtained from configuration. FormActions are configured in the exact same as Authenticators are. In this example, we pull the Google Recaptcha site key from configuration and add it as an attribute to the form provider. Our registration template file can read this attribute now."
msgstr ""

msgid "Recaptcha also has the requirement of loading a JavaScript script. You can do this by calling LoginFormsProvider.addScript() passing in the URL."
msgstr ""

msgid "For user profile processing, there is no additional information that it needs to add to the form, so its buildPage() method is empty."
msgstr ""

msgid "The next meaty part of this interface is the validate() method. This is called immediately upon receiving a form post. Let's look at the Recaptcha's plugin first."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public void validate(ValidationContext context) {\n"
"        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"        List<FormMessage> errors = new ArrayList<>();\n"
"        boolean success = false;\n"
"\n"
"        String captcha = formData.getFirst(G_RECAPTCHA_RESPONSE);\n"
"        if (!Validation.isBlank(captcha)) {\n"
"            AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n"
"            String secret = captchaConfig.getConfig().get(SITE_SECRET);\n"
"\n"
"            success = validateRecaptcha(context, success, captcha, secret);\n"
"        }\n"
"        if (success) {\n"
"            context.success();\n"
"        } else {\n"
"            errors.add(new FormMessage(null, Messages.RECAPTCHA_FAILED));\n"
"            formData.remove(G_RECAPTCHA_RESPONSE);\n"
"            context.validationError(formData, errors);\n"
"            return;\n"
"\n"
"\n"
"        }\n"
"    }"
msgstr ""

msgid "Here we obtain the form data that the Recaptcha widget adds to the form. We obtain the Recaptcha secret key from configuration. We then validate the recaptcha. If successful, ValidationContext.success() is called. If not, we invoke ValidationContext.validationError() passing in the formData (so the user doesn't have to re-enter data), we also specify an error message we want displayed. The error message must point to a message bundle property in the internationalized message bundles. For other registration extensions validate() might be validating the format of a form element, for example an alternative email attribute."
msgstr ""

msgid "Let's also look at the user profile plugin that is used to validate email address and other user information when registering."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public void validate(ValidationContext context) {\n"
"        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"        List<FormMessage> errors = new ArrayList<>();\n"
"\n"
"        String eventError = Errors.INVALID_REGISTRATION;\n"
"\n"
"        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_FIRST_NAME)))) {\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_FIRST_NAME, Messages.MISSING_FIRST_NAME));\n"
"        }\n"
"\n"
"        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_LAST_NAME)))) {\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_LAST_NAME, Messages.MISSING_LAST_NAME));\n"
"        }\n"
"\n"
"        String email = formData.getFirst(Validation.FIELD_EMAIL);\n"
"        if (Validation.isBlank(email)) {\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.MISSING_EMAIL));\n"
"        } else if (!Validation.isEmailValid(email)) {\n"
"            formData.remove(Validation.FIELD_EMAIL);\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.INVALID_EMAIL));\n"
"        }\n"
"\n"
"        if (context.getSession().users().getUserByEmail(email, context.getRealm()) != null) {\n"
"            formData.remove(Validation.FIELD_EMAIL);\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.EMAIL_EXISTS));\n"
"        }\n"
"\n"
"        if (errors.size() > 0) {\n"
"            context.validationError(formData, errors);\n"
"            return;\n"
"\n"
"        } else {\n"
"            context.success();\n"
"        }\n"
"    }"
msgstr ""

msgid "As you can see, this validate() method of user profile processing makes sure that the email, first, and last name are filled in the form. It also makes sure that email is in the right format. If any of these validations fail, an error message is queued up for rendering. Any fields in error are removed from the form data. Error messages are represented by the FormMessage class. The first parameter of the constructor of this class takes the HTML element id. The input in error will be highlighted when the form is re-rendered. The second parameter is a message reference id. This id must correspond to a property in one of the localized message bundle files. in the theme."
msgstr ""

msgid "After all validations have been processed then, the form flow then invokes the FormAction.success() method. For recaptcha this is a no-op, so we won't go over it. For user profile processing, this method fills in values in the registered user."
msgstr ""

msgid ""
"\n"
"    @Override\n"
"    public void success(FormContext context) {\n"
"        UserModel user = context.getUser();\n"
"        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"        user.setFirstName(formData.getFirst(RegistrationPage.FIELD_FIRST_NAME));\n"
"        user.setLastName(formData.getFirst(RegistrationPage.FIELD_LAST_NAME));\n"
"        user.setEmail(formData.getFirst(RegistrationPage.FIELD_EMAIL));\n"
"    }"
msgstr ""

msgid "Pretty simple implementation. The UserModel of the newly registered user is obtained from the FormContext. The appropriate methods are called to initialize UserModel data."
msgstr ""

msgid "Finally, you are also required to define a FormActionFactory class. This class is implemented similarly to AuthenticatorFactory, so we won't go over it."
msgstr ""

msgid "Packaging the action"
msgstr ""

msgid "You will package your classes within a single jar. This jar must contain a file named  `org.keycloak.authentication.FormActionFactory`                and must be contained in the `META-INF/services/` directory of your jar. This file must list the fully qualified class name of each FormActionFactory implementation you have in the jar. For example:"
msgstr ""

msgid ""
"\n"
"org.keycloak.authentication.forms.RegistrationProfile\n"
"org.keycloak.authentication.forms.RegistrationRecaptcha"
msgstr ""

msgid "Adding FormAction to the registration flow"
msgstr ""

msgid "Adding a FormAction to a registration page flow must be done in the Admin Console. If you go to the Authentication menu item and go to the Flow tab, you will be able to view the currently defined flows. You cannot modify built in flows, so, to add the Authenticator we've created you have to copy an existing flow or create your own. I'm hoping the UI is intuitive enough so that you can figure out for yourself how to create a flow and add the FormAction."
msgstr ""

msgid "Basically you'll have to copy the registration flow. Then click Actions menu to the right of the Registration Form, and pick \"Add execution\" to add a new execution. You'll pick the FormAction from the selection list. Make sure your FormAction comes after \"Registration User Creation\" by using the down buttons to move it if your FormAction isn't already listed after \"Registration User Creation\".  You want your FormAction to come after user creation because the success() method of Registration User Creation is responsible for creating the new UserModel."
msgstr ""

msgid "After you've created your flow, you have to bind it to registration. If you go to the Authentication menu and go  to the Bindings tab you will see options to bind a flow to the browser, registration, or direct grant flow."
msgstr ""

msgid "Modifying forgot password/credential flow"
msgstr ""

msgid "{project_name} also has a specific authentication flow for forgot password, or rather credential reset initiated by a user. If you go to the Admin Console flows page, there is a \"reset credentials\" flow. By default, {project_name} asks for the email or username of the user and sends an email to them. If the user clicks on the link, then they are able to reset both their password and OTP (if an OTP has been set up).  You can disable automatic OTP reset by disabling the \"Reset OTP\" authenticator in the flow."
msgstr ""

msgid "You can add additional functionality to this flow as well. For example, many deployments would like for the user to answer one or more secret questions in additional to sending an email with a link. You could expand on the secret question example that comes with the distro and incorporate it into the reset credential flow."
msgstr ""

msgid "One thing to note if you are extending the reset credentials flow. The first \"authenticator\" is just a page to obtain the username or email. If the username or email exists, then the AuthenticationFlowContext.getUser() will return the located user. Otherwise this will be null. This form *WILL NOT* re-ask the user to enter in an email or username if the previous email or username did not exist. You need to prevent attackers from being able to guess valid users. So, if AuthenticationFlowContext.getUser() returns null, you should proceed with the flow to make it look like a valid user was selected. I suggest that if you want to add secret questions to this flow, you should ask these questions after the email is sent. In other words, add your custom authenticator after the \"Send Reset Email\" authenticator."
msgstr ""

msgid "Modifying first broker login flow"
msgstr ""

msgid "First Broker Login flow is used during first login with some identity provider. Term `First Login` means that there is not yet existing {project_name} account linked with the particular authenticated identity provider account."
msgstr ""

msgid "See the `Identity Brokering` chapter in link:{adminguide_link}[{adminguide_name}] ."
msgstr ""

msgid "Authentication of clients"
msgstr ""

msgid "{project_name} actually supports pluggable authentication for https://openid.net/specs/openid-connect-core-1_0.html[OpenID Connect] client applications. Authentication of client (application) is used under the hood by the {project_name} adapter during sending any backchannel requests to the {project_name} server (like the request for exchange code to access token after successful authentication or request to refresh token). But the client authentication can be also used directly by you during `Direct Access grants` (represented by OAuth2 `Resource Owner Password Credentials Flow`) or during `Service account` authentication (represented by OAuth2 `Client Credentials Flow`)."
msgstr ""

msgid "For more details about {project_name} adapter and OAuth2 flows see link:{adapterguide_link}[{adapterguide_name}]."
msgstr ""

msgid "Default implementations"
msgstr ""

msgid "Actually {project_name} has 2 default implementations of client authentication:"
msgstr ""

msgid "Traditional authentication with client_id and client_secret"
msgstr ""

msgid "This is default mechanism mentioned in the https://openid.net/specs/openid-connect-core-1_0.html[OpenID Connect]                                or https://datatracker.ietf.org/doc/html/rfc6749[OAuth2] specification and {project_name} supports it since it's early days. The public client needs to include `client_id` parameter with its ID in the POST request (so it's defacto not authenticated) and the confidential client needs to include `Authorization: Basic` header with the clientId and clientSecret used as username and password."
msgstr ""

msgid "Authentication with signed JWT"
msgstr ""

msgid "This is based on the https://datatracker.ietf.org/doc/html/rfc7523[JWT Bearer Token Profiles for OAuth 2.0] specification. The client/adapter generates the https://datatracker.ietf.org/doc/html/rfc7519[JWT] and signs it with his private key. The {project_name} then verifies the signed JWT with the client's public key and authenticates client based on it."
msgstr ""

msgid "See the demo example and especially the `examples/preconfigured-demo/product-app` for the example application showing the application using client authentication with signed JWT."
msgstr ""

msgid "Implement your own client authenticator"
msgstr ""

msgid "For plug your own client authenticator, you need to implement few interfaces on both client (adapter) and server side."
msgstr ""

msgid "Client side"
msgstr ""

msgid "Here you need to implement `org.keycloak.adapters.authentication.ClientCredentialsProvider` and put the implementation either to:"
msgstr ""

msgid "your WAR file into WEB-INF/classes . But in this case, the implementation can be used just for this single WAR application"
msgstr ""

msgid "Some JAR file, which will be added into WEB-INF/lib of your WAR"
msgstr ""

msgid "Some JAR file, which will be used as jboss module and configured in jboss-deployment-structure.xml of your WAR.                                In all cases, you also need to create the file `META-INF/services/org.keycloak.adapters.authentication.ClientCredentialsProvider`                                either in the WAR or in your JAR."
msgstr ""

msgid "Server side"
msgstr ""

msgid "Here you need to implement `org.keycloak.authentication.ClientAuthenticatorFactory` and `org.keycloak.authentication.ClientAuthenticator` . You also need to add the file `META-INF/services/org.keycloak.authentication.ClientAuthenticatorFactory` with the name of the implementation classes. See <<_auth_spi_walkthrough,authenticators>> for more details."
msgstr ""

msgid "Action Token SPI"
msgstr ""

msgid "An action token is a special instance of Json Web Token (JWT) that permits its bearer to perform some actions, e. g. to reset a password or validate e-mail address. They are usually sent to users in form of a link that points to an endpoint processing action tokens for a particular realm."
msgstr ""

msgid "{project_name} offers four basic token types allowing the bearer to:"
msgstr ""

msgid "Reset credentials"
msgstr ""

msgid "Confirm e-mail address"
msgstr ""

msgid "Execute required action(s)"
msgstr ""

msgid "Confirm linking of an account with account in external identity provider"
msgstr ""

msgid "In addition to that, it is possible to implement any functionality that initiates or modifies authentication session using action token SPI, details of which are described in the text below."
msgstr ""

msgid "Anatomy of action token"
msgstr ""

msgid "Action token is a standard Json Web Token signed with active realm key where the payload contains several fields:"
msgstr ""

msgid "`typ` - Identification of the action (e.g. `verify-email`)"
msgstr ""

msgid "`iat` and `exp` - Times of token validity"
msgstr ""

msgid "`sub` - ID of the user"
msgstr ""

msgid "`azp` - Client name"
msgstr ""

msgid "`iss` - Issuer - URL of the issuing realm"
msgstr ""

msgid "`aud` - Audience - list containing URL of the issuing realm"
msgstr ""

msgid "`asid` - ID of the authentication session (_optional_)"
msgstr ""

msgid "`nonce` - Random nonce to guarantee uniqueness of use if the operation can only be executed once (_optional_)"
msgstr ""

msgid "In addition, an action token can contain any number of custom fields serializable into JSON."
msgstr ""

msgid "Action token processing"
msgstr ""

msgid "When an action token is passed to a {project_name} endpoint `_KEYCLOAK_ROOT_{kc_realms_path}/master/login-actions/action-token` via `key` parameter, it is validated and a proper action token handler is executed. *The processing always takes place in a context of an authentication session*, either a fresh one or the action token service joins an existing authentication session (details are described below). The action token handler can perform actions prescribed by the token (often it alters the authentication session) and results into an HTTP response (e.g. it can continue in authentication or display an information/error page). These steps are detailed below."
msgstr ""

msgid "*Basic action token validation.* Signature and time validity is checked, and action token handler is determined based on `typ` field."
msgstr ""

msgid "[[determining-auth-sess]]*Determining authentication session.* If the action token URL was opened in browser with existing authentication session, and the token contains authentication session ID matching the authentication session from the browser, action token validation and handling will attach this ongoing authentication session. Otherwise, action token handler creates a fresh authentication session that replaces any other authentication session present at that time in the browser."
msgstr ""

msgid "*Token validations specific for token type.* Action token endpoint logic validates that the user (`sub` field) and client (`azp`) from the token exist, are valid and not disabled. Then it validates all custom validations defined in the action token handler. Furthermore, token handler can request this token be single-use. Already used tokens would then be rejected by action token endpoint logic."
msgstr ""

msgid "*Performing the action.* After all these validations, action token handler code is called that performs the actual action according to parameters in the token."
msgstr ""

msgid "*Invalidation of single-Use tokens.* If the token is set to single-use, once the authentication flow finishes, the action token is invalidated."
msgstr ""

msgid "Implement your own action token and its handler"
msgstr ""

msgid "How to create an action token"
msgstr ""

msgid "As action token is just a signed JWT with few mandatory fields (see <<_action_token_anatomy,Anatomy of action token>> above), it can be serialized and signed as such using Keycloak's `JWSBuilder` class. This way has been already implemented in `serialize(session, realm, uriInfo)` method of `org.keycloak.authentication.actiontoken.DefaultActionToken` and can be leveraged by implementors by using that class for tokens instead of plain `JsonWebToken`."
msgstr ""

msgid "The following example shows the implementation of a simple action token. Note that the class must have a private constructor without any arguments. This is necessary to deserialize the token class from JWT."
msgstr ""

msgid ""
"import org.keycloak.authentication.actiontoken.DefaultActionToken;\n"
"\n"
"public class DemoActionToken extends DefaultActionToken {\n"
"\n"
"    public static final String TOKEN_TYPE = \"my-demo-token\";\n"
"\n"
"    public DemoActionToken(String userId, int absoluteExpirationInSecs, String compoundAuthenticationSessionId) {\n"
"        super(userId, TOKEN_TYPE, absoluteExpirationInSecs, null, compoundAuthenticationSessionId);\n"
"    }\n"
"\n"
"    private DemoActionToken() {\n"
"        // Required to deserialize from JWT\n"
"        super();\n"
"    }\n"
"}"
msgstr ""

msgid "If the action token you are implementing contains any custom fields that should be serializabled to JSON fields, you should consider implementing a descendant of `org.keycloak.representations.JsonWebToken` class that would implement `org.keycloak.models.ActionTokenKeyModel` interface. In that case, you can take advantage of the existing `org.keycloak.authentication.actiontoken.DefaultActionToken` class as it already satisfies both these conditions, and either use it directly or implement its child, the fields of which can be annotated with appropriate Jackson annotations, e.g. `com.fasterxml.jackson.annotation.JsonProperty` to serialize them to JSON."
msgstr ""

msgid "The following example extends the `DemoActionToken` from the previous example with the field `demo-id`:"
msgstr ""

msgid ""
"import com.fasterxml.jackson.annotation.JsonProperty;\n"
"import org.keycloak.authentication.actiontoken.DefaultActionToken;\n"
"\n"
"public class DemoActionToken extends DefaultActionToken {\n"
"\n"
"    public static final String TOKEN_TYPE = \"my-demo-token\";\n"
"\n"
"    private static final String JSON_FIELD_DEMO_ID = \"demo-id\";\n"
"\n"
"    @JsonProperty(value = JSON_FIELD_DEMO_ID)\n"
"    private String demoId;\n"
"\n"
"    public DemoActionToken(String userId, int absoluteExpirationInSecs, String compoundAuthenticationSessionId, String demoId) {\n"
"        super(userId, TOKEN_TYPE, absoluteExpirationInSecs, null, compoundAuthenticationSessionId);\n"
"        this.demoId =  demoId;\n"
"    }\n"
"\n"
"    private DemoActionToken() {\n"
"        // you must have this private constructor for deserializer\n"
"    }\n"
"\n"
"    public String getDemoId() {\n"
"        return demoId;\n"
"    }\n"
"}\n"
msgstr ""

msgid "To plug your own action token and its handler, you need to implement few interfaces on server side:"
msgstr ""

msgid "`org.keycloak.authentication.actiontoken.ActionTokenHandler` - actual handler of action token for a particular action (i.e. for a given value of `typ` token field)."
msgstr ""

msgid "The central method in that interface is `handleToken(token, context)` which defines actual operation executed upon receiving the action token. Usually it is some alteration of authentication session notes but generally it can be arbitrary. This method is only called if all verifiers (including those defined in `getVerifiers(context)`) have succeeded, and it is guaranteed that the `token` would be of the class returned by `getTokenClass()` method."
msgstr ""

msgid "To be able to determine whether the action token was issued for the current authentication session as described in <<determining-auth-sess,Item 2 above>>, method for extracting authentication session ID has to be declared in `getAuthenticationSessionIdFromToken(token, context)` method. The implementation in `DefaultActionToken` returns the value of `asid` field from the token if it is defined. Note that you can override that method to return current authentication session ID regardless of the token - that way you can create tokens that would step into the ongoing authentication flow before any authentication flow would be started."
msgstr ""

msgid "If the authentication session from the token does not match the current one, the action token handler would be asked to start a fresh one by calling `startFreshAuthenticationSession(token, context)`. It can throw a `VerificationException` (or better its more descriptive variant `ExplainedTokenVerificationException`) to signal that would be forbidden."
msgstr ""

msgid "The token handler also determines via method `canUseTokenRepeatedly(token, context)` whether the token would be invalidated after it is used and authentication completes. Note that if you would have a flow utilizing multiple action token, only the last token would be invalidated. In that case, you should use `org.keycloak.models.ActionTokenStoreProvider` in action token handler to invalidate the used tokens manually."
msgstr ""

msgid "Default implementation of most of the `ActionTokenHandler` methods is the `org.keycloak.authentication.actiontoken.AbstractActionTokenHander` abstract class in `keycloak-services` module. The only method that needs to be implemented is `handleToken(token, context)` that performs the actual action."
msgstr ""

msgid "`org.keycloak.authentication.actiontoken.ActionTokenHandlerFactory` - factory that instantiates action token handler. Implementations have to override `getId()` to return value that must match precisely the value of `typ` field in the action token."
msgstr ""

msgid "Note that you have to register the custom `ActionTokenHandlerFactory` implementation as explained in the <<_providers,Service Provider Interfaces>> section of this guide."
msgstr ""

msgid "Event Listener SPI"
msgstr ""

msgid "Writing a Event Listener Provider starts by implementing the `EventListenerProvider` and `EventListenerProviderFactory` interfaces. Please see the Javadoc and examples for complete details on how to do this."
msgstr ""

msgid "For details on how to package and deploy a custom provider refer to the <<_providers,Service Provider Interfaces>> chapter."
msgstr ""

msgid "SAML role mappings SPI"
msgstr ""

msgid "{project_name} defines a SPI for mapping SAML roles into roles that exist in the SP environment. The roles returned by a third-party IDP might not always correspond to the roles that were defined for the SP application so there is a need for a mechanism that allows mapping the SAML roles into different roles. It is used by the SAML adapter after it extracts the roles from the SAML assertion to set up the container's security context."
msgstr ""

msgid "The `org.keycloak.adapters.saml.RoleMappingsProvider` SPI doesn't impose any restrictions on the mappings that can be performed. Implementations can not only map roles into other roles but also add or remove roles (and thus augment or reduce the set of roles assigned to the SAML principal) depending on the use case."
msgstr ""

msgid "For details about the configuration of the role mappings provider for the SAML adapter as well as a description of the default implementations available see the link:{adapterguide_link}[{adapterguide_name}]."
msgstr ""

msgid "Implementing a custom role mappings provider"
msgstr ""

msgid "To implement a custom role mappings provider one first needs to implement the `org.keycloak.adapters.saml.RoleMappingsProvider` interface. Then, a `META-INF/services/org.keycloak.adapters.saml.RoleMappingsProvider` file containing the fully qualified name of the custom implementation must be added to the archive that also contains the implementation class. This archive can be:"
msgstr ""

msgid "The SP application WAR file where the provider class is included in WEB-INF/classes;"
msgstr ""

msgid "A custom JAR file which will be added into WEB-INF/lib of the SP application WAR;"
msgstr ""

msgid "(WildFly/JBoss EAP only) A custom JAR file configured as a `jboss module` and referenced in `jboss-deployment-structure.xml` of the SP application WAR."
msgstr ""

msgid "When the SP application is deployed, the role mappings provider that will be used is selected by the id that was set in `keycloak-saml.xml` or in the `keycloak-saml` subsystem. So to enable your custom provider simply make sure that its id is properly set in the adapter configuration."
msgstr ""

msgid "User Storage SPI"
msgstr ""

msgid "You can use the User Storage SPI to write extensions to {project_name} to connect to external user databases and credential stores. The built-in LDAP and ActiveDirectory support is an implementation of this SPI in action. Out of the box, {project_name} uses its local database to create, update, and look up users and validate credentials. Often though, organizations have existing external proprietary user databases that they cannot migrate to {project_name}'s data model. For those situations, application developers can write implementations of the User Storage SPI to bridge the external user store and the internal user object model that {project_name} uses to log in users and manage them."
msgstr ""

msgid "When the {project_name} runtime needs to look up a user, such as when a user is logging in, it performs a number of steps to locate the user. It first looks to see if the user is in the user cache; if the user is found it uses that in-memory representation. Then it looks for the user within the {project_name} local database. If the user is not found, it then loops through User Storage SPI provider implementations to perform the user query until one of them returns the user the runtime is looking for. The provider queries the external user store for the user and maps the external data representation of the user to {project_name}'s user metamodel."
msgstr ""

msgid "User Storage SPI provider implementations can also perform complex criteria queries, perform CRUD operations on users, validate and manage credentials, or perform bulk updates of many users at once. It depends on the capabilities of the external store."
msgstr ""

msgid "User Storage SPI provider implementations are packaged and deployed similarly to (and often are) Jakarta EE components. They are not enabled by default, but instead must be enabled and configured per realm under the `User Federation` tab in the administration console."
msgstr ""

msgid "If your user provider implementation is using some user attributes as the metadata attributes for linking/establishing the user identity, then please make sure that users are not able to edit the attributes and the corresponding attributes are read-only. The example is the `LDAP_ID` attribute, which the built-in {project_name} LDAP provider is using for to store the ID of the user on the LDAP server side. See the details in the link:{adminguide_link}#_read_only_user_attributes[Threat model mitigation chapter]."
msgstr ""

msgid "Provider interfaces"
msgstr ""

msgid "When building an implementation of the User Storage SPI you have to define a provider class and a provider factory. Provider class instances are created per transaction by provider factories. Provider classes do all the heavy lifting of user lookup and other user operations.  They must implement the `org.keycloak.storage.UserStorageProvider` interface."
msgstr ""

msgid ""
"package org.keycloak.storage;\n"
"\n"
"public interface UserStorageProvider extends Provider {\n"
"\n"
"\n"
"    /**\n"
"     * Callback when a realm is removed.  Implement this if, for example, you want to do some\n"
"     * cleanup in your user storage when a realm is removed\n"
"     *\n"
"     * @param realm\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm) {\n"
"\n"
"    }\n"
"\n"
"    /**\n"
"     * Callback when a group is removed.  Allows you to do things like remove a user\n"
"     * group mapping in your external store if appropriate\n"
"     *\n"
"     * @param realm\n"
"     * @param group\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, GroupModel group) {\n"
"\n"
"    }\n"
"\n"
"    /**\n"
"     * Callback when a role is removed.  Allows you to do things like remove a user\n"
"     * role mapping in your external store if appropriate\n"
"\n"
"     * @param realm\n"
"     * @param role\n"
"     */\n"
"    default\n"
"    void preRemove(RealmModel realm, RoleModel role) {\n"
"\n"
"    }\n"
"\n"
"}"
msgstr ""

msgid "You may be thinking that the `UserStorageProvider` interface is pretty sparse? You'll see later in this chapter that there are other mix-in interfaces your provider class may implement to support the meat of user integration."
msgstr ""

msgid "`UserStorageProvider` instances are created once per transaction. When the transaction is complete, the `UserStorageProvider.close()` method is invoked and the instance is then garbage collected. Instances are created by provider factories. Provider factories implement the `org.keycloak.storage.UserStorageProviderFactory` interface."
msgstr ""

msgid ""
"package org.keycloak.storage;\n"
"\n"
"/**\n"
" * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n"
" * @version $Revision: 1 $\n"
" */\n"
"public interface UserStorageProviderFactory<T extends UserStorageProvider> extends ComponentFactory<T, UserStorageProvider> {\n"
"\n"
"    /**\n"
"     * This is the name of the provider and will be shown in the admin console as an option.\n"
"     *\n"
"     * @return\n"
"     */\n"
"    @Override\n"
"    String getId();\n"
"\n"
"    /**\n"
"     * called per Keycloak transaction.\n"
"     *\n"
"     * @param session\n"
"     * @param model\n"
"     * @return\n"
"     */\n"
"    T create(KeycloakSession session, ComponentModel model);\n"
"...\n"
"}"
msgstr ""

msgid "Provider factory classes must specify the concrete provider class as a template parameter when implementing the `UserStorageProviderFactory`.  This is a must as the runtime will introspect this class to scan for its capabilities (the other interfaces it implements).  So for example, if your provider class is named `FileProvider`, then the factory class should look like this:"
msgstr ""

msgid ""
"public class FileProviderFactory implements UserStorageProviderFactory<FileProvider> {\n"
"\n"
"    public String getId() { return \"file-provider\"; }\n"
"\n"
"    public FileProvider create(KeycloakSession session, ComponentModel model) {\n"
"       ...\n"
"    }"
msgstr ""

msgid "The `getId()` method returns the name of the User Storage provider.  This id will be displayed in the admin console's User Federation page when you want to enable the provider for a specific realm."
msgstr ""

msgid "The `create()` method is responsible for allocating an instance of the provider class.  It takes a `org.keycloak.models.KeycloakSession` parameter.  This object can be used to look up other information and metadata as well as provide access to various other components within the runtime.  The `ComponentModel` parameter represents how the provider was enabled and configured within a specific realm.  It contains the instance id of the enabled provider as well as any configuration you may have specified for it when you enabled through the admin console."
msgstr ""

msgid "The `UserStorageProviderFactory` has other capabilities as well which we will go over later in this chapter."
msgstr ""

msgid "Provider capability interfaces"
msgstr ""

msgid "If you have examined the `UserStorageProvider` interface closely you might notice that it does not define any methods for locating or managing users. These methods are actually defined in other _capability interfaces_ depending on what scope of capabilities your external user store can provide and execute on. For example, some external stores are read-only and can only do simple queries and credential validation. You will only be required to implement the _capability interfaces_ for the features you are able to. You can implement these interfaces:"
msgstr ""

msgid "SPI"
msgstr ""

msgid "Description"
msgstr ""

msgid "`org.keycloak.storage.user.UserLookupProvider`"
msgstr ""

msgid "This interface is required if you want to be able to log in with users from this external store. Most (all?) providers implement this interface."
msgstr ""

msgid "`org.keycloak.storage.user.UserQueryProvider`"
msgstr ""

msgid "Defines complex queries that are used to locate one or more users. You must implement this interface if you want to view and manage users from the administration console."
msgstr ""

msgid "`org.keycloak.storage.user.UserRegistrationProvider`"
msgstr ""

msgid "Implement this interface if your provider supports adding and removing users."
msgstr ""

msgid "`org.keycloak.storage.user.UserBulkUpdateProvider`"
msgstr ""

msgid "Implement this interface if your provider supports bulk update of a set of users."
msgstr ""

msgid "`org.keycloak.credential.CredentialInputValidator`"
msgstr ""

msgid "Implement this interface if your provider can validate one or more different credential types (for example, if your provider can validate a password)."
msgstr ""

msgid "`org.keycloak.credential.CredentialInputUpdater`"
msgstr ""

msgid "Implement this interface if your provider supports updating one or more different credential types."
msgstr ""

msgid "Model interfaces"
msgstr ""

msgid "Most of the methods defined in the _capability_ _interfaces_ either return or are passed in representations of a user. These representations are defined by the `org.keycloak.models.UserModel` interface. App developers are required to implement this interface. It provides a mapping between the external user store and the user metamodel that {project_name} uses."
msgstr ""

msgid ""
"package org.keycloak.models;\n"
"\n"
"public interface UserModel extends RoleMapperModel {\n"
"    String getId();\n"
"\n"
"    String getUsername();\n"
"    void setUsername(String username);\n"
"\n"
"    String getFirstName();\n"
"    void setFirstName(String firstName);\n"
"\n"
"    String getLastName();\n"
"    void setLastName(String lastName);\n"
"\n"
"    String getEmail();\n"
"    void setEmail(String email);\n"
"...\n"
"}"
msgstr ""

msgid "`UserModel` implementations provide access to read and update metadata about the user including things like username, name, email, role and group mappings, as well as other arbitrary attributes."
msgstr ""

msgid "There are other model classes within the `org.keycloak.models` package that represent other parts of the {project_name} metamodel: `RealmModel`, `RoleModel`, `GroupModel`, and `ClientModel`."
msgstr ""

msgid "Storage Ids"
msgstr ""

msgid "One important method of `UserModel` is the `getId()` method. When implementing `UserModel` developers must be aware of the user id format. The format must be:"
msgstr ""

msgid "\"f:\" + component id + \":\" + external id"
msgstr ""

msgid "The {project_name} runtime often has to look up users by their user id. The user id contains enough information so that the runtime does not have to query every single `UserStorageProvider` in the system to find the user."
msgstr ""

msgid "The component id is the id returned from `ComponentModel.getId()`. The `ComponentModel` is passed in as a parameter when creating the provider class so you can get it from there. The external id is information your provider class needs to find the user in the external store. This is often a username or a uid. For example, it might look something like this:"
msgstr ""

msgid "f:332a234e31234:wburke"
msgstr ""

msgid "When the runtime does a lookup by id, the id is parsed to obtain the component id. The component id is used to locate the `UserStorageProvider` that was originally used to load the user. That provider is then passed the id. The provider again parses the id to obtain the external id and it will use to locate the user in external user storage."
msgstr ""

msgid "Packaging and deployment"
msgstr ""

msgid "In order for {project_name} to recognize the provider, you need to add a file to the JAR: `META-INF/services/org.keycloak.storage.UserStorageProviderFactory`. This file must contain a line-separated list of fully qualified classnames of the `UserStorageProviderFactory` implementations:"
msgstr ""

msgid ""
"org.keycloak.examples.federation.properties.ClasspathPropertiesStorageFactory\n"
"org.keycloak.examples.federation.properties.FilePropertiesStorageFactory"
msgstr ""

msgid "Simple read-only, lookup example"
msgstr ""

msgid "To illustrate the basics of implementing the User Storage SPI let's walk through a simple example. In this chapter you'll see the implementation of a simple `UserStorageProvider` that looks up users in a simple property file. The property file contains username and password definitions and is hardcoded to a specific location on the classpath. The provider will be able to look up the user by ID and username and also be able to validate passwords. Users that originate from this provider will be read-only."
msgstr ""

msgid "Provider class"
msgstr ""

msgid "The first thing we will walk through is the `UserStorageProvider` class."
msgstr ""

msgid ""
"public class PropertyFileUserStorageProvider implements\n"
"        UserStorageProvider,\n"
"        UserLookupProvider,\n"
"        CredentialInputValidator,\n"
"        CredentialInputUpdater\n"
"{\n"
"...\n"
"}"
msgstr ""

msgid "Our provider class, `PropertyFileUserStorageProvider`, implements many interfaces. It implements the `UserStorageProvider` as that is a base requirement of the SPI. It implements the `UserLookupProvider` interface because we want to be able to log in with users stored by this provider. It implements the `CredentialInputValidator` interface because we want to be able to validate passwords entered in using the login screen. Our property file is read-only. We implement the `CredentialInputUpdater` because we want to post an error condition when the user attempts to update his password."
msgstr ""

msgid ""
"    protected KeycloakSession session;\n"
"    protected Properties properties;\n"
"    protected ComponentModel model;\n"
"    // map of loaded users in this transaction\n"
"    protected Map<String, UserModel> loadedUsers = new HashMap<>();\n"
"\n"
"    public PropertyFileUserStorageProvider(KeycloakSession session, ComponentModel model, Properties properties) {\n"
"        this.session = session;\n"
"        this.model = model;\n"
"        this.properties = properties;\n"
"    }"
msgstr ""

msgid "The constructor for this provider class is going to store the reference to the `KeycloakSession`, `ComponentModel`, and property file. We'll use all of these later. Also notice that there is a map of loaded users. Whenever we find a user we will store it in this map so that we avoid re-creating it again within the same transaction. This is a good practice to follow as many providers will need to do this (that is, any provider that integrates with JPA). Remember also that provider class instances are created once per transaction and are closed after the transaction completes."
msgstr ""

msgid "UserLookupProvider implementation"
msgstr ""

msgid ""
"    @Override\n"
"    public UserModel getUserByUsername(String username, RealmModel realm) {\n"
"        UserModel adapter = loadedUsers.get(username);\n"
"        if (adapter == null) {\n"
"            String password = properties.getProperty(username);\n"
"            if (password != null) {\n"
"                adapter = createAdapter(realm, username);\n"
"                loadedUsers.put(username, adapter);\n"
"            }\n"
"        }\n"
"        return adapter;\n"
"    }\n"
"\n"
"    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        return new AbstractUserAdapter(session, realm, model) {\n"
"            @Override\n"
"            public String getUsername() {\n"
"                return username;\n"
"            }\n"
"        };\n"
"    }\n"
"\n"
"    @Override\n"
"    public UserModel getUserById(String id, RealmModel realm) {\n"
"        StorageId storageId = new StorageId(id);\n"
"        String username = storageId.getExternalId();\n"
"        return getUserByUsername(username, realm);\n"
"    }\n"
"\n"
"    @Override\n"
"    public UserModel getUserByEmail(String email, RealmModel realm) {\n"
"        return null;\n"
"    }\n"
"\n"
msgstr ""

msgid "The `getUserByUsername()` method is invoked by the {project_name} login page when a user logs in. In our implementation we first check the `loadedUsers` map to see if the user has already been loaded within this transaction. If it hasn't been loaded we look in the property file for the username. If it exists we create an implementation of `UserModel`, store it in `loadedUsers` for future reference, and return this instance."
msgstr ""

msgid "The `createAdapter()` method uses the helper class `org.keycloak.storage.adapter.AbstractUserAdapter`. This provides a base implementation for `UserModel`. It automatically generates a user id based on the required storage id format using the username of the user as the external id."
msgstr ""

msgid "\"f:\" + component id + \":\" + username"
msgstr ""

msgid "Every get method of `AbstractUserAdapter` either returns null or empty collections. However, methods that return role and group mappings will return the default roles and groups configured for the realm for every user.  Every set method of `AbstractUserAdapter` will throw a `org.keycloak.storage.ReadOnlyException`. So if you attempt to modify the user in the Admin Console, you will get an error."
msgstr ""

msgid "The `getUserById()` method parses the `id` parameter using the `org.keycloak.storage.StorageId` helper class. The `StorageId.getExternalId()` method is invoked to obtain the username embeded in the `id` parameter. The method then delegates to `getUserByUsername()`."
msgstr ""

msgid "Emails are not stored, so the `getUserByEmail()` method returns null."
msgstr ""

msgid "CredentialInputValidator implementation"
msgstr ""

msgid "Next let's look at the method implementations for `CredentialInputValidator`."
msgstr ""

msgid ""
"    @Override\n"
"    public boolean isConfiguredFor(RealmModel realm, UserModel user, String credentialType) {\n"
"        String password = properties.getProperty(user.getUsername());\n"
"        return credentialType.equals(PasswordCredentialModel.TYPE) && password != null;\n"
"    }\n"
"\n"
"    @Override\n"
"    public boolean supportsCredentialType(String credentialType) {\n"
"        return credentialType.equals(PasswordCredentialModel.TYPE);\n"
"    }\n"
"\n"
"    @Override\n"
"    public boolean isValid(RealmModel realm, UserModel user, CredentialInput input) {\n"
"        if (!supportsCredentialType(input.getType())) return false;\n"
"\n"
"        String password = properties.getProperty(user.getUsername());\n"
"        if (password == null) return false;\n"
"        return password.equals(input.getChallengeResponse());\n"
"    }"
msgstr ""

msgid "The `isConfiguredFor()` method is called by the runtime to determine if a specific credential type is configured for the user. This method checks to see that the password is set for the user."
msgstr ""

msgid "The `supportsCredentialType()` method returns whether validation is supported for a specific credential type. We check to see if the credential type is `password`."
msgstr ""

msgid "The `isValid()` method is responsible for validating passwords. The `CredentialInput` parameter is really just an abstract interface for all credential types. We make sure that we support the credential type and also that it is an instance of `UserCredentialModel`. When a user logs in through the login page, the plain text of the password input is put into an instance of `UserCredentialModel`. The `isValid()` method checks this value against the plain text password stored in the properties file. A return value of `true` means the password is valid."
msgstr ""

msgid "CredentialInputUpdater implementation"
msgstr ""

msgid "As noted before, the only reason we implement the `CredentialInputUpdater` interface in this example is to forbid modifications of user passwords. The reason we have to do this is because otherwise the runtime would allow the password to be overridden in {project_name} local storage. We'll talk more about this later in this chapter."
msgstr ""

msgid ""
"    @Override\n"
"    public boolean updateCredential(RealmModel realm, UserModel user, CredentialInput input) {\n"
"        if (input.getType().equals(PasswordCredentialModel.TYPE)) throw new ReadOnlyException(\"user is read only for this update\");\n"
"\n"
"        return false;\n"
"    }\n"
"\n"
"    @Override\n"
"    public void disableCredentialType(RealmModel realm, UserModel user, String credentialType) {\n"
"\n"
"    }\n"
"\n"
"    @Override\n"
"    public Set<String> getDisableableCredentialTypes(RealmModel realm, UserModel user) {\n"
"        return Collections.EMPTY_SET;\n"
"    }"
msgstr ""

msgid "The `updateCredential()` method just checks to see if the credential type is password.  If it is, a `ReadOnlyException` is thrown."
msgstr ""

msgid "Provider factory implementation"
msgstr ""

msgid "Now that the provider class is complete, we now turn our attention to the provider factory class."
msgstr ""

msgid ""
"public class PropertyFileUserStorageProviderFactory\n"
"                 implements UserStorageProviderFactory<PropertyFileUserStorageProvider> {\n"
"\n"
"    public static final String PROVIDER_NAME = \"readonly-property-file\";\n"
"\n"
"    @Override\n"
"    public String getId() {\n"
"        return PROVIDER_NAME;\n"
"    }"
msgstr ""

msgid "First thing to notice is that when implementing the `UserStorageProviderFactory` class, you must pass in the concrete provider class implementation as a template parameter. Here we specify the provider class we defined before: `PropertyFileUserStorageProvider`."
msgstr ""

msgid "If you do not specify the template parameter, your provider will not function. The runtime does class introspection          to determine the _capability interfaces_ that the provider implements."
msgstr ""

msgid "The `getId()` method identifies the factory in the runtime and will also be the string shown in the admin console when you want to enable a user storage provider for the realm."
msgstr ""

msgid "Initialization"
msgstr ""

msgid ""
"    private static final Logger logger = Logger.getLogger(PropertyFileUserStorageProviderFactory.class);\n"
"    protected Properties properties = new Properties();\n"
"\n"
"    @Override\n"
"    public void init(Config.Scope config) {\n"
"        InputStream is = getClass().getClassLoader().getResourceAsStream(\"/users.properties\");\n"
"\n"
"        if (is == null) {\n"
"            logger.warn(\"Could not find users.properties in classpath\");\n"
"        } else {\n"
"            try {\n"
"                properties.load(is);\n"
"            } catch (IOException ex) {\n"
"                logger.error(\"Failed to load users.properties file\", ex);\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"    @Override\n"
"    public PropertyFileUserStorageProvider create(KeycloakSession session, ComponentModel model) {\n"
"        return new PropertyFileUserStorageProvider(session, model, properties);\n"
"    }"
msgstr ""

msgid "The `UserStorageProviderFactory` interface has an optional `init()` method you can implement. When {project_name} boots up, only one instance of each provider factory is created. Also at boot time, the `init()` method is called on each of these factory instances. There's also a `postInit()` method you can implement as well. After each factory's `init()` method is invoked, their `postInit()` methods are called."
msgstr ""

msgid "In our `init()` method implementation, we find the property file containing our user declarations from the classpath. We then load the `properties` field with the username and password combinations stored there."
msgstr ""

msgid "The `Config.Scope` parameter is factory configuration that configured through server configuration."
msgstr ""

msgid "For example, by running the server with the following argument:"
msgstr ""

msgid "kc.[sh|bat] start --spi-storage-readonly-property-file-path=/other-users.properties"
msgstr ""

msgid "We can specify the classpath of the user property file instead of hardcoding it. Then you can retrieve the configuration in the `PropertyFileUserStorageProviderFactory.init()`:"
msgstr ""

msgid ""
"public void init(Config.Scope config) {\n"
"    String path = config.get(\"path\");\n"
"    InputStream is = getClass().getClassLoader().getResourceAsStream(path);\n"
"\n"
"    ...\n"
"}"
msgstr ""

msgid "Create method"
msgstr ""

msgid "Our last step in creating the provider factory is the `create()` method."
msgstr ""

msgid ""
"    @Override\n"
"    public PropertyFileUserStorageProvider create(KeycloakSession session, ComponentModel model) {\n"
"        return new PropertyFileUserStorageProvider(session, model, properties);\n"
"    }"
msgstr ""

msgid "We simply allocate the `PropertyFileUserStorageProvider` class.  This create method will be called once per transaction."
msgstr ""

msgid "The class files for our provider implementation should be placed in a jar.  You also have to declare the provider factory class within the `META-INF/services/org.keycloak.storage.UserStorageProviderFactory` file."
msgstr ""

msgid "org.keycloak.examples.federation.properties.FilePropertiesStorageFactory"
msgstr ""

msgid "Enabling the provider in the Admin Console"
msgstr ""

msgid "You enable user storage providers per realm within the *User Federation* page in the Admin Console."
msgstr ""

msgid "User Federation"
msgstr ""

msgid "image:{project_images}/empty-user-federation-page.png[]"
msgstr ""

msgid "Select the provider we just created from the list: `readonly-property-file`."
msgstr ""

msgid "The configuration page for our provider displays."
msgstr ""

msgid "Click *Save* because we have nothing to configure."
msgstr ""

msgid "Configured Provider"
msgstr ""

msgid "image:{project_images}/storage-provider-created.png[]"
msgstr ""

msgid "Return to the main *User Federation* page"
msgstr ""

msgid "You now see your provider listed."
msgstr ""

msgid "image:{project_images}/user-federation-page.png[]"
msgstr ""

msgid "You will now be able to log in with a user declared in the `users.properties` file. This user will only be able to view the account page after logging in."
msgstr ""

msgid "Configuration techniques"
msgstr ""

msgid "Our `PropertyFileUserStorageProvider` example is a bit contrived. It is hardcoded to a property file that is embedded in the jar of the provider, which is not terribly useful. We might want to make the location of this file configurable per instance of the provider. In other words, we might want to reuse this provider multiple times in multiple different realms and point to completely different user property files. We'll also want to perform this configuration within the Admin Console UI."
msgstr ""

msgid "The `UserStorageProviderFactory` has additional methods you can implement that handle provider configuration. You describe the variables you want to configure per provider and the Admin Console automatically renders a generic input page to gather this configuration. When implemented, callback methods also validate the configuration before it is saved, when a provider is created for the first time, and when it is updated. `UserStorageProviderFactory` inherits these methods from the `org.keycloak.component.ComponentFactory` interface."
msgstr ""

msgid ""
"    List<ProviderConfigProperty> getConfigProperties();\n"
"\n"
"    default\n"
"    void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel model)\n"
"            throws ComponentValidationException\n"
"    {\n"
"\n"
"    }\n"
"\n"
"    default\n"
"    void onCreate(KeycloakSession session, RealmModel realm, ComponentModel model) {\n"
"\n"
"    }\n"
"\n"
"    default\n"
"    void onUpdate(KeycloakSession session, RealmModel realm, ComponentModel model) {\n"
"\n"
"    }"
msgstr ""

msgid "The `ComponentFactory.getConfigProperties()` method returns a list of `org.keycloak.provider.ProviderConfigProperty` instances. These instances declare metadata that is needed to render and store each configuration variable of the provider."
msgstr ""

msgid "Configuration example"
msgstr ""

msgid "Let's expand our `PropertyFileUserStorageProviderFactory` example to allow you to point a provider instance to a specific file on disk."
msgstr ""

msgid "PropertyFileUserStorageProviderFactory"
msgstr ""

msgid ""
"public class PropertyFileUserStorageProviderFactory\n"
"                  implements UserStorageProviderFactory<PropertyFileUserStorageProvider> {\n"
"\n"
"    protected static final List<ProviderConfigProperty> configMetadata;\n"
"\n"
"    static {\n"
"        configMetadata = ProviderConfigurationBuilder.create()\n"
"                .property().name(\"path\")\n"
"                .type(ProviderConfigProperty.STRING_TYPE)\n"
"                .label(\"Path\")\n"
"                .defaultValue(\"${jboss.server.config.dir}/example-users.properties\")\n"
"                .helpText(\"File path to properties file\")\n"
"                .add().build();\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<ProviderConfigProperty> getConfigProperties() {\n"
"        return configMetadata;\n"
"    }"
msgstr ""

msgid "The `ProviderConfigurationBuilder` class is a great helper class to create a list of configuration properties. Here we specify a variable named `path` that is a String type. On the Admin Console configuration page for this provider, this configuration variable is labeled as `Path` and has a default value of `${jboss.server.config.dir}/example-users.properties`. When you hover over the tooltip of this configuration option, it displays the help text, `File path to properties file`."
msgstr ""

msgid "The next thing we want to do is to verify that this file exists on disk. We do not want to enable an instance of this provider in the realm unless it points to a valid user property file. To do this, we implement the `validateConfiguration()` method."
msgstr ""

msgid ""
"    @Override\n"
"    public void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel config)\n"
"                   throws ComponentValidationException {\n"
"        String fp = config.getConfig().getFirst(\"path\");\n"
"        if (fp == null) throw new ComponentValidationException(\"user property file does not exist\");\n"
"        fp = EnvUtil.replace(fp);\n"
"        File file = new File(fp);\n"
"        if (!file.exists()) {\n"
"            throw new ComponentValidationException(\"user property file does not exist\");\n"
"        }\n"
"    }"
msgstr ""

msgid "In the `validateConfiguration()` method we get the configuration variable from the `ComponentModel` and we check to see if that file exists on disk. Notice that we use the `org.keycloak.common.util.EnvUtil.replace()` method. With this method any string that has `${}` within it will replace that with a system property value. The `${jboss.server.config.dir}` string corresponds to the `configuration/` directory of our server and is really useful for this example."
msgstr ""

msgid "Next thing we have to do is remove the old `init()` method. We do this because user property files are going to be unique per provider instance. We move this logic to the `create()` method."
msgstr ""

msgid ""
"    @Override\n"
"    public PropertyFileUserStorageProvider create(KeycloakSession session, ComponentModel model) {\n"
"        String path = model.getConfig().getFirst(\"path\");\n"
"\n"
"        Properties props = new Properties();\n"
"        try {\n"
"            InputStream is = new FileInputStream(path);\n"
"            props.load(is);\n"
"            is.close();\n"
"        } catch (IOException e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"\n"
"        return new PropertyFileUserStorageProvider(session, model, props);\n"
"    }"
msgstr ""

msgid "This logic is, of course, inefficient as every transaction reads the entire user property file from disk, but hopefully this illustrates, in a simple way, how to hook in configuration variables."
msgstr ""

msgid "Configuring the provider in the Admin Console"
msgstr ""

msgid "Now that the configuration is enabled, you can set the `path` variable when you configure the provider in the Admin Console."
msgstr ""

msgid "image:{project_images}/storage-provider-with-config.png[]"
msgstr ""

msgid "Add/Remove user and query capability interfaces"
msgstr ""

msgid "One thing we have not done with our example is allow it to add and remove users or change passwords. Users defined in our example are also not queryable or viewable in the Admin Console. To add these enhancements, our example provider must implement the `UserQueryProvider` and `UserRegistrationProvider` interfaces."
msgstr ""

msgid "Implementing UserRegistrationProvider"
msgstr ""

msgid "Use this procedure to implement adding and removing users from the particular store, we first have to be able to save our properties file to disk."
msgstr ""

msgid "PropertyFileUserStorageProvider"
msgstr ""

msgid ""
"    public void save() {\n"
"        String path = model.getConfig().getFirst(\"path\");\n"
"        path = EnvUtil.replace(path);\n"
"        try {\n"
"            FileOutputStream fos = new FileOutputStream(path);\n"
"            properties.store(fos, \"\");\n"
"            fos.close();\n"
"        } catch (IOException e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"    }"
msgstr ""

msgid "Then, the implementation of the `addUser()` and `removeUser()` methods becomes simple."
msgstr ""

msgid ""
"    public static final String UNSET_PASSWORD=\"#$!-UNSET-PASSWORD\";\n"
"\n"
"    @Override\n"
"    public UserModel addUser(RealmModel realm, String username) {\n"
"        synchronized (properties) {\n"
"            properties.setProperty(username, UNSET_PASSWORD);\n"
"            save();\n"
"        }\n"
"        return createAdapter(realm, username);\n"
"    }\n"
"\n"
"    @Override\n"
"    public boolean removeUser(RealmModel realm, UserModel user) {\n"
"        synchronized (properties) {\n"
"            if (properties.remove(user.getUsername()) == null) return false;\n"
"            save();\n"
"            return true;\n"
"        }\n"
"    }"
msgstr ""

msgid "Notice that when adding a user we set the password value of the property map to be `UNSET_PASSWORD`.  We do this as we can't have null values for a property in the property value. We also have to modify the `CredentialInputValidator` methods to reflect this."
msgstr ""

msgid "The `addUser()` method will be called if the provider implements the `UserRegistrationProvider` interface. If your provider has a configuration switch to turn off adding a user, returning `null` from this method will skip the provider and call the next one."
msgstr ""

msgid ""
"    @Override\n"
"    public boolean isValid(RealmModel realm, UserModel user, CredentialInput input) {\n"
"        if (!supportsCredentialType(input.getType()) || !(input instanceof UserCredentialModel)) return false;\n"
"\n"
"        UserCredentialModel cred = (UserCredentialModel)input;\n"
"        String password = properties.getProperty(user.getUsername());\n"
"        if (password == null || UNSET_PASSWORD.equals(password)) return false;\n"
"        return password.equals(cred.getValue());\n"
"    }"
msgstr ""

msgid "Since we can now save our property file, it also makes sense to allow password updates."
msgstr ""

msgid ""
"    @Override\n"
"    public boolean updateCredential(RealmModel realm, UserModel user, CredentialInput input) {\n"
"        if (!(input instanceof UserCredentialModel)) return false;\n"
"        if (!input.getType().equals(CredentialModel.PASSWORD)) return false;\n"
"        UserCredentialModel cred = (UserCredentialModel)input;\n"
"        synchronized (properties) {\n"
"            properties.setProperty(user.getUsername(), cred.getValue());\n"
"            save();\n"
"        }\n"
"        return true;\n"
"    }"
msgstr ""

msgid "We can now also implement disabling a password."
msgstr ""

msgid ""
"    @Override\n"
"    public void disableCredentialType(RealmModel realm, UserModel user, String credentialType) {\n"
"        if (!credentialType.equals(CredentialModel.PASSWORD)) return;\n"
"        synchronized (properties) {\n"
"            properties.setProperty(user.getUsername(), UNSET_PASSWORD);\n"
"            save();\n"
"        }\n"
"\n"
"    }\n"
"\n"
"    private static final Set<String> disableableTypes = new HashSet<>();\n"
"\n"
"    static {\n"
"        disableableTypes.add(CredentialModel.PASSWORD);\n"
"    }\n"
"\n"
"    @Override\n"
"    public Set<String> getDisableableCredentialTypes(RealmModel realm, UserModel user) {\n"
"\n"
"        return disableableTypes;\n"
"    }"
msgstr ""

msgid "With these methods implemented, you'll now be able to change and disable the password for the user in the Admin Console."
msgstr ""

msgid "Implementing UserQueryProvider"
msgstr ""

msgid "Without implementing `UserQueryProvider` the Admin Console would not be able to view and manage users that were loaded by our example provider. Let's look at implementing this interface."
msgstr ""

msgid ""
"    @Override\n"
"    public int getUsersCount(RealmModel realm) {\n"
"        return properties.size();\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<UserModel> getUsers(RealmModel realm) {\n"
"        return getUsers(realm, 0, Integer.MAX_VALUE);\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults) {\n"
"        List<UserModel> users = new LinkedList<>();\n"
"        int i = 0;\n"
"        for (Object obj : properties.keySet()) {\n"
"            if (i++ < firstResult) continue;\n"
"            String username = (String)obj;\n"
"            UserModel user = getUserByUsername(username, realm);\n"
"            users.add(user);\n"
"            if (users.size() >= maxResults) break;\n"
"        }\n"
"        return users;\n"
"    }"
msgstr ""

msgid "The `getUsers()` method iterates over the key set of the property file, delegating to `getUserByUsername()` to load a user. Notice that we are indexing this call based on the `firstResult` and `maxResults` parameter. If your external store does not support pagination, you will have to do similar logic."
msgstr ""

msgid ""
"    @Override\n"
"    public List<UserModel> searchForUser(String search, RealmModel realm) {\n"
"        return searchForUser(search, realm, 0, Integer.MAX_VALUE);\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<UserModel> searchForUser(String search, RealmModel realm, int firstResult, int maxResults) {\n"
"        List<UserModel> users = new LinkedList<>();\n"
"        int i = 0;\n"
"        for (Object obj : properties.keySet()) {\n"
"            String username = (String)obj;\n"
"            if (!username.contains(search)) continue;\n"
"            if (i++ < firstResult) continue;\n"
"            UserModel user = getUserByUsername(username, realm);\n"
"            users.add(user);\n"
"            if (users.size() >= maxResults) break;\n"
"        }\n"
"        return users;\n"
"    }"
msgstr ""

msgid "The first declaration of `searchForUser()` takes a `String` parameter. This is supposed to be a string that you use to search username and email attributes to find the user. This string can be a substring, which is why we use the `String.contains()` method when doing our search."
msgstr ""

msgid ""
"    @Override\n"
"    public List<UserModel> searchForUser(Map<String, String> params, RealmModel realm) {\n"
"        return searchForUser(params, realm, 0, Integer.MAX_VALUE);\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<UserModel> searchForUser(Map<String, String> params, RealmModel realm, int firstResult, int maxResults) {\n"
"        // only support searching by username\n"
"        String usernameSearchString = params.get(\"username\");\n"
"        if (usernameSearchString == null) return Collections.EMPTY_LIST;\n"
"        return searchForUser(usernameSearchString, realm, firstResult, maxResults);\n"
"    }"
msgstr ""

msgid "The `searchForUser()` method that takes a `Map` parameter can search for a user based on first, last name, username, and email. We only store usernames, so we only search based on usernames. We delegate to `searchForUser()` for this."
msgstr ""

msgid ""
"    @Override\n"
"    public List<UserModel> getGroupMembers(RealmModel realm, GroupModel group, int firstResult, int maxResults) {\n"
"        return Collections.EMPTY_LIST;\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<UserModel> getGroupMembers(RealmModel realm, GroupModel group) {\n"
"        return Collections.EMPTY_LIST;\n"
"    }\n"
"\n"
"    @Override\n"
"    public List<UserModel> searchForUserByUserAttribute(String attrName, String attrValue, RealmModel realm) {\n"
"        return Collections.EMPTY_LIST;\n"
"    }"
msgstr ""

msgid "We do not store groups or attributes, so the other methods return an empty list."
msgstr ""

msgid "Augmenting external storage"
msgstr ""

msgid "The `PropertyFileUserStorageProvider` example is really limited.  While we will be able to login with users stored in a property file, we won't be able to do much else.  If users loaded by this provider need special role or group mappings to fully access particular applications there is no way for us to add additional role mappings to these users. You also can't modify or add additional important attributes like email, first and last name."
msgstr ""

msgid "For these types of situations, {project_name} allows you to augment your external store by storing extra information in {project_name}'s database.  This is called federated user storage and is encapsulated within the `org.keycloak.storage.federated.UserFederatedStorageProvider` class."
msgstr ""

msgid "UserFederatedStorageProvider"
msgstr ""

msgid ""
"package org.keycloak.storage.federated;\n"
"\n"
"public interface UserFederatedStorageProvider extends Provider {\n"
"\n"
"    Set<GroupModel> getGroups(RealmModel realm, String userId);\n"
"    void joinGroup(RealmModel realm, String userId, GroupModel group);\n"
"    void leaveGroup(RealmModel realm, String userId, GroupModel group);\n"
"    List<String> getMembership(RealmModel realm, GroupModel group, int firstResult, int max);\n"
"\n"
"...\n"
msgstr ""

msgid "The `UserFederatedStorageProvider` instance is available on the `KeycloakSession.userFederatedStorage()` method. It has all different kinds of methods for storing attributes, group and role mappings, different credential types, and required actions.  If your external store's datamodel  cannot support the full {project_name} feature set, then this service can fill in the gaps."
msgstr ""

msgid "{project_name} comes with a helper class `org.keycloak.storage.adapter.AbstractUserAdapterFederatedStorage` that will delegate every single `UserModel` method except get/set of username to user federated storage.  Override the methods you need to override to delegate to your external storage representations.  It is strongly suggested you read the javadoc of this class as it has smaller protected methods you may want to override.  Specifically surrounding group membership and role mappings."
msgstr ""

msgid "Augmentation example"
msgstr ""

msgid "In our `PropertyFileUserStorageProvider` example, we just need a simple change to our provider to use the `AbstractUserAdapterFederatedStorage`."
msgstr ""

msgid ""
"    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        return new AbstractUserAdapterFederatedStorage(session, realm, model) {\n"
"            @Override\n"
"            public String getUsername() {\n"
"                return username;\n"
"            }\n"
"\n"
"            @Override\n"
"            public void setUsername(String username) {\n"
"                String pw = (String)properties.remove(username);\n"
"                if (pw != null) {\n"
"                    properties.put(username, pw);\n"
"                    save();\n"
"                }\n"
"            }\n"
"        };\n"
"    }"
msgstr ""

msgid "We instead define an anonymous class implementation of  `AbstractUserAdapterFederatedStorage`.  The `setUsername()` method makes changes to the properties file and saves it."
msgstr ""

msgid "Import implementation strategy"
msgstr ""

msgid "When implementing a user storage provider, there's another strategy you can take. Instead of using user federated storage, you can create a user locally in the {project_name} built-in user database and copy attributes from your external store into this local copy. There are many advantages to this approach."
msgstr ""

msgid "{project_name} basically becomes a persistence user cache for your external store. Once the user is imported you'll no longer hit the external store thus taking load off of it."
msgstr ""

msgid "If you are moving to {project_name} as your official user store and deprecating the old external store, you can slowly migrate applications to use {project_name}. When all applications have been migrated, unlink the imported user, and retire the old legacy external store."
msgstr ""

msgid "There are some obvious disadvantages though to using an import strategy:"
msgstr ""

msgid "Looking up a user for the first time will require multiple updates to {project_name} database. This can be a big performance loss under load and put a lot of strain on the {project_name} database. The user federated storage approach will only store extra data as needed and may never be used depending on the capabilities of your external store."
msgstr ""

msgid "With the import approach, you have to keep local {project_name} storage and external storage in sync. The User Storage SPI has capability interfaces that you can implement to support synchronization, but this can quickly become painful and messy."
msgstr ""

msgid "To implement the import strategy you simply check to see first if the user has been imported locally. If so return the local user, if not create the user locally and import data from the external store. You can also proxy the local user so that most changes are automatically synchronized."
msgstr ""

msgid "This will be a bit contrived, but we can extend our `PropertyFileUserStorageProvider` to take this approach. We begin first by modifying the `createAdapter()` method."
msgstr ""

msgid ""
"    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        UserModel local = session.userLocalStorage().getUserByUsername(username, realm);\n"
"        if (local == null) {\n"
"            local = session.userLocalStorage().addUser(realm, username);\n"
"            local.setFederationLink(model.getId());\n"
"        }\n"
"        return new UserModelDelegate(local) {\n"
"            @Override\n"
"            public void setUsername(String username) {\n"
"                String pw = (String)properties.remove(username);\n"
"                if (pw != null) {\n"
"                    properties.put(username, pw);\n"
"                    save();\n"
"                }\n"
"                super.setUsername(username);\n"
"            }\n"
"        };\n"
"    }"
msgstr ""

msgid "In this method we call the `KeycloakSession.userLocalStorage()` method to obtain a reference to local {project_name} user storage. We see if the user is stored locally, if not, we add it locally. Do not set the `id` of the local user. Let {project_name} automatically generate the `id`.  Also note that we call `UserModel.setFederationLink()` and pass in the ID of the `ComponentModel` of our provider. This sets a link between the provider and the imported user."
msgstr ""

msgid "When a user storage provider is removed, any user imported by it will also be removed.  This is one of the       purposes of calling `UserModel.setFederationLink()`."
msgstr ""

msgid "Another thing to note is that if a local user is linked, your storage provider will still be delegated to for methods that it implements from the `CredentialInputValidator` and `CredentialInputUpdater` interfaces. Returning `false` from a validation or update will just result in {project_name} seeing if it can validate or update using local storage."
msgstr ""

msgid "Also notice that we are proxying the local user using the `org.keycloak.models.utils.UserModelDelegate` class. This class is an implementation of `UserModel`. Every method just delegates to the `UserModel` it was instantiated with. We override the `setUsername()` method of this delegate class to synchronize automatically with the property file. For your providers, you can use this to _intercept_ other methods on the local `UserModel` to perform synchronization with your external store.  For example, get methods could make sure that the local store is in sync. Set methods keep the external store in sync with the local one.  One thing to note is that the `getId()` method should always return  the id that was auto generated when you created the user locally.  You should not return a federated id as shown in the other non-import examples."
msgstr ""

msgid "If your provider is implementing the `UserRegistrationProvider` interface, your `removeUser()` method does not       need to remove the user from local storage.  The runtime will automatically perform this operation.  Also       note that `removeUser()` will be invoked before it is removed from local storage."
msgstr ""

msgid "ImportedUserValidation interface"
msgstr ""

msgid "If you remember earlier in this chapter, we discussed how querying for a user worked.  Local storage is queried first, if the user is found there, then the query ends.  This is a problem for our above implementation as we want to proxy the local `UserModel` so that we can keep usernames in sync.  The User Storage SPI has a callback for whenever a linked local user is loaded from the local database."
msgstr ""

msgid ""
"package org.keycloak.storage.user;\n"
"public interface ImportedUserValidation {\n"
"    /**\n"
"     * If this method returns null, then the user in local storage will be removed\n"
"     *\n"
"     * @param realm\n"
"     * @param user\n"
"     * @return null if user no longer valid\n"
"     */\n"
"    UserModel validate(RealmModel realm, UserModel user);\n"
"}"
msgstr ""

msgid "Whenever a linked local user is loaded, if the user storage provider class implements this interface, then the `validate()` method is called. Here you can proxy the local user passed in as a parameter and return it. That new `UserModel` will be used. You can also optionally do a check to see if the user still exists in the external store. If `validate()` returns `null`, then the local user will be removed from the database."
msgstr ""

msgid "ImportSynchronization interface"
msgstr ""

msgid "With the import strategy you can see that it is possible for the local user copy to get out of sync with external storage. For example, maybe a user has been removed from the external store. The User Storage SPI has an additional interface you can implement to deal with this, `org.keycloak.storage.user.ImportSynchronization`:"
msgstr ""

msgid ""
"package org.keycloak.storage.user;\n"
"\n"
"public interface ImportSynchronization {\n"
"    SynchronizationResult sync(KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model);\n"
"    SynchronizationResult syncSince(Date lastSync, KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model);\n"
"}"
msgstr ""

msgid "This interface is implemented by the provider factory. Once this interface is implemented by the provider factory, the administration console management page for the provider shows additional options. You can manually force a synchronization by clicking a button. This invokes the `ImportSynchronization.sync()` method. Also, additional configuration options are displayed that allow you to automatically schedule a synchronization. Automatic synchronizations invoke the `syncSince()` method."
msgstr ""

msgid "User caches"
msgstr ""

msgid "When a user object is loaded by ID, username, or email queries it is cached. When a user object is being cached, it iterates through the entire `UserModel` interface and pulls this information to a local in-memory-only cache. In a cluster, this cache is still local, but it becomes an invalidation cache. When a user object is modified, it is evicted. This eviction event is propagated to the entire cluster so that the other nodes' user cache is also invalidated."
msgstr ""

msgid "Managing the user cache"
msgstr ""

msgid "You can access the user cache by calling `KeycloakSession.userCache()`."
msgstr ""

msgid ""
"/**\n"
" * All these methods effect an entire cluster of Keycloak instances.\n"
" *\n"
" * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n"
" * @version $Revision: 1 $\n"
" */\n"
"public interface UserCache extends UserProvider {\n"
"    /**\n"
"     * Evict user from cache.\n"
"     *\n"
"     * @param user\n"
"     */\n"
"    void evict(RealmModel realm, UserModel user);\n"
"\n"
"    /**\n"
"     * Evict users of a specific realm\n"
"     *\n"
"     * @param realm\n"
"     */\n"
"    void evict(RealmModel realm);\n"
"\n"
"    /**\n"
"     * Clear cache entirely.\n"
"     *\n"
"     */\n"
"    void clear();\n"
"}"
msgstr ""

msgid "There are methods for evicting specific users, users contained in a specific realm, or the entire cache."
msgstr ""

msgid "OnUserCache callback interface"
msgstr ""

msgid "You might want to cache additional information that is specific to your provider implementation. The User Storage SPI has a callback whenever a user is cached: `org.keycloak.models.cache.OnUserCache`."
msgstr ""

msgid ""
"public interface OnUserCache {\n"
"    void onCache(RealmModel realm, CachedUserModel user, UserModel delegate);\n"
"}"
msgstr ""

msgid "Your provider class should implement this interface if it wants this callback. The `UserModel` delegate parameter is the `UserModel` instance returned by your provider. The `CachedUserModel` is an expanded `UserModel` interface. This is the instance that is cached locally in local storage."
msgstr ""

msgid ""
"public interface CachedUserModel extends UserModel {\n"
"\n"
"    /**\n"
"     * Invalidates the cache for this user and returns a delegate that represents the actual data provider\n"
"     *\n"
"     * @return\n"
"     */\n"
"    UserModel getDelegateForUpdate();\n"
"\n"
"    boolean isMarkedForEviction();\n"
"\n"
"    /**\n"
"     * Invalidate the cache for this model\n"
"     *\n"
"     */\n"
"    void invalidate();\n"
"\n"
"    /**\n"
"     * When was the model was loaded from database.\n"
"     *\n"
"     * @return\n"
"     */\n"
"    long getCacheTimestamp();\n"
"\n"
"    /**\n"
"     * Returns a map that contains custom things that are cached along with this model.  You can write to this map.\n"
"     *\n"
"     * @return\n"
"     */\n"
"    ConcurrentHashMap getCachedWith();\n"
"}"
msgstr ""

msgid "This `CachedUserModel` interface allows you to evict the user from the cache and get the provider `UserModel` instance. The `getCachedWith()` method returns a map that allows you to cache additional information pertaining to the user. For example, credentials are not part of the `UserModel` interface. If you wanted to cache credentials in memory, you would implement `OnUserCache` and cache your user's credentials using the `getCachedWith()` method."
msgstr ""

msgid "Cache policies"
msgstr ""

msgid "On the administration console management page for your user storage provider, you can specify a unique cache policy."
msgstr ""

msgid "Leveraging Jakarta EE"
msgstr ""

msgid "The user storage providers can be packaged within any Jakarta EE component if you set up the `META-INF/services` file correctly to point to your providers. For example, if your provider needs to use third-party libraries, you can package up your provider within an EAR and store these third-party libraries in the `lib/` directory of the EAR. Also note that provider JARs can make use of the `jboss-deployment-structure.xml` file that EJBs, WARS, and EARs can use in a {appserver_name} environment. For more details on this file, see the {appserver_name} documentation. It allows you to pull in external dependencies among other fine-grained actions."
msgstr ""

msgid "Provider implementations are required to be plain java objects. But we also currently support implementing `UserStorageProvider` classes as Stateful EJBs. This is especially useful if you want to use JPA to connect to a relational store. This is how you would do it:"
msgstr ""

msgid ""
"@Stateful\n"
"@Local(EjbExampleUserStorageProvider.class)\n"
"public class EjbExampleUserStorageProvider implements UserStorageProvider,\n"
"        UserLookupProvider,\n"
"        UserRegistrationProvider,\n"
"        UserQueryProvider,\n"
"        CredentialInputUpdater,\n"
"        CredentialInputValidator,\n"
"        OnUserCache\n"
"{\n"
"    @PersistenceContext\n"
"    protected EntityManager em;\n"
"\n"
"    protected ComponentModel model;\n"
"    protected KeycloakSession session;\n"
"\n"
"    public void setModel(ComponentModel model) {\n"
"        this.model = model;\n"
"    }\n"
"\n"
"    public void setSession(KeycloakSession session) {\n"
"        this.session = session;\n"
"    }\n"
"\n"
"\n"
"    @Remove\n"
"    @Override\n"
"    public void close() {\n"
"    }\n"
"...\n"
"}"
msgstr ""

msgid "You have to define the `@Local` annotation and specify your provider class there. If you do not do this, EJB will not proxy the user correctly and your provider won't work."
msgstr ""

msgid "You must put the `@Remove` annotation on the `close()` method of your provider. If you do not, the stateful bean will never be cleaned up and you might eventually see error messages."
msgstr ""

msgid "Implementations of `UserStorageProvider` are required to be plain Java objects. Your factory class would perform a JNDI lookup of the Stateful EJB in its create() method."
msgstr ""

msgid ""
"public class EjbExampleUserStorageProviderFactory\n"
"        implements UserStorageProviderFactory<EjbExampleUserStorageProvider> {\n"
"\n"
"    @Override\n"
"    public EjbExampleUserStorageProvider create(KeycloakSession session, ComponentModel model) {\n"
"        try {\n"
"            InitialContext ctx = new InitialContext();\n"
"            EjbExampleUserStorageProvider provider = (EjbExampleUserStorageProvider)ctx.lookup(\n"
"                     \"java:global/user-storage-jpa-example/\" + EjbExampleUserStorageProvider.class.getSimpleName());\n"
"            provider.setModel(model);\n"
"            provider.setSession(session);\n"
"            return provider;\n"
"        } catch (Exception e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"    }"
msgstr ""

msgid "This example also assumes that you have defined a JPA deployment in the same JAR as the provider. This means a `persistence.xml` file as well as any JPA `@Entity` classes."
msgstr ""

msgid "When using JPA any additional datasource must be an XA datasource. The {project_name} datasource          is not an XA datasource. If you interact with two or more non-XA datasources in the same transaction, the server returns          an error message. Only one non-XA resource is permitted in a single transaction. See the {appserver_name} manual for more details on deploying an XA datasource."
msgstr ""

msgid "CDI is not supported."
msgstr ""

msgid "REST management API"
msgstr ""

msgid "You can create, remove, and update your user storage provider deployments through the administrator REST API. The User Storage SPI is built on top of a generic component interface so you will be using that generic API to manage your providers."
msgstr ""

msgid "The REST Component API lives under your realm admin resource."
msgstr ""

msgid "/admin/realms/{realm-name}/components"
msgstr ""

msgid "We will only show this REST API interaction with the Java client. Hopefully you can extract how to do this from `curl` from this API."
msgstr ""

msgid ""
"public interface ComponentsResource {\n"
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public List<ComponentRepresentation> query();\n"
"\n"
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public List<ComponentRepresentation> query(@QueryParam(\"parent\") String parent);\n"
"\n"
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public List<ComponentRepresentation> query(@QueryParam(\"parent\") String parent, @QueryParam(\"type\") String type);\n"
"\n"
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public List<ComponentRepresentation> query(@QueryParam(\"parent\") String parent,\n"
"                                               @QueryParam(\"type\") String type,\n"
"                                               @QueryParam(\"name\") String name);\n"
"\n"
"    @POST\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    Response add(ComponentRepresentation rep);\n"
"\n"
"    @Path(\"{id}\")\n"
"    ComponentResource component(@PathParam(\"id\") String id);\n"
"}\n"
"\n"
"public interface ComponentResource {\n"
"    @GET\n"
"    public ComponentRepresentation toRepresentation();\n"
"\n"
"    @PUT\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public void update(ComponentRepresentation rep);\n"
"\n"
"    @DELETE\n"
"    public void remove();\n"
"}\n"
msgstr ""

msgid "To create a user storage provider, you must specify the provider id, a provider type of the string `org.keycloak.storage.UserStorageProvider`, as well as the configuration."
msgstr ""

msgid ""
"import org.keycloak.admin.client.Keycloak;\n"
"import org.keycloak.representations.idm.RealmRepresentation;\n"
"...\n"
"\n"
"Keycloak keycloak = Keycloak.getInstance(\n"
"    \"http://localhost:8080{kc_base_path}\",\n"
"    \"master\",\n"
"    \"admin\",\n"
"    \"password\",\n"
"    \"admin-cli\");\n"
"RealmResource realmResource = keycloak.realm(\"master\");\n"
"RealmRepresentation realm = realmResource.toRepresentation();\n"
"\n"
"ComponentRepresentation component = new ComponentRepresentation();\n"
"component.setName(\"home\");\n"
"component.setProviderId(\"readonly-property-file\");\n"
"component.setProviderType(\"org.keycloak.storage.UserStorageProvider\");\n"
"component.setParentId(realm.getId());\n"
"component.setConfig(new MultivaluedHashMap());\n"
"component.getConfig().putSingle(\"path\", \"~/users.properties\");\n"
"\n"
"realmResource.components().add(component);\n"
"\n"
"// retrieve a component\n"
"\n"
"List<ComponentRepresentation> components = realmResource.components().query(realm.getId(),\n"
"                                                                    \"org.keycloak.storage.UserStorageProvider\",\n"
"                                                                    \"home\");\n"
"component = components.get(0);\n"
"\n"
"// Update a component\n"
"\n"
"component.getConfig().putSingle(\"path\", \"~/my-users.properties\");\n"
"realmResource.components().component(component.getId()).update(component);\n"
"\n"
"// Remove a component\n"
"\n"
"realmREsource.components().component(component.getId()).remove();"
msgstr ""

msgid "Migrating from an earlier user federation SPI"
msgstr ""

msgid "This chapter is only applicable if you have implemented a provider using the earlier (and now removed)        User Federation SPI."
msgstr ""

msgid "In Keycloak version 2.4.0 and earlier there was a User Federation SPI. Red Hat Single Sign-On version 7.0, although unsupported, had this earlier SPI available as well. This earlier User Federation SPI has been removed from Keycloak version 2.5.0 and Red Hat Single Sign-On version 7.1. However, if you have written a provider with this earlier SPI, this chapter discusses some strategies you can use to port it."
msgstr ""

msgid "Import versus non-import"
msgstr ""

msgid "The earlier User Federation SPI required you to create a local copy of a user in the {project_name}'s database and import information from your external store to the local copy. However, this is no longer a requirement. You can still port your earlier provider as-is, but you should consider whether a non-import strategy might be a better approach."
msgstr ""

msgid "Advantages of the import strategy:"
msgstr ""

msgid "{project_name} basically becomes a persistence user cache for your external store. Once the user is imported you'll no longer hit the external store, thus taking load off of it."
msgstr ""

msgid "If you are moving to {project_name} as your official user store and deprecating the earlier external store, you can slowly migrate applications to use {project_name}. When all applications have been migrated, unlink the imported user, and retire the earlier legacy external store."
msgstr ""

msgid "Looking up a user for the first time will require multiple updates to {project_name} database. This can be a big performance loss under load and put a lot of strain on the {project_name} database. The user federated storage approach will only store extra data as needed and might never be used depending on the capabilities of your external store."
msgstr ""

msgid "UserFederationProvider versus UserStorageProvider"
msgstr ""

msgid "The first thing to notice is that `UserFederationProvider` was a complete interface. You implemented every method in this interface. However, `UserStorageProvider` has instead broken up this interface into multiple capability interfaces that you implement as needed."
msgstr ""

msgid "`UserFederationProvider.getUserByUsername()` and `getUserByEmail()` have exact equivalents in the new SPI. The difference between the two is how you import. If you are going to continue with an import strategy, you no longer call `KeycloakSession.userStorage().addUser()` to create the user locally. Instead you call `KeycloakSession.userLocalStorage().addUser()`. The `userStorage()` method no longer exists."
msgstr ""

msgid "The `UserFederationProvider.validateAndProxy()` method has been moved to an optional capability interface, `ImportedUserValidation`. You want to implement this interface if you are porting your earlier provider as-is. Also note that in the earlier SPI, this method was called every time the user was accessed, even if the local user is in the cache. In the later SPI, this method is only called when the local user is loaded from local storage. If the local user is cached, then the `ImportedUserValidation.validate()` method is not called at all."
msgstr ""

msgid "The `UserFederationProvider.isValid()` method no longer exists in the later SPI."
msgstr ""

msgid "The `UserFederationProvider` methods `synchronizeRegistrations()`, `registerUser()`, and `removeUser()` have been moved to the `UserRegistrationProvider` capability interface. This new interface is optional to implement so if your provider does not support creating and removing users, you don't have to implement it. If your earlier provider had switch to toggle support for registering new users, this is supported in the new SPI, returning `null` from `UserRegistrationProvider.addUser()` if the provider doesn't support adding users."
msgstr ""

msgid "The earlier `UserFederationProvider` methods centered around credentials are now encapsulated in the `CredentialInputValidator` and `CredentialInputUpdater` interfaces, which are also optional to implement depending on if you support validating or updating credentials.  Credential management used to exist in `UserModel` methods. These also have been moved to the `CredentialInputValidator` and `CredentialInputUpdater` interfaces. One thing to note that if you do not implement the `CredentialInputUpdater` interface, then any credentials provided by your provider can be overridden locally in {project_name} storage. So if you want your credentials to be read-only, implement the `CredentialInputUpdater.updateCredential()` method and return a `ReadOnlyException`."
msgstr ""

msgid "The `UserFederationProvider` query methods such as `searchByAttributes()` and `getGroupMembers()` are now encapsulated in an optional interface `UserQueryProvider`. If you do not implement this interface, then users will not be viewable in the admin console.  You'll still be able to login though."
msgstr ""

msgid "UserFederationProviderFactory versus UserStorageProviderFactory"
msgstr ""

msgid "The synchronization methods in the earlier SPI are now encapsulated within an optional `ImportSynchronization` interface. If you have implemented synchronization logic, then have your new `UserStorageProviderFactory` implement the `ImportSynchronization` interface."
msgstr ""

msgid "Upgrading to a new model"
msgstr ""

msgid "The User Storage SPI instances are stored in a different set of relational tables. {project_name} automatically runs a migration script. If any earlier User Federation providers are deployed for a realm, they are converted to the later storage model as is, including the `id` of the data. This migration will only happen if a User Storage provider exists with the same provider ID (i.e., \"ldap\", \"kerberos\") as the earlier User Federation provider."
msgstr ""

msgid "So, knowing this there are different approaches you can take."
msgstr ""

msgid "You can remove the earlier provider in your earlier {project_name} deployment. This will remove the local linked copies of all users you imported.  Then, when you upgrade {project_name}, just deploy and configure your new provider for your realm."
msgstr ""

msgid "The second option is to write your new provider making sure it has the same provider ID: `UserStorageProviderFactory.getId()`. Make sure this provider is deployed to the server.  Boot the server, and have the built-in migration script convert from the earlier data model to the later data model. In this case all your earlier linked imported users will work and be the same."
msgstr ""

msgid "If you have decided to get rid of the import strategy and rewrite your User Storage provider, we suggest that you remove the earlier provider before upgrading {project_name}. This will remove linked local imported copies of any user you imported."
msgstr ""

msgid "Stream-based interfaces"
msgstr ""

msgid "Many of the user storage interfaces in {project_name} contain query methods that can return potentially large sets of objects, which might lead to significant impacts in terms of memory consumption and processing time. This is especially true when only a small subset of the objects' internal state is used in the query method's logic."
msgstr ""

msgid "To provide developers with a more efficient alternative to process large data sets in these query methods, a `Streams` sub-interface has been added to user storage interfaces. These `Streams` sub-interfaces replace the original collection-based methods in the super-interfaces with stream-based variants, making the collection-based methods default. The default implementation of a collection-based query method invokes its `Stream` counterpart and collects the result into the proper collection type."
msgstr ""

msgid "The `Streams` sub-interfaces allow for implementations to focus on the stream-based approach for processing sets of data and benefit from the potential memory and performance optimizations of that approach. The interfaces that offer a `Streams` sub-interface to be implemented include a few _<<_provider_capability_interfaces,capability interfaces>>_, all interfaces in the `org.keycloak.storage.federated` package and a few others that might be implemented depending on the scope of the custom storage implementation."
msgstr ""

msgid "See this list of the interfaces that offer a `Streams` sub-interface to developers."
msgstr ""

msgid "Package"
msgstr ""

msgid "Classes"
msgstr ""

msgid "`org.keycloak.credential`"
msgstr ""

msgid "`CredentialInputUpdater`(*), `UserCredentialStore`"
msgstr ""

msgid "`org.keycloak.models`"
msgstr ""

msgid "`GroupModel`, `RoleMapperModel`, `UserCredentialManager`, `UserModel`, `UserProvider`"
msgstr ""

msgid "`org.keycloak.models.cache`"
msgstr ""

msgid "`CachedUserModel`, `UserCache`"
msgstr ""

msgid "`org.keycloak.storage.federated`"
msgstr ""

msgid "All interfaces"
msgstr ""

msgid "`org.kecyloak.storage.user`"
msgstr ""

msgid "`UserQueryProvider`(*)"
msgstr ""

msgid "(*) indicates the interface is a _<<_provider_capability_interfaces,capability interface>>_"
msgstr ""

msgid "Custom user storage implementation that want to benefit from the streams approach should simply implement the `Streams` sub-interfaces instead of the original interfaces. For example, the following code uses the `Streams` variant of the `UserQueryProvider` interface:"
msgstr ""

msgid ""
"public class CustomQueryProvider extends UserQueryProvider.Streams {\n"
"...\n"
"    @Override\n"
"    Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n"
"        // custom logic here\n"
"    }\n"
"\n"
"    @Override\n"
"    Stream<UserModel> searchForUserStream(String search, RealmModel realm) {\n"
"        // custom logic here\n"
"    }\n"
"...\n"
"}"
msgstr ""

msgid "Vault SPI"
msgstr ""

msgid "Vault provider"
msgstr ""

msgid "You can use a vault SPI from `org.keycloak.vault` package to write custom extension for {project_name} to connect to arbitrary vault implementation."
msgstr ""

msgid "The built-in `files-plaintext` provider is an example of the implementation of this SPI. In general the following rules apply:"
msgstr ""

msgid "To prevent a secret from leaking across realms, you may want to isolate or limit the secrets that can be retrieved by a realm. In that case, your provider should take into account the realm name when looking up secrets, for example by prefixing entries with the realm name. For example, an expression `${vault.key}` would then evaluate generally to different entry names, depending on whether it was used in a realm _A_ or realm _B_. To differentiate between realms, the realm needs to be passed to the created `VaultProvider` instance from `VaultProviderFactory.create()` method where it is available from the `KeycloakSession` parameter."
msgstr ""

msgid "The vault provider needs to implement a single method `obtainSecret` that returns a `VaultRawSecret` for the given secret name. That class holds the representation of the secret either in `byte[]` or `ByteBuffer` and is expected to convert between the two upon demand. Note that this buffer would be discarded after usage as explained below."
msgstr ""

msgid "Regarding realm separation, all built-in vault provider factories allow the configuration of one or more key resolvers. Represented by the `VaultKeyResolver` interface, a key resolver essentially implements the algorithm or strategy for combining the realm name with the key (as obtained from the `${vault.key}` expression) into the final entry name that will be used to retrieve the secret from the vault. The code that handles this configuration has been extracted into abstract vault provider and vault provider factory classes, so custom implementations that want to offer support for key resolvers may extend these abstract classes instead of the implementing SPI interfaces to inherit the ability to configure the key resolvers that should be tried when retrieving a secret."
msgstr ""

msgid "Consuming values from vault"
msgstr ""

msgid "The vault contains sensitive data and {project_name} treats the secrets accordingly. When accessing a secret, the secret is obtained from the vault and retained in JVM memory only for the necessary time. Then all possible attempts to discard its content from JVM memory is done. This is achieved by using the vault secrets only within `try`-with-resources statement as outlined below:"
msgstr ""

msgid ""
"    char[] c;\n"
"    try (VaultCharSecret cSecret = session.vault().getCharSecret(SECRET_NAME)) {\n"
"        // ... use cSecret\n"
"        c = cSecret.getAsArray().orElse(null);\n"
"        // if c != null, it now contains password\n"
"    }\n"
"\n"
"    // if c != null, it now contains garbage"
msgstr ""

msgid "The example uses `KeycloakSession.vault()` as the entrypoint for accessing the secrets. Using the `VaultProvider.obtainSecret` method directly is indeed also possible. However the `vault()` method has the benefit of ability to interpret the raw secret (which is generally a byte array) as a character array (via `vault().getCharSecret()`) or a `String` (via `vault().getStringSecret()`) in addition to obtaining the original uninterpreted value (via `vault().getRawSecret()` method)."
msgstr ""

msgid "Note that since `String` objects are immutable, their content cannot be discarded by overriding with random garbage. Even though measures have been taken in the default `VaultStringSecret` implementation to prevent internalizing ``String``s, the secrets stored in `String` objects would live at least to the next GC round. Thus using plain byte and character arrays and buffers is preferable."
msgstr ""
