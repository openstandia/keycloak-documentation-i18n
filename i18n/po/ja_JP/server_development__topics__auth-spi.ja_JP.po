msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"POT-Creation-Date: 2017-09-20 08:59+0000\n"
"PO-Revision-Date: 2017-09-20 05:24-0400\n"
"Last-Translator: wadahiro <wadahiro@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: keycloak-documentation-i18n\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/i18n/pot/server_development__topics__auth-spi.pot\n"

#. type: delimited block -
#: source/securing_apps/topics/client-registration.adoc:99
#: source/securing_apps/topics/oidc/java/application-clustering.adoc:89
#: source/securing_apps/topics/oidc/java/application-clustering.adoc:109
#: source/securing_apps/topics/oidc/java/jetty8-adapter.adoc:31
#: source/securing_apps/topics/oidc/java/tomcat-adapter.adoc:39
#: source/securing_apps/topics/oidc/java/tomcat-adapter.adoc:56
#: source/securing_apps/topics/oidc/javascript-adapter.adoc:66
#: source/securing_apps/topics/saml/java/jetty-adapter/jetty8-installation.adoc:23
#: source/securing_apps/topics/saml/java/jetty-adapter/jetty9_installation.adoc:23
#: source/server_development/topics/auth-spi.adoc:148
#: source/server_development/topics/preface.adoc:16
#: source/server_development/topics/providers.adoc:202
#, no-wrap
msgid "[source]\n"
msgstr ""

#. type: Plain text
#: source/securing_apps/topics/client-registration.adoc:148
#: source/securing_apps/topics/oidc/java/adapter-context.adoc:16
#: source/securing_apps/topics/oidc/java/adapter_error_handling.adoc:24
#: source/securing_apps/topics/oidc/java/multi-tenancy.adoc:17
#: source/securing_apps/topics/saml/java/assertion-api.adoc:11
#: source/server_admin/topics/identity-broker/suggested.adoc:15
#: source/server_admin/topics/identity-broker/suggested.adoc:25
#: source/server_admin/topics/identity-broker/tokens.adoc:12
#: source/server_development/topics/user-storage/augmenting.adoc:15
#: source/server_development/topics/user-storage/augmenting.adoc:47
#: source/server_development/topics/user-storage/cache.adoc:14
#: source/server_development/topics/user-storage/cache.adoc:52
#: source/server_development/topics/user-storage/cache.adoc:63
#: source/server_development/topics/user-storage/configuration.adoc:9
#: source/server_development/topics/user-storage/configuration.adoc:38
#: source/server_development/topics/user-storage/configuration.adoc:66
#: source/server_development/topics/user-storage/configuration.adoc:85
#: source/server_development/topics/user-storage/import.adoc:31
#: source/server_development/topics/user-storage/import.adoc:85
#: source/server_development/topics/user-storage/import.adoc:111
#: source/server_development/topics/user-storage/javaee.adoc:16
#: source/server_development/topics/user-storage/javaee.adoc:60
#: source/server_development/topics/user-storage/model-interfaces.adoc:7
#: source/server_development/topics/user-storage/provider-interfaces.adoc:10
#: source/server_development/topics/user-storage/provider-interfaces.adoc:59
#: source/server_development/topics/user-storage/provider-interfaces.adoc:94
#: source/server_development/topics/user-storage/registration-query.adoc:15
#: source/server_development/topics/user-storage/registration-query.adoc:33
#: source/server_development/topics/user-storage/registration-query.adoc:65
#: source/server_development/topics/user-storage/registration-query.adoc:81
#: source/server_development/topics/user-storage/registration-query.adoc:99
#: source/server_development/topics/user-storage/registration-query.adoc:132
#: source/server_development/topics/user-storage/registration-query.adoc:163
#: source/server_development/topics/user-storage/registration-query.adoc:191
#: source/server_development/topics/user-storage/registration-query.adoc:212
#: source/server_development/topics/user-storage/rest.adoc:16
#: source/server_development/topics/user-storage/rest.adoc:62
#: source/server_development/topics/user-storage/simple-example.adoc:10
#: source/server_development/topics/user-storage/simple-example.adoc:24
#: source/server_development/topics/user-storage/simple-example.adoc:43
#: source/server_development/topics/user-storage/simple-example.adoc:100
#: source/server_development/topics/user-storage/simple-example.adoc:134
#: source/server_development/topics/user-storage/simple-example.adoc:160
#: source/server_development/topics/user-storage/simple-example.adoc:182
#: source/server_development/topics/user-storage/simple-example.adoc:229
#: source/server_development/topics/user-storage/simple-example.adoc:243
#: source/server_development/topics/admin-rest-api.adoc:49
#: source/server_development/topics/auth-spi.adoc:170
#: source/server_development/topics/auth-spi.adoc:186
#: source/server_development/topics/auth-spi.adoc:199
#: source/server_development/topics/auth-spi.adoc:231
#: source/server_development/topics/auth-spi.adoc:259
#: source/server_development/topics/auth-spi.adoc:287
#: source/server_development/topics/auth-spi.adoc:310
#: source/server_development/topics/auth-spi.adoc:327
#: source/server_development/topics/auth-spi.adoc:341
#: source/server_development/topics/auth-spi.adoc:383
#: source/server_development/topics/auth-spi.adoc:437
#: source/server_development/topics/auth-spi.adoc:452
#: source/server_development/topics/auth-spi.adoc:474
#: source/server_development/topics/auth-spi.adoc:498
#: source/server_development/topics/auth-spi.adoc:546
#: source/server_development/topics/auth-spi.adoc:585
#: source/server_development/topics/auth-spi.adoc:625
#: source/server_development/topics/auth-spi.adoc:681
#: source/server_development/topics/auth-spi.adoc:708
#: source/server_development/topics/extensions.adoc:21
#: source/server_development/topics/extensions.adoc:41
#: source/server_development/topics/extensions.adoc:99
#: source/server_development/topics/extensions.adoc:130
#: source/server_development/topics/providers.adoc:18
#: source/server_development/topics/providers.adoc:53
#: source/server_development/topics/providers.adoc:111
#: source/server_development/topics/providers.adoc:121
#: source/server_development/topics/providers.adoc:157
#: source/server_development/topics/providers.adoc:279
#: source/server_development/topics/providers.adoc:323
#: source/server_development/topics/identity-brokering/account-linking.adoc:24
#: source/server_development/topics/identity-brokering/account-linking.adoc:54
#: source/server_development/topics/identity-brokering/tokens.adoc:12
#, no-wrap
msgid "[source,java]\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/action-token-spi.adoc:72
#: source/server_development/topics/auth-spi.adoc:140
#: source/server_development/topics/auth-spi.adoc:429
#, no-wrap
msgid "Packaging Classes and Deployment"
msgstr ""

#. type: Title ==
#: source/server_development/topics/auth-spi.adoc:2
#, no-wrap
msgid "Authentication SPI"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:8
#, no-wrap
msgid "Keycloak comes out of the box with a bunch of different authentication mechanisms: kerberos, password, and otp.\n"
"These mechanisms may not meet all of your requirements and you may want to plug in your own custom ones.\n"
"Keycloak provides an authentication SPI that you can use to write new plugins.\n"
"The admin console supports applying, ordering, and configuring these new mechanisms. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:14
#, no-wrap
msgid "Keycloak also supports a simple registration form.\n"
"Different aspects of this form can be enabled and disabled i.e.\n"
"Recaptcha support can be turned off and on.\n"
"The same authentication SPI can be used to add another page to the registration flow or reimplement it entirely.\n"
"There's also an additional fine-grain SPI you can use to add specific validations and user extensions to the built in registration form. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:19
#, no-wrap
msgid "A required action in Keycloak is an action that a user has to perform after he authenticates.\n"
"After the action is performed successfully, the user doesn't have to perform the action again.\n"
"Keycloak comes with some built in required actions like \"reset password\".  This action forces the user to change their password after they have logged in.\n"
"You can write and plug in your own required actions. \n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:20
#, no-wrap
msgid "Terms"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:23
#, no-wrap
msgid "To first learn about the Authentication SPI, let's go over some of the terms used to describe it. \n"
msgstr ""

#. type: Labeled list
#: source/server_development/topics/auth-spi.adoc:24
#, no-wrap
msgid "Authentication Flow"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:29
#, no-wrap
msgid "A flow is a container for all authentications that must happen during login or registration.\n"
"If you go to the admin console authentication page, you can view all the defined flows in the system and what authenticators they are made up of.\n"
"Flows can contain other flows.\n"
"You can also bind a new different flow for browser login, direct grant access, and registration. \n"
msgstr ""

#. type: Labeled list
#: source/server_development/topics/auth-spi.adoc:30
#, no-wrap
msgid "Authenticator"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:33
#, no-wrap
msgid "An authenticator is a pluggable component that hold the logic for performing the authentication or action within a flow.\n"
"It is usually a singleton. \n"
msgstr ""

#. type: Labeled list
#: source/server_development/topics/auth-spi.adoc:34
#, no-wrap
msgid "Execution"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:37
#, no-wrap
msgid "An execution is an object that binds the authenticator to the flow and the authenticator to the configuration of the authenticator.\n"
"Flows contain execution entries. \n"
msgstr ""

#. type: Labeled list
#: source/server_development/topics/auth-spi.adoc:38
#, no-wrap
msgid "Execution Requirement"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:44
#, no-wrap
msgid "Each execution defines how an authenticator behaves in a flow.\n"
"The requirement defines whether the authenticator is enabled, disabled, optional, required, or an alternative.\n"
"An alternative requirement means that the authentiactor is optional unless no other alternative authenticator is successful in the flow.\n"
"For example, cookie authentication, kerberos, and the set of all login forms are all alternative.\n"
"If one of those is successful, none of the others are executed. \n"
msgstr ""

#. type: Labeled list
#: source/server_development/topics/auth-spi.adoc:45
#, no-wrap
msgid "Authenticator Config"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:48
#, no-wrap
msgid "This object defines the configuration for the Authenticator for a specific execution within an authentication flow.\n"
"Each execution can have a different config. \n"
msgstr ""

#. type: Labeled list
#: source/server_development/topics/auth-spi.adoc:49
#, no-wrap
msgid "Required Action"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:52
#, no-wrap
msgid "After authentication completes, the user might have one or more one-time actions he must complete before he is allowed to login.\n"
"The user might be required to set up an OTP token generator or reset an expired password or even accept a Terms and Conditions document.         \n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:53
#, no-wrap
msgid "Algorithm Overview"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:57
#, no-wrap
msgid "Let's talk about how this all works for browser login.\n"
"Let's assume the following flows, executions and sub flows. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:66
#, no-wrap
msgid "Cookie - ALTERNATIVE\n"
"Kerberos - ALTERNATIVE\n"
"Forms Subflow - ALTERNATIVE\n"
"           Username/Password Form - REQUIRED\n"
"           OTP Password Form - OPTIONAL\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:71
#, no-wrap
msgid "In the top level of the form we have 3 executions of which all are alternatively required.\n"
"This means that if any of these are successful, then the others do not have to execute.\n"
"The Username/Password form is not executed if there is an SSO Cookie set or a successful Kerberos login.\n"
"Let's walk through the steps from when a client first redirects to keycloak to authenticate the user. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:128
#, no-wrap
msgid ". The OpenID Connect or SAML protocol provider unpacks relevent data, verifies the client and any signatures.\n"
"  It creates a AuthenticationSessionModel.\n"
"  It looks up what the browser flow should be, then starts executing the flow. \n"
". The flow looks at the cookie execution and sees that it is an alternative.\n"
"  It loads the cookie provider.\n"
"  It checks to see if the cookie provider requires that a user already be associated with the authentication session.\n"
"  Cookie provider does not require a user.\n"
"  If it did, the flow would abort and the user would see an error screen.\n"
"  Cookie provider then executes.\n"
"  Its purpose is to see if there is an SSO cookie set.\n"
"  If there is one set, it is validated and the UserSessionModel is verified and associated with the AuthenticationSessionModel.\n"
"  The Cookie provider returns a success() status if the SSO cookie exists and is validated.\n"
"  Since the cookie provider returned success and each execution at this level of the flow is ALTERNATIVE, no other execution is executed and this results in a successful login.\n"
"  If there is no SSO cookie, the cookie provider returns with a status of attempted().  This means there was no error condition, but no success either.\n"
"  The provider tried, but the request just wasn't set up to handle this authenticator. \n"
". Next the flow looks at the Kerberos execution.\n"
"  This is also an alternative.\n"
"  The kerberos provider also does not require a user to be already set up and associated with the AuthenticationSessionModel so this provider is executed.\n"
"  Kerberos uses the SPNEGO browser protocol.\n"
"  This requires a series of challenge/responses between the server and client exchanging negotiation headers.\n"
"  The kerberos provider does not see any negotiate header, so it assumes that this is the first interaction between the server and client.\n"
"  It therefore creates an HTTP challenge response to the client and sets a forceChallenge() status.\n"
"  A forceChallenge() means that this HTTP response cannot be ignored by the flow and must be returned to the client.\n"
"  If instead the provider returned a challenge() status, the flow would hold the challenge response until all other alternatives are attempted.\n"
"  So, in this initial phase, the flow would stop and the challenge response would be sent back to the browser.\n"
"  If the browser then responds with a successful negotiate header, the provider associates the user with the AuthenticationSession and the flow ends because the rest of the executions on this level of the flow are all alternatives.\n"
"  Otherwise, again, the kerberos provider sets an attempted() status and the flow continues. \n"
". The next execution is a subflow called Forms.\n"
"  The executions for this subflow are loaded and the same processing logic occurs \n"
". The first execution in the Forms subflow is the UsernamePassword provider.\n"
"  This provider also does not require for a user to already be associated with the flow.\n"
"  This provider creates challenge HTTP response and sets its status to challenge(). This execution is required, so the flow honors this challenge and sends the HTTP response back to the browser.\n"
"  This response is a rendering of the Username/Password HTML page.\n"
"  The user enters in their username and password and clicks submit.\n"
"  This HTTP request is directed to the UsernamePassword provider.\n"
"  If the user entered an invalid username or password, a new challenge response is created and a status of failureChallenge() is set for this execution.\n"
"  A failureChallenge() means that there is a challenge, but that the flow should log this as an error in the error log.\n"
"  This error log can be used to lock accounts or IP Addresses that have had too many login failures.\n"
"  If the username and password is valid, the provider associated the UserModel with the AuthenticationSessionModel and returns a status of success()\n"
". The next execution is the OTP Form.\n"
"  This provider requires that a user has been associated with the flow.\n"
"  This requirement is satisfied because the UsernamePassword provider already associated the user with the flow.\n"
"  Since a user is required for this provider, the provider is also asked if the user is configured to use this provider.\n"
"  If user is not configured, and this execution is required, then the flow will then set up a required action that the user must perform after authentication is complete.\n"
"  For OTP, this means the OTP setup page.\n"
"  If the execution was optional, then this execution is skipped. \n"
". After the flow is complete, the authentication processor creates a UserSessionModel and associates it with the AuthenticationSessionModel.\n"
"  It then checks to see if the user is required to complete any required actions before logging in. \n"
". First, each required action's evaluateTriggers() method is called.\n"
"  This allows the required action provider to figure out if there is some state that might trigger the action to be fired.\n"
"  For example, if your realm has a password expiration policy, it might be triggered by this method. \n"
". Each required action associated with the user that has its requiredActionChallenge() method called.\n"
"  Here the provider sets up an HTTP response which renders the page for the required action.\n"
"  This is done by setting a challenge status. \n"
". If the required action is ultimately successful, then the required action is removed from the user's require actions list. \n"
". After all required actions have been resolved, the user is finally logged in.         \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:130
#, no-wrap
msgid "[[_auth_spi_walkthrough]]\n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:130
#, no-wrap
msgid "Authenticator SPI Walk Through"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:134
#, no-wrap
msgid "In this section, we'll take a look at the Authenticator interface.\n"
"For this, we are going to implement an authenticator that requires that a user enter in the answer to a secret question like \"What is your mother's maiden name?\".  This example is fully implemented and contained in the examples/providers/authenticator directory of the demo distribution of Keycloak. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:139
#, no-wrap
msgid "The classes you must implement are the org.keycloak.authentication.AuthenticatorFactory and Authenticator interfaces.\n"
"The Authenticator interface defines the logic.\n"
"The AuthenticatorFactory is responsible for creating instances of an Authenticator.\n"
"They both extend a more generic Provider and ProviderFactory set of interfaces that other Keycloak components like User Federation do. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:146
#, no-wrap
msgid "You will package your classes within a single jar.\n"
"This jar must contain a file named  `org.keycloak.authentication.AuthenticatorFactory`                and must be contained in the `META-INF/services/` directory of your jar.\n"
"This file must list the fully qualified classname of each AuthenticatorFactory implementation you have in the jar.\n"
"For example: \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:152
#, no-wrap
msgid "org.keycloak.examples.authenticator.SecretQuestionAuthenticatorFactory\n"
"org.keycloak.examples.authenticator.AnotherProviderFactory\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:154
#: source/server_development/topics/auth-spi.adoc:442
#: source/server_development/topics/auth-spi.adoc:715
#, no-wrap
msgid "This services/ file is used by Keycloak to scan the providers it has to load into the system. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:156
#: source/server_development/topics/auth-spi.adoc:444
#: source/server_development/topics/auth-spi.adoc:717
#, no-wrap
msgid "To deploy this jar, just copy it to the providers directory. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:157
#, no-wrap
msgid "Implementing an Authenticator"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:163
#, no-wrap
msgid "When implementing the Authenticator interface, the first method that needs to be implemented is the requiresUser() method.\n"
"For our example, this method must return true as we need to validate the secret question associated with the user.\n"
"A provider like kerberos would return false from this method as it can resolve a user from the negotiate header.\n"
"This example, however, is validating a specific credential of a specific user. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:168
#, no-wrap
msgid "The next method to implement is the configuredFor() method.\n"
"This method is responsible for determining if the user is configured for this particular authenticator.\n"
"For this example, we need to check if the answer to the secret question has been set up by the user or not.\n"
"In our case we are storing this information, hashed, within a UserCredentialValueModel within the UserModel (just like passwords are stored).  Here's how we do this very simple check: \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:176
#, no-wrap
msgid "@Override\n"
"  public boolean configuredFor(KeycloakSession session, RealmModel realm, UserModel user) {\n"
"     return session.users().configuredForCredentialType(\"secret_question\", realm, user);\n"
"    }\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:178
#, no-wrap
msgid "The configuredForCredentialType() call queries the user to see if it supports that credential type. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:184
#, no-wrap
msgid "The next method to implement on the Authenticator is setRequiredActions().  If configuredFor() returns false and our example authenticator is required within the flow, this method will be called.\n"
"It is responsible for registering any required actions that must be performed by the user.\n"
"In our example, we need to register a required action that will force the user to set up the answer to the secret question.\n"
"We will implement this required action provider later in this chapter.\n"
"Here is the implementation of the setRequiredActions() method. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:192
#, no-wrap
msgid "    @Override\n"
"    public void setRequiredActions(KeycloakSession session, RealmModel realm, UserModel user) {\n"
"        user.addRequiredAction(\"SECRET_QUESTION_CONFIG\");\n"
"    }\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:197
#, no-wrap
msgid "Now we are getting into the meat of the Authenticator implementation.\n"
"The next method to implement is authenticate().  This is the initial method the flow invokes when the execution is first visited.\n"
"What we want is that if a user has answered the secret question already on their browser's machine, then the user doesn't have to answer the question again, making that machine \"trusted\".  The authenticate() method isn't responsible for processing the secret question form.\n"
"Its sole purpose is to render the page or to continue the flow. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:211
#, no-wrap
msgid "    @Override\n"
"    public void authenticate(AuthenticationFlowContext context) {\n"
"        if (hasCookie(context)) {\n"
"           context.success();\n"
"           return;\n"
"        }\n"
"        Response challenge = loginForm(context).createForm(\"secret_question.ftl\");\n"
"        context.challenge(challenge);\n"
"    }\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:214
#, no-wrap
msgid "The hasCookie() method checks to see if there is already a cookie set on the browser which indicates that the secret question has already been answered.\n"
"If that returns true, we just mark this execution's status as SUCCESS using the AuthenticationFlowContext.success() method and returning from the authentication() method. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:221
#, no-wrap
msgid "If the hasCookie() method returns false, we must return a response that renders the secret question HTML form.\n"
"AuthenticationFlowContext has a form() method that initializes a Freemarker page builder with appropriate base information needed to build the form.\n"
"This page builder is called `org.keycloak.login.LoginFormsProvider`.\n"
"the LoginFormsProvider.createForm() method loads a Freemarker template file from your login theme.\n"
"Additionally you can call the LoginFormsProvider.setAttribute() method if you want to pass additional information to the Freemarker template.\n"
"We'll go over this later. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:225
#, no-wrap
msgid "Calling LoginFormsProvider.createForm() returns a JAX-RS Response object.\n"
"We then call AuthenticationFlowContext.challenge() passing in this response.\n"
"This sets the status of the execution as CHALLENGE and if the execution is Required, this JAX-RS Response object will be sent to the browser. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:229
#, no-wrap
msgid "So, the HTML page asking for the answer to a secret question is displayed to the user and the user enteres in the answer and clicks submit.\n"
"The action URL of the HTML form will send an HTTP request to the flow.\n"
"The flow will end up invoking the action() method of our Authenticator implementation. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:247
#, no-wrap
msgid "    @Override\n"
"    public void action(AuthenticationFlowContext context) {\n"
"        boolean validated = validateAnswer(context);\n"
"        if (!validated) {\n"
"           Response challenge = context.form()\n"
"                                 .setError(\"badSecret\")\n"
"                                 .createForm(\"secret-question.ftl\");\n"
"           context.failureChallenge(AuthenticationFlowError.INVALID_CREDENTIALS, challenge);\n"
"           return;\n"
"        }\n"
"        setCookie(context);\n"
"        context.success();\n"
"    }\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:251
#, no-wrap
msgid "If the answer is not valid, we rebuild the HTML Form with an additional error message.\n"
"We then call AuthenticationFlowContext.failureChallenge() passing in the reason for the value and the JAX-RS response.\n"
"failureChallenge() works the same as challenge(), but it also records the failure so it can be analyzed by any attack detection service. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:253
#, no-wrap
msgid "If validation is successful, then we set a cookie to remember that the secret question has been answered and we call AuthenticationFlowContext.success(). \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:257
#, no-wrap
msgid "The last thing I want to go over is the setCookie() method.\n"
"This is an example of providing configuration for the Authenticator.\n"
"In this case we want the max age of the cookie to be configurable.\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:266
#, no-wrap
msgid "    protected void setCookie(AuthenticationFlowContext context) {\n"
"        AuthenticatorConfigModel config = context.getAuthenticatorConfig();\n"
"        int maxCookieAge = 60 * 60 * 24 * 30; // 30 days\n"
"        if (config != null) {\n"
"            maxCookieAge = Integer.valueOf(config.getConfig().get(\"cookie.max.age\"));\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:271
#, no-wrap
msgid "        }\n"
"        ... set the cookie ...\n"
"    }\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:276
#, no-wrap
msgid "We obtain an AuthenticatorConfigModel from the AuthenticationFlowContext.getAuthenticatorConfig() method.\n"
"If configuration exists we pull the max age config out of it.\n"
"We will see how we can define what should be configured when we talk about the AuthenticatorFactory implementation.\n"
"The config values can be defined within the admin console if you set up config definitions in your AuthenticatorFactory implementation. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:277
#, no-wrap
msgid "Implementing an AuthenticatorFactory"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:282
#, no-wrap
msgid "The next step in this process is to implement an AuthenticatorFactory.\n"
"This factory is responsible for instantiating an Authenticator.\n"
"It also provides deployment and configuration metadata about the Authenticator. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:285
#, no-wrap
msgid "The getId() method is just the unique name of the component.\n"
"The create() method is called by the runtime to allocate and process the Authenticator.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:290
#, no-wrap
msgid "public class SecretQuestionAuthenticatorFactory implements AuthenticatorFactory, ConfigurableAuthenticatorFactory {\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:293
#, no-wrap
msgid "    public static final String PROVIDER_ID = \"secret-question-authenticator\";\n"
"    private static final SecretQuestionAuthenticator SINGLETON = new SecretQuestionAuthenticator();\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:298
#, no-wrap
msgid "    @Override\n"
"    public String getId() {\n"
"        return PROVIDER_ID;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:304
#, no-wrap
msgid "    @Override\n"
"    public Authenticator create(KeycloakSession session) {\n"
"        return SINGLETON;\n"
"    }\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:308
#, no-wrap
msgid "The next thing the factory is responsible for is specify the allowed requirement switches.\n"
"While there are four different requirement types:  ALTERNATIVE, REQUIRED, OPTIONAL, DISABLED, AuthenticatorFactory implementations can limit which  requirement options are shown in the admin console when defining a flow.\n"
"In our example, we're going to limit our requirement options to REQUIRED and DISABLED. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:321
#, no-wrap
msgid "    private static AuthenticationExecutionModel.Requirement[] REQUIREMENT_CHOICES = {\n"
"            AuthenticationExecutionModel.Requirement.REQUIRED,\n"
"            AuthenticationExecutionModel.Requirement.DISABLED\n"
"    };\n"
"    @Override\n"
"    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n"
"        return REQUIREMENT_CHOICES;\n"
"    }\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:325
#, no-wrap
msgid "The AuthenticatorFactory.isUserSetupAllowed() is a flag that tells the flow manager whether or not Authenticator.setRequiredActions() method will be called.\n"
"If an Authenticator is not configured for a user, the flow manager checks isUserSetupAllowed().  If it is false, then the flow aborts with an error.\n"
"If it returns true, then the flow manager will invoke Authenticator.setRequiredActions(). \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:334
#, no-wrap
msgid "    @Override\n"
"    public boolean isUserSetupAllowed() {\n"
"        return true;\n"
"    }\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:339
#, no-wrap
msgid "The next few methods define how the Authenticator can be configured.\n"
"The isConfigurable() method is a flag which specifies to the admin console on whether the Authenticator can be configured within a flow.\n"
"The getConfigProperties() method returns a list of ProviderConfigProperty objects.\n"
"These objects define a specific configuration attribute. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:347
#, no-wrap
msgid "    @Override\n"
"    public List<ProviderConfigProperty> getConfigProperties() {\n"
"        return configProperties;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:349
#, no-wrap
msgid "    private static final List<ProviderConfigProperty> configProperties = new ArrayList<ProviderConfigProperty>();\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:360
#, no-wrap
msgid "    static {\n"
"        ProviderConfigProperty property;\n"
"        property = new ProviderConfigProperty();\n"
"        property.setName(\"cookie.max.age\");\n"
"        property.setLabel(\"Cookie Max Age\");\n"
"        property.setType(ProviderConfigProperty.STRING_TYPE);\n"
"        property.setHelpText(\"Max age in seconds of the SECRET_QUESTION_COOKIE.\");\n"
"        configProperties.add(property);\n"
"    }\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:368
#, no-wrap
msgid "Each ProviderConfigProperty defines the name of the config property.\n"
"This is the key used in the config map stored in AuthenticatorConfigModel.\n"
"The label defines how the config option will be displayed in the admin console.\n"
"The type defines if it is a String, Boolean, or other type.\n"
"The admin console will display different UI inputs depending on the type.\n"
"The help text is what will be shown in the tooltip for the config attribute in the admin console.\n"
"Read the javadoc of ProviderConfigProperty for more detail. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:373
#, no-wrap
msgid "The rest of the methods are for the admin console.\n"
"getHelpText() is the tooltip text that will be shown when you are picking the Authenticator you want to bind to an execution.\n"
"getDisplayType() is what text that will be shown in the admin console when listing the Authenticator.\n"
"getReferenceCategory() is just a category the Authenticator belongs to. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:374
#, no-wrap
msgid "Adding Authenticator Form"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:379
#, no-wrap
msgid "Keycloak comes with a Freemarker <<_themes,theme and template engine>>.\n"
"The createForm() method you called within authenticate() of your Authenticator class, builds an HTML page from a file within your login theme: secret-question.ftl.\n"
"This file should be placed in the login theme with all the other .ftl files you see for login. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:381
#, no-wrap
msgid "Let's take a bigger look at secret-question.ftl  Here's a small code snippet: \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:390
#, no-wrap
msgid "        <form id=\"kc-totp-login-form\" class=\"${properties.kcFormClass!}\" action=\"${url.loginAction}\" method=\"post\">\n"
"            <div class=\"${properties.kcFormGroupClass!}\">\n"
"                <div class=\"${properties.kcLabelWrapperClass!}\">\n"
"                    <label for=\"totp\" class=\"${properties.kcLabelClass!}\">${msg(\"loginSecretQuestion\")}</label>\n"
"                </div>\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:396
#, no-wrap
msgid "                <div class=\"${properties.kcInputWrapperClass!}\">\n"
"                    <input id=\"totp\" name=\"secret_answer\" type=\"text\" class=\"${properties.kcInputClass!}\" />\n"
"                </div>\n"
"            </div>\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:401
#, no-wrap
msgid "Any piece of text enclosed in `${}` corresponds to an attribute or template funtion.\n"
"If you see the form's action, you see it points to `${url.loginAction}`.\n"
"This value is automatically generated when you invoke the AuthenticationFlowContext.form() method.\n"
"You can also obtain this value by calling the AuthenticationFlowContext.getActionURL() method in Java code. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:407
#, no-wrap
msgid "You'll also see `${properties.someValue}`.\n"
"These correspond to properties defined in your theme.properties file of our theme.\n"
" `${msg(\"someValue\")}` corresponds to the internationalized message bundles (.properties files) included with the login theme messages/ directory.\n"
"If you're just using english, you can just add the value of the `loginSecretQuestion`                value.\n"
"This should be the question you want to ask the user. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:411
#, no-wrap
msgid "When you call AuthenticationFlowContext.form() this gives you a LoginFormsProvider  instance.\n"
"If you called, `LoginFormsProvider.setAttribute(\"foo\", \"bar\")`, the value of \"foo\" would be available for reference in your form as `${foo}`.\n"
"The value of an attribute can be any Java bean as well. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:413
#, no-wrap
msgid "Adding Authenticator to a Flow"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:419
#, no-wrap
msgid "Adding an Authenticator to a flow must be done in the admin console.\n"
"If you go to the Authentication menu item and go to the Flow tab, you will be able to view the currently defined flows.\n"
"You cannot modify an built in flows, so, to add the Authenticator we've created you have to copy an existing flow or create your own.\n"
"I'm hoping the UI is intuitive enough so that you can figure out for yourself how to create a flow and add the Authenticator. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:422
#, no-wrap
msgid "After you've created your flow, you have to bind it to the login action you want to bind it to.\n"
"If you go to the Authentication menu and go  to the Bindings tab you will see options to bind a flow to the browser, registration, or direct grant flow. \n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:423
#, no-wrap
msgid "Required Action Walkthrough"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:428
#, no-wrap
msgid "In this section we will discuss how to define a required action.\n"
"In the Authenticator section you may have wondered, \"How will we get the user's answer to the secret question entered into the system?\".  As we showed in the example, if the answer is not set up, a required action will be triggered.\n"
"This section discusses how to implement the required action for the Secret Question Authenticator. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:435
#, no-wrap
msgid "You will package your classes within a single jar.\n"
"This jar does not have to be separate from other provider classes but it must contain a file named  `org.keycloak.authentication.RequiredActionFactory`                and must be contained in the `META-INF/services/` directory of your jar.\n"
"This file must list the fully qualified classname of each RequiredActionFactory implementation you have in the jar.\n"
"For example: \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:440
#, no-wrap
msgid "org.keycloak.examples.authenticator.SecretQuestionRequiredActionFactory\n"
"----            \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:445
#, no-wrap
msgid "Implement the RequiredActionProvider"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:450
#, no-wrap
msgid "Required actions must first implement the RequiredActionProvider interface.\n"
"The RequiredActionProvider.requiredActionChallenge() is the initial call by the flow manager into the required action.\n"
"This method is responsible for rendering the HTML form that will drive the required action. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:458
#, no-wrap
msgid "    @Override\n"
"    public void requiredActionChallenge(RequiredActionContext context) {\n"
"        Response challenge = context.form().createForm(\"secret_question_config.ftl\");\n"
"        context.challenge(challenge);\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:461
#, no-wrap
msgid "    }\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:467
#, no-wrap
msgid "You see that RequiredActionContext has similar methods to AuthenticationFlowContext.\n"
"The form() method allows you to render the page from a Freemarker template.\n"
"The action URL is preset by the call to this form() method.\n"
"You just need to reference it within your HTML form.\n"
"I'll show you this later. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:469
#, no-wrap
msgid "The challenge() method notifies the flow manager that a required action must be executed. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:472
#, no-wrap
msgid "The next method is responsible for processing input from the HTML form of the required action.\n"
"The action URL of the form will be routed to the RequiredActionProvider.processAction() method \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:486
#, no-wrap
msgid "    @Override\n"
"    public void processAction(RequiredActionContext context) {\n"
"        String answer = (context.getHttpRequest().getDecodedFormParameters().getFirst(\"answer\"));\n"
"        UserCredentialValueModel model = new UserCredentialValueModel();\n"
"        model.setValue(answer);\n"
"        model.setType(SecretQuestionAuthenticator.CREDENTIAL_TYPE);\n"
"        context.getUser().updateCredentialDirectly(model);\n"
"        context.success();\n"
"    }\n"
"----            \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:491
#, no-wrap
msgid "The answer is pulled out of the form post.\n"
"A UserCredentialValueModel is created and the type and value of the credential are set.\n"
"Then UserModel.updateCredentialDirectly() is invoked.\n"
"Finally, RequiredActionContext.success() notifies the container that the required action was successful. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:492
#, no-wrap
msgid "Implement the RequiredActionFactory"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:496
#, no-wrap
msgid "This class is really simple.\n"
"It is just responsible for creating the required actin provider instance. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:501
#, no-wrap
msgid "public class SecretQuestionRequiredActionFactory implements RequiredActionFactory {\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:503
#, no-wrap
msgid "    private static final SecretQuestionRequiredAction SINGLETON = new SecretQuestionRequiredAction();\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:508
#, no-wrap
msgid "    @Override\n"
"    public RequiredActionProvider create(KeycloakSession session) {\n"
"        return SINGLETON;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:514
#, no-wrap
msgid "    @Override\n"
"    public String getId() {\n"
"        return SecretQuestionRequiredAction.PROVIDER_ID;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:520
#, no-wrap
msgid "    @Override\n"
"    public String getDisplayText() {\n"
"        return \"Secret Question\";\n"
"    }\n"
"----            \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:522
#, no-wrap
msgid "The getDisplayText() method is just for the admin console when it wants to display a friendly name for the required action. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:523
#, no-wrap
msgid "Enable Required Action"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:530
#, no-wrap
msgid "The final thing you have to do is go into the admin console.\n"
"Click on the Authentication left menu.\n"
"Click on the Required Actions tab.\n"
"Click on the Register button and choose your new Required Action.\n"
"Your new required action should now be displayed and enabled in the required actions list. \n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:531
#, no-wrap
msgid "Modifying/Extending the Registration Form"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:538
#, no-wrap
msgid "It is entirely possible for you to implement your own flow with a set of Authenticators to totally change how regisration is done in Keycloak.\n"
"But what you'll usually want to do is just add a little bit of validation to the out of the box registration page.\n"
"An additional SPI was created to be able to do this.\n"
"It basically allows you to add validation of form elements on the page as well as to initialize UserModel attributes and data after the user has been registered.\n"
"We'll look at both the implementation of the user profile registration processing as well as the registration Google Recaptcha plugin. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:539
#, no-wrap
msgid "Implementation FormAction Interface"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:544
#, no-wrap
msgid "The core interface you have to implement is the FormAction interface.\n"
"A FormAction is responsible for rendering and processing a portion of the page.\n"
"Rendering is done in the buildPage() method, validation is done in the validate() method, post validation operations are done in success().  Let's first take a look at buildPage() method of the Recaptcha plugin. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:564
#, no-wrap
msgid "    @Override\n"
"    public void buildPage(FormContext context, LoginFormsProvider form) {\n"
"        AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n"
"        if (captchaConfig == null || captchaConfig.getConfig() == null\n"
"                || captchaConfig.getConfig().get(SITE_KEY) == null\n"
"                || captchaConfig.getConfig().get(SITE_SECRET) == null\n"
"                ) {\n"
"            form.addError(new FormMessage(null, Messages.RECAPTCHA_NOT_CONFIGURED));\n"
"            return;\n"
"        }\n"
"        String siteKey = captchaConfig.getConfig().get(SITE_KEY);\n"
"        form.setAttribute(\"recaptchaRequired\", true);\n"
"        form.setAttribute(\"recaptchaSiteKey\", siteKey);\n"
"        form.addScript(\"https://www.google.com/recaptcha/api.js\");\n"
"    }\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:568
#, no-wrap
msgid "The Recaptcha buildPage() method is a callback by the form flow to help render the page.\n"
"It receives a form parameter which is a LoginFormsProvider.\n"
"You can add additional attributes to the form provider so that they can be displayed in the HTML page generated by the registration Freemarker template. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:574
#, no-wrap
msgid "The code above is from the registration recaptcha plugin.\n"
"Recaptcha requires some specific settings that must be obtained from configuration.\n"
"FormActions are configured in the exact same was as Authenticators are.\n"
"In this example, we pull the Google Recaptcha site key from configuration and add it as an attribute to the form provider.\n"
"Our regstration template file can read this attribute now. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:577
#, no-wrap
msgid "Recaptcha also has the requirement of loading a javascript script.\n"
"You can do this by calling LoginFormsProvider.addScript() passing in the URL. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:579
#, no-wrap
msgid "For user profile processing, there is no additional information that it needs to add to the form, so its buildPage() method is empty. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:583
#, no-wrap
msgid "The next meaty part of this interface is the validate() method.\n"
"This is called immediately upon receiving a form post.\n"
"Let's look at the Recaptcha's plugin first. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:592
#, no-wrap
msgid "    @Override\n"
"    public void validate(ValidationContext context) {\n"
"        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"        List<FormMessage> errors = new ArrayList<>();\n"
"        boolean success = false;\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:597
#, no-wrap
msgid "        String captcha = formData.getFirst(G_RECAPTCHA_RESPONSE);\n"
"        if (!Validation.isBlank(captcha)) {\n"
"            AuthenticatorConfigModel captchaConfig = context.getAuthenticatorConfig();\n"
"            String secret = captchaConfig.getConfig().get(SITE_SECRET);\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:607
#, no-wrap
msgid "            success = validateRecaptcha(context, success, captcha, secret);\n"
"        }\n"
"        if (success) {\n"
"            context.success();\n"
"        } else {\n"
"            errors.add(new FormMessage(null, Messages.RECAPTCHA_FAILED));\n"
"            formData.remove(G_RECAPTCHA_RESPONSE);\n"
"            context.validationError(formData, errors);\n"
"            return;\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:612
#, no-wrap
msgid "        }\n"
"    }\n"
"----        \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:621
#, no-wrap
msgid "Here we obtain the form data that the Recaptcha widget adds to the form.\n"
"We obtain the Recaptcha secret key from configuration.\n"
"We then validate the recaptcha.\n"
"If successful, ValidationContext.success() is called.\n"
"If not, we invoke ValidationContext.validationError() passing in the formData (so the user doesn't have to re-enter data), we also specify an error message we want displayed.\n"
"The error message must point to a message bundle property in the internationalized message bundles.\n"
"For other registration extensions validate() might be validating the format of a form element, i.e.\n"
"an alternative email attribute. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:623
#, no-wrap
msgid "Let's also look at the user profile plugin that is used to validate email address and other user information when registering. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:631
#, no-wrap
msgid "    @Override\n"
"    public void validate(ValidationContext context) {\n"
"        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"        List<FormMessage> errors = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:633
#, no-wrap
msgid "        String eventError = Errors.INVALID_REGISTRATION;\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:637
#, no-wrap
msgid "        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_FIRST_NAME)))) {\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_FIRST_NAME, Messages.MISSING_FIRST_NAME));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:641
#, no-wrap
msgid "        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_LAST_NAME)))) {\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_LAST_NAME, Messages.MISSING_LAST_NAME));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:649
#, no-wrap
msgid "        String email = formData.getFirst(Validation.FIELD_EMAIL);\n"
"        if (Validation.isBlank(email)) {\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.MISSING_EMAIL));\n"
"        } else if (!Validation.isEmailValid(email)) {\n"
"            formData.remove(Validation.FIELD_EMAIL);\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.INVALID_EMAIL));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:654
#, no-wrap
msgid "        if (context.getSession().users().getUserByEmail(email, context.getRealm()) != null) {\n"
"            formData.remove(Validation.FIELD_EMAIL);\n"
"            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.EMAIL_EXISTS));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:658
#, no-wrap
msgid "        if (errors.size() > 0) {\n"
"            context.validationError(formData, errors);\n"
"            return;\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:664
#, no-wrap
msgid "        } else {\n"
"            context.success();\n"
"        }\n"
"    }\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:675
#, no-wrap
msgid "As you can see, this validate() method of user profile processing makes sure that the email, first, and last name are filled in in the form.\n"
"It also makes sure that email is in the right format.\n"
"If any of these validations fail, an error message is queued up for rendering.\n"
"Any fields in error are removed from the form data.\n"
"Error messages are represented by the FormMessage class.\n"
"The first parameter of the constructor of this class takes the HTML element id.\n"
"The input in error will be highlighted when the form is re-rendered.\n"
"The second parameter is a message reference id.\n"
"This id must correspond to a property in one of the localized message bundle files.\n"
"in the theme. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:679
#, no-wrap
msgid "After all validations have been processed then, the form flow then invokes the FormAction.success() method.\n"
"For recaptcha this is a no-op, so we won't go over it.\n"
"For user profile processing, this method fills in values in the registered user. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:692
#, no-wrap
msgid "    @Override\n"
"    public void success(FormContext context) {\n"
"        UserModel user = context.getUser();\n"
"        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n"
"        user.setFirstName(formData.getFirst(RegistrationPage.FIELD_FIRST_NAME));\n"
"        user.setLastName(formData.getFirst(RegistrationPage.FIELD_LAST_NAME));\n"
"        user.setEmail(formData.getFirst(RegistrationPage.FIELD_EMAIL));\n"
"    }\n"
"----        \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:696
#, no-wrap
msgid "Pretty simple implementation.\n"
"The UserModel of the newly registered user is obtained from the FormContext.\n"
"The appropriate methods are called to initialize UserModel data. \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:699
#, no-wrap
msgid "Finally, you are also required to define a FormActionFactory class.\n"
"This class is implemented similarly to AuthenticatorFactory, so we won't go over it. \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:700
#, no-wrap
msgid "Packaging the Action"
msgstr ""

#. type: Plain text
#: source/server_development/topics/auth-spi.adoc:706
#, no-wrap
msgid "You will package your classes within a single jar.\n"
"This jar must contain a file named  `org.keycloak.authentication.FormActionFactory`                and must be contained in the `META-INF/services/` directory of your jar.\n"
"This file must list the fully qualified classname of each FormActionFactory implementation you have in the jar.\n"
"For example: \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:713
#, no-wrap
msgid "org.keycloak.authentication.forms.RegistrationProfile\n"
"org.keycloak.authentication.forms.RegistrationRecaptcha\n"
"----            \n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:718
#, no-wrap
msgid "Adding FormAction to the Registration Flow"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:724
#, no-wrap
msgid "Adding an FormAction to a registration page flow must be done in the admin console.\n"
"If you go to the Authentication menu item and go to the Flow tab, you will be able to view the currently defined flows.\n"
"You cannot modify an built in flows, so, to add the Authenticator we've created you have to copy an existing flow or create your own.\n"
"I'm hoping the UI is intuitive enough so that you can figure out for yourself how to create a flow and add the FormAction. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:729
#, no-wrap
msgid "Basically you'll have to copy the registration flow.\n"
"Then click Actions menu to the right of the Registration Form, and pick \"Add Execution\" to add a new execution.\n"
"You'll pick the FormAction from the selection list.\n"
"Make sure your FormAction comes after \"Registration User Creation\" by using the down errors to move it if your FormAction isn't already listed after \"Registration User Creation\".  You want your FormAction to come after user creation because the success() method of Regsitration User Creation is responsible for creating the new UserModel. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:732
#, no-wrap
msgid "After you've created your flow, you have to bind it to registration.\n"
"If you go to the Authentication menu and go  to the Bindings tab you will see options to bind a flow to the browser, registration, or direct grant flow. \n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:733
#, no-wrap
msgid "Modifying Forgot Password/Credential Flow"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:739
#, no-wrap
msgid "Keycloak also has a specific authentication flow for forgot password, or rather credential reset initiated by a user.\n"
"If you go to the admin console flows page, there is a \"reset credentials\" flow.\n"
"By default, Keycloak asks for the email or username of the user and sends an email to them.\n"
"If the user clicks on the link, then they are able to reset both their password and OTP (if an OTP has been set up).  You can disable automatic OTP reset by disabling the \"Reset OTP\" authenticator in the flow. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:743
#, no-wrap
msgid "You can add additional functionality to this flow as well.\n"
"For example, many deployments would like for the user to answer one or more secret questions in additional to sending an email with a link.\n"
"You could expand on the secret question example that comes with the distro and incorporate it into the reset credential flow. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:753
#, no-wrap
msgid "One thing to note if you are extending the reset credentials flow.\n"
"The first \"authenticator\" is just a page to obtain the username or email.\n"
"If the username or email exists, then the AuthenticationFlowContext.getUser() will return the located user.\n"
"Otherwise this will be null.\n"
"This form *WILL NOT* re-ask the user to enter in an email or username if the previous email or username did not exist.\n"
"You need to prevent attackers from being able to guess valid users.\n"
"So, if AuthenticationFlowContext.getUser() returns null, you should proceed with the flow to make it look like a valid user was selected.\n"
"I suggest that if you want to add secret questions to this flow, you should ask these questions after the email is sent.\n"
"In other words, add your custom authenticator after the \"Send Reset Email\" authenticator. \n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:754
#, no-wrap
msgid "Modifying First Broker Login Flow"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:759
#, no-wrap
msgid "First Broker Login flow is used during first login with some identity provider.\n"
"Term `First Login` means that there is not yet existing {project_name} account linked with the particular authenticated identity provider account.\n"
"For more details about this flow see the `Identity Brokering` chapter in link:{adminguide_link}[{adminguide_name}] .\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:761
#, no-wrap
msgid "[[_client_authentication]]\n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/auth-spi.adoc:761
#, no-wrap
msgid "Authentication of clients"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:768
#, no-wrap
msgid "{project_name} actually supports pluggable authentication for http://openid.net/specs/openid-connect-core-1_0.html[OpenID Connect] client applications.\n"
"Authentication of client (application) is used under the hood by the {project_name} adapter during sending any backchannel requests\n"
"to the {project_name} server (like the request for exchange code to access token after successful authentication or request to refresh token).\n"
"But the client authentication can be also used directly by you during `Direct Access grants` (represented by OAuth2 `Resource Owner Password Credentials Flow`)\n"
"or during `Service account` authentication (represented by OAuth2 `Client Credentials Flow`).\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:770
#, no-wrap
msgid "For more details about {project_name} adapter and OAuth2 flows see link:{adapterguide_link}[{adapterguide_name}].\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:771
#, no-wrap
msgid "Default implementations"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:774
#, no-wrap
msgid "Actually Keycloak has 2 builtin implementations of client authentication: \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:778
#, no-wrap
msgid "Traditional authentication with client_id and client_secret::\n"
"  This is default mechanism mentioned in the http://openid.net/specs/openid-connect-core-1_0.html[OpenID Connect]                                or https://tools.ietf.org/html/rfc6749[OAuth2] specification and Keycloak supports it since it's early days.\n"
"  The public client needs to include `client_id` parameter with it's ID in the POST request (so it's defacto not authenticated) and the confidential client needs to include `Authorization: Basic` header with the clientId and clientSecret used as username and password. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:783
#, no-wrap
msgid "Authentication with signed JWT::\n"
"  This is based on the https://tools.ietf.org/html/rfc7523[JWT Bearer Token Profiles for OAuth 2.0] specification.\n"
"  The client/adapter generates the https://tools.ietf.org/html/rfc7519[JWT] and signs it with his private key.\n"
"  The Keycloak then verifies the signed JWT with the client's public key and authenticates client based on it.             \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:786
#, no-wrap
msgid "See the demo example and especially the `examples/preconfigured-demo/product-app` for the example application showing\n"
"the application using client authentication with signed JWT.\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/auth-spi.adoc:787
#, no-wrap
msgid "Implement your own client authenticator"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:790
#, no-wrap
msgid "For plug your own client authenticator, you need to implement few interfaces on both client (adapter) and server side. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:793
#, no-wrap
msgid "Client side::\n"
"Here you need to implement `org.keycloak.adapters.authentication.ClientCredentialsProvider` and put the implementation either to: \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:797
#, no-wrap
msgid "* your WAR file into WEB-INF/classes . But in this case, the implementation can be used just for this single WAR application\n"
"* Some JAR file, which will be added into WEB-INF/lib of your WAR\n"
"  * Some JAR file, which will be used as jboss module and configured in jboss-deployment-structure.xml of your WAR.                                In all cases, you also need to create the file `META-INF/services/org.keycloak.adapters.authentication.ClientCredentialsProvider`                                either in the WAR or in your JAR. \n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/auth-spi.adoc:800
#, no-wrap
msgid "Server side::\n"
"  Here you need to implement `org.keycloak.authentication.ClientAuthenticatorFactory` and `org.keycloak.authentication.ClientAuthenticator` . You also need to add the file `META-INF/services/org.keycloak.authentication.ClientAuthenticatorFactory` with the name of the implementation classes.\n"
"  See <<_auth_spi_walkthrough,authenticators>> for more details.             \n"
msgstr ""

