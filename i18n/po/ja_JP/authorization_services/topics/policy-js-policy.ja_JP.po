# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Hiroyuki Wada <wadahiro@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#, no-wrap
msgid "*Name*\n"
msgstr "*Name*\n"

#. type: Plain text
#, no-wrap
msgid "*Description*\n"
msgstr "*Description*\n"

#. type: Title ==
#, no-wrap
msgid "Examples"
msgstr "サンプル"

#. type: Title ==
#, no-wrap
msgid "Configuration"
msgstr "設定"

#. type: Plain text
#, no-wrap
msgid "*Logic*\n"
msgstr "*Logic*\n"

#. type: Plain text
msgid ""
"The <<_policy_logic, Logic>> of this policy to apply after the other "
"conditions have been evaluated."
msgstr "他の条件が評価された後に適用する、このポリシーの<<_policy_logic, ロジック>>。"

#. type: Plain text
msgid "A string containing details about this policy."
msgstr "このポリシーに関する詳細情報を含む文字列。"

#. type: Plain text
msgid ""
"A human-readable and unique string describing the policy. A best practice is"
" to use names that are closely related to your business and security "
"requirements, so you can identify them more easily."
msgstr ""
"ポリシーを説明する、人が判読可能で一意の文字列。ベスト・プラクティスは、ビジネス要件とセキュリティー要件に密接に関連する名前を使用することです。そうすることで簡単に識別することができます。"

#. type: Title =
#, no-wrap
msgid "JavaScript-Based Policy"
msgstr "JavaScriptベースポリシー"

#. type: Plain text
msgid ""
"You can use this type of policy to define conditions for your permissions "
"using JavaScript. It is one of the rule-based policy types supported by "
"{project_name}, and provides flexibility to write any policy based on the "
"<<_policy_evaluation_api, Evaluation API>>."
msgstr ""
"このポリシーは、JavaScriptを使用可能にする条件を定義するために使うことができます。これは{project_name}によってサポートされるルール・ベースのポリシータイプの1つであり、<<_policy_evaluation_api,"
" 評価API>>に基づいて任意のポリシーを柔軟に作成できます。"

#. type: Plain text
msgid ""
"To create a new JavaScript-based policy, select *JavaScript* in the dropdown"
" list in the upper right corner of the policy listing."
msgstr ""
"新しいJavaScriptベースポリシーを作成するには、ポリシーリストの右上隅にあるドロップダウン・リストから *JavaScript* を選択します。"

#. type: Block title
#, no-wrap
msgid "Add JavaScript Policy"
msgstr "JavaScriptポリシーの追加"

#. type: Plain text
msgid "image:{project_images}/policy/create-js.png[alt=\"Add JavaScript Policy\"]"
msgstr "image:{project_images}/policy/create-js.png[alt=\"JavaScriptポリシーの追加\"]"

#. type: Plain text
#, no-wrap
msgid "*Code*\n"
msgstr "*Code*\n"

#. type: Plain text
msgid "The JavaScript code providing the conditions for this policy."
msgstr "このポリシーの条件を指定するJavaScriptコード。"

#. type: Plain text
msgid ""
"Here is a simple example of a JavaScript-based policy that uses attribute-"
"based access control (ABAC) to define a condition based on an attribute "
"obtained from the execution context:"
msgstr ""
"コンテキストから取得した属性で条件を定義するために、属性ベース・アクセス・コントロール（ABAC）を使用するJavaScriptベースポリシーの簡単な例です。"

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var contextAttributes = context.getAttributes();\n"
"\n"
"if (contextAttributes.containsValue('kc.client.network.ip_address', '127.0.0.1')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""
"var context = $evaluation.getContext();\n"
"var contextAttributes = context.getAttributes();\n"
"\n"
"if (contextAttributes.containsValue('kc.client.network.ip_address', '127.0.0.1')) {\n"
"    $evaluation.grant();\n"
"}\n"

#. type: Plain text
msgid ""
"You can also use Role-Based Access Control (RBAC) in your policies. In the "
"example below, we check if an user is granted with a `keycloak_user` *realm*"
" role:"
msgstr ""
"ロールベース・アクセス・コントロール（RBAC）を使用することもできます。以下の例では、ユーザーが `keycloak_user` *レルム* "
"ロールを与えられているかどうかを調べています。"

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"\n"
"if (identity.hasRealmRole('keycloak_user')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"\n"
"if (identity.hasRealmRole('keycloak_user')) {\n"
"    $evaluation.grant();\n"
"}\n"

#. type: Plain text
msgid ""
"Or you can check if an user is granted with a `my-client-role` *client* "
"role, where `my-client` is the client id of the client application:"
msgstr ""
"または、ユーザーが `my-client-role` *クライアント* ・ロールを与えられているかどうかを確認できます。my-"
"clientはクライアント・アプリケーションのクライアントIDです。"

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"\n"
"if (identity.hasClientRole('my-client', 'my-client-role')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"\n"
"if (identity.hasClientRole('my-client', 'my-client-role')) {\n"
"    $evaluation.grant();\n"
"}\n"

#. type: Plain text
msgid ""
"You can also use a combination of several access control mechanisms. The "
"example below shows how roles(RBAC) and claims/attributes(ABAC) checks can "
"be used within the same policy. In this case we check if user is granted "
"with `admin` role or has an e-mail from `keycloak.org` domain:"
msgstr ""
"いくつかのアクセス・コントロール機構の組み合わせを使用することもできます。 "
"以下の例は、同じポリシー内でロール（RBAC）とクレーム/属性（ABAC）のチェックをどのように使用できるかを示しています。この場合は、ユーザーが "
"`admin` ロールを与えられているか、または、`keycloak.org` ドメインの電子メールを持っているかどうかを調べています。"

#. type: Code block
#, no-wrap
msgid ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"var attributes = identity.getAttributes();\n"
"var email = attributes.getValue('email').asString(0);\n"
"\n"
"if (identity.hasRealmRole('admin') || email.endsWith('@keycloak.org')) {\n"
"    $evaluation.grant();\n"
"}\n"
msgstr ""
"var context = $evaluation.getContext();\n"
"var identity = context.getIdentity();\n"
"var attributes = identity.getAttributes();\n"
"var email = attributes.getValue('email').asString(0);\n"
"\n"
"if (identity.hasRealmRole('admin') || email.endsWith('@keycloak.org')) {\n"
"    $evaluation.grant();\n"
"}\n"

#. type: Plain text
msgid ""
"When writing your own rules, keep in mind that the *$evaluation* object is "
"an object implementing "
"*org.keycloak.authorization.policy.evaluation.Evaluation*. For more "
"information about what you can access from this interface, see the "
"<<_policy_evaluation_api, Evaluation API>>."
msgstr ""
"独自のルールを作成するときは、 *$evaluation* オブジェクトが "
"*org.keycloak.authorization.policy.evaluation.Evaluation* "
"を実装するオブジェクトであることに注意してください。このインターフェイスからアクセスできるものの詳細については、<<_policy_evaluation_api,"
" 評価API>>を参照してください。"
