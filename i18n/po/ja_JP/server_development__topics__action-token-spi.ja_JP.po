msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"POT-Creation-Date: 2017-09-20 08:59+0000\n"
"PO-Revision-Date: 2017-09-20 05:25-0400\n"
"Last-Translator: wadahiro <wadahiro@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: keycloak-documentation-i18n\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/i18n/pot/server_development__topics__action-token-spi.pot\n"

#. type: Title ==
#: source/server_development/topics/action-token-spi.adoc:2
#, no-wrap
msgid "Action Token SPI"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:7
#, no-wrap
msgid "An action token is a special instance of Json Web Token (JWT) that permits its bearer to perform some actions, e. g. to\n"
"reset a password or validate e-mail address. They are usually sent to users in form of a link that points to an endpoint\n"
"processing action tokens for a particular realm.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:9
#, no-wrap
msgid "{project_name} offers four basic token types allowing the bearer to:\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:11
#, no-wrap
msgid "Reset credentials\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:12
#, no-wrap
msgid "Confirm e-mail address\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:13
#, no-wrap
msgid "Execute required action(s)\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:14
#, no-wrap
msgid "Confirm linking of an account with account in external identity provider\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:17
#, no-wrap
msgid "In addition to that, it is possible to implement any functionality that initiates or modifies authentication session\n"
"using action token SPI, details of which are described in the text below.\n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/action-token-spi.adoc:19
#, no-wrap
msgid "Anatomy of Action Token"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:22
#, no-wrap
msgid "Action token is a standard Json Web Token signed with active realm key where the payload contains several fields:\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:24
#, no-wrap
msgid "`typ` - Identification of the action (e.g. `verify-email`)\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:25
#, no-wrap
msgid "`iat` and `exp` - Times of token validity\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:26
#, no-wrap
msgid "`sub` - ID of the user\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:27
#, no-wrap
msgid "`azp` - Client name\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:28
#, no-wrap
msgid "`iss` - Issuer - URL of the issuing realm\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:29
#, no-wrap
msgid "`aud` - Audience - list containing URL of the issuing realm\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:30
#, no-wrap
msgid "`asid` - ID of the authentication session (_optional_)\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:31
#, no-wrap
msgid "`nonce` - Random nonce to guarantee uniqueness of use if the operation can only be executed once (_optional_)\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:33
#, no-wrap
msgid "In addition, an action token can contain any number of custom fields serializable into JSON.\n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/action-token-spi.adoc:34
#, no-wrap
msgid "Action Token Processing"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:42
#, no-wrap
msgid "When an action token is passed to a {project_name} endpoint\n"
"`_KEYCLOAK_ROOT_/auth/realms/master/login-actions/action-token` via `key` parameter, it is validated and a proper action\n"
"token handler is executed. The processing always takes place in a context of an authentication session, either a fresh\n"
"one or the action token service joins an existing authentication session (details are described below). The action token\n"
"handler can perform actions prescribed by the token (often it alters the authentication session) and results into a HTTP\n"
"response (e.g. it can continue in authentication or display an information/error page). These steps are detailed below.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:45
#, no-wrap
msgid "*Basic action token validation.* Signature and time validity is checked, and action token handler is determined based\n"
"on `typ` field.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:51
#, no-wrap
msgid "[[determining-auth-sess]]*Determining authentication session.* If the action token URL was opened in browser with\n"
"existing authentication session, and the token contains authentication session ID matching the authentication session\n"
"from the browser, action token validation and handling will attach this ongoing authentication session. Otherwise,\n"
"action token handler creates a fresh authentication session that replaces any other authentication session present at\n"
"that time in the browser.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:56
#, no-wrap
msgid "*Token validations specific for token type.* Action token endpoint logic validates that the user (`sub` field) and\n"
"client (`azp`) from the token exist, are valid and not disabled. Then it validates all custom validations defined in the\n"
"action token handler. Furthermore, token handler can request this token be single-use. Already used tokens would then be\n"
"rejected by action token endpoint logic.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:59
#, no-wrap
msgid "*Performing the action.* After all these validations, action token handler code is called that performs the actual\n"
"action according to parameters in the token.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:62
#, no-wrap
msgid "*Invalidation of single-Use tokens.* If the token is set to single-use, once the authentication flow finishes, the\n"
"action token is invalidated.\n"
msgstr ""

#. type: Title ===
#: source/server_development/topics/action-token-spi.adoc:63
#, no-wrap
msgid "Implement Your Own Action Token and its Handler"
msgstr ""

#. type: Title ====
#: source/server_development/topics/action-token-spi.adoc:65
#, no-wrap
msgid "How to Create an Action Token"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:71
#, no-wrap
msgid "As action token is just a signed JWT with few mandatory fields (see <<_action_token_anatomy,Anatomy of action token>>\n"
"above), it can be serialized and signed as such using Keycloak's `JWSBuilder` class. This way has been already\n"
"implemented in `serialize(session, realm, uriInfo)` method of `org.keycloak.authentication.actiontoken.DefaultActionToken`\n"
"and can be leveraged by implementors by using that class for tokens instead of plain `JsonWebToken`.\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/action-token-spi.adoc:72
#: source/server_development/topics/auth-spi.adoc:140
#: source/server_development/topics/auth-spi.adoc:429
#, no-wrap
msgid "Packaging Classes and Deployment"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:75
#, no-wrap
msgid "To plug your own action token and its handler, you need to implement few interfaces on server side:\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:78
#, no-wrap
msgid "`org.keycloak.authentication.actiontoken.ActionTokenHandler` - actual handler of action token for a particular\n"
"action (i.e. for a given value of `typ` token field).   \n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:83
#, no-wrap
msgid "The central method in that interface is `handleToken(token, context)` which defines actual operation executed upon\n"
"receiving the action token. Usually it is some alteration of authentication session notes but generally it can be\n"
"arbitrary. This method is only called if all verifiers (including those defined in `getVerifiers(context)`) have\n"
"succeeded, and it is guaranteed that the `token` would be of the class returned by `getTokenClass()` method.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:90
#, no-wrap
msgid "To be able to determine whether the action token was issued for the current authentication session as described in\n"
"<<determining-auth-sess,Item 2 above>>, method for extracting authentication session ID has to be declared in\n"
"`getAuthenticationSessionIdFromToken(token, context)` method. The implementation in `DefaultActionToken` returns the\n"
"value of `asid` field from the token if it is defined. Note that you can override that method to return current\n"
"authentication session ID regardless of the token - that way you can create tokens that would step into the ongoing\n"
"authentication flow before any authentication flow would be started.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:94
#, no-wrap
msgid "If the authentication session from the token does not match the current one, the action token handler would be asked to\n"
"start a fresh one by calling `startFreshAuthenticationSession(token, context)`. It can throw a `VerificationException`\n"
"(or better its more descriptive variant `ExplainedTokenVerificationException`) to signal that would be forbidden.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:99
#, no-wrap
msgid "The token handler also determines via method `canUseTokenRepeatedly(token, context)` whether the token would be\n"
"invalidated after it is used and authentication completes. Note that if you would have a flow utilizing multiple action\n"
"token, only the last token would be invalidated. In that case, you should use\n"
"`org.keycloak.models.ActionTokenStoreProvider` in action token handler to invalidate the used tokens manually.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:103
#, no-wrap
msgid "Default implementation of most of the `ActionTokenHandler` methods is the\n"
"`org.keycloak.authentication.actiontoken.AbstractActionTokenHander` abstract class in `keycloak-services` module. The\n"
"only method that needs to be implemented is `handleToken(token, context)` that performs the actual action.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:107
#, no-wrap
msgid "`org.keycloak.authentication.actiontoken.ActionTokenHandlerFactory` - factory that instantiates action token\n"
"handler. Implementations have to override `getId()` to return value that must match precisely the value of `typ`\n"
"field in the action token.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:110
#, no-wrap
msgid "Note that you have to register the custom `ActionTokenHandlerFactory` implementation as explained in the\n"
"<<_providers,Service Provider Interfaces>> section of this guide.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/action-token-spi.adoc:117
#, no-wrap
msgid "If the action token you are implementing contains any custom fields that should be serializabled to JSON fields, you\n"
"should consider implementing a descendant of `org.keycloak.representations.JsonWebToken` class that would implement\n"
"`org.keycloak.models.ActionTokenKeyModel` interface. In that case, you can take advantage of the existing\n"
"`org.keycloak.authentication.actiontoken.DefaultActionToken` class as it already satisfies both these conditions,\n"
"and either use it directly or implement its child, the fields of which can be annotated with appropriate Jackson\n"
"annotations, e.g. `com.fasterxml.jackson.annotation.JsonProperty` to serialize them to JSON.\n"
msgstr ""

