msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"POT-Creation-Date: 2017-09-20 08:59+0000\n"
"PO-Revision-Date: 2017-09-20 05:27-0400\n"
"Last-Translator: wadahiro <wadahiro@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: keycloak-documentation-i18n\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/i18n/pot/server_development__topics__user-storage__import.pot\n"

#. type: Plain text
#: source/securing_apps/topics/client-registration.adoc:148
#: source/securing_apps/topics/oidc/java/adapter-context.adoc:16
#: source/securing_apps/topics/oidc/java/adapter_error_handling.adoc:24
#: source/securing_apps/topics/oidc/java/multi-tenancy.adoc:17
#: source/securing_apps/topics/saml/java/assertion-api.adoc:11
#: source/server_admin/topics/identity-broker/suggested.adoc:15
#: source/server_admin/topics/identity-broker/suggested.adoc:25
#: source/server_admin/topics/identity-broker/tokens.adoc:12
#: source/server_development/topics/user-storage/augmenting.adoc:15
#: source/server_development/topics/user-storage/augmenting.adoc:47
#: source/server_development/topics/user-storage/cache.adoc:14
#: source/server_development/topics/user-storage/cache.adoc:52
#: source/server_development/topics/user-storage/cache.adoc:63
#: source/server_development/topics/user-storage/configuration.adoc:9
#: source/server_development/topics/user-storage/configuration.adoc:38
#: source/server_development/topics/user-storage/configuration.adoc:66
#: source/server_development/topics/user-storage/configuration.adoc:85
#: source/server_development/topics/user-storage/import.adoc:31
#: source/server_development/topics/user-storage/import.adoc:85
#: source/server_development/topics/user-storage/import.adoc:111
#: source/server_development/topics/user-storage/javaee.adoc:16
#: source/server_development/topics/user-storage/javaee.adoc:60
#: source/server_development/topics/user-storage/model-interfaces.adoc:7
#: source/server_development/topics/user-storage/provider-interfaces.adoc:10
#: source/server_development/topics/user-storage/provider-interfaces.adoc:59
#: source/server_development/topics/user-storage/provider-interfaces.adoc:94
#: source/server_development/topics/user-storage/registration-query.adoc:15
#: source/server_development/topics/user-storage/registration-query.adoc:33
#: source/server_development/topics/user-storage/registration-query.adoc:65
#: source/server_development/topics/user-storage/registration-query.adoc:81
#: source/server_development/topics/user-storage/registration-query.adoc:99
#: source/server_development/topics/user-storage/registration-query.adoc:132
#: source/server_development/topics/user-storage/registration-query.adoc:163
#: source/server_development/topics/user-storage/registration-query.adoc:191
#: source/server_development/topics/user-storage/registration-query.adoc:212
#: source/server_development/topics/user-storage/rest.adoc:16
#: source/server_development/topics/user-storage/rest.adoc:62
#: source/server_development/topics/user-storage/simple-example.adoc:10
#: source/server_development/topics/user-storage/simple-example.adoc:24
#: source/server_development/topics/user-storage/simple-example.adoc:43
#: source/server_development/topics/user-storage/simple-example.adoc:100
#: source/server_development/topics/user-storage/simple-example.adoc:134
#: source/server_development/topics/user-storage/simple-example.adoc:160
#: source/server_development/topics/user-storage/simple-example.adoc:182
#: source/server_development/topics/user-storage/simple-example.adoc:229
#: source/server_development/topics/user-storage/simple-example.adoc:243
#: source/server_development/topics/admin-rest-api.adoc:49
#: source/server_development/topics/auth-spi.adoc:170
#: source/server_development/topics/auth-spi.adoc:186
#: source/server_development/topics/auth-spi.adoc:199
#: source/server_development/topics/auth-spi.adoc:231
#: source/server_development/topics/auth-spi.adoc:259
#: source/server_development/topics/auth-spi.adoc:287
#: source/server_development/topics/auth-spi.adoc:310
#: source/server_development/topics/auth-spi.adoc:327
#: source/server_development/topics/auth-spi.adoc:341
#: source/server_development/topics/auth-spi.adoc:383
#: source/server_development/topics/auth-spi.adoc:437
#: source/server_development/topics/auth-spi.adoc:452
#: source/server_development/topics/auth-spi.adoc:474
#: source/server_development/topics/auth-spi.adoc:498
#: source/server_development/topics/auth-spi.adoc:546
#: source/server_development/topics/auth-spi.adoc:585
#: source/server_development/topics/auth-spi.adoc:625
#: source/server_development/topics/auth-spi.adoc:681
#: source/server_development/topics/auth-spi.adoc:708
#: source/server_development/topics/extensions.adoc:21
#: source/server_development/topics/extensions.adoc:41
#: source/server_development/topics/extensions.adoc:99
#: source/server_development/topics/extensions.adoc:130
#: source/server_development/topics/providers.adoc:18
#: source/server_development/topics/providers.adoc:53
#: source/server_development/topics/providers.adoc:111
#: source/server_development/topics/providers.adoc:121
#: source/server_development/topics/providers.adoc:157
#: source/server_development/topics/providers.adoc:279
#: source/server_development/topics/providers.adoc:323
#: source/server_development/topics/identity-brokering/account-linking.adoc:24
#: source/server_development/topics/identity-brokering/account-linking.adoc:54
#: source/server_development/topics/identity-brokering/tokens.adoc:12
#, no-wrap
msgid "[source,java]\n"
msgstr ""

#. type: Block title
#: source/server_development/topics/user-storage/augmenting.adoc:45
#: source/server_development/topics/user-storage/import.adoc:29
#: source/server_development/topics/user-storage/registration-query.adoc:13
#: source/server_development/topics/user-storage/registration-query.adoc:31
#: source/server_development/topics/user-storage/registration-query.adoc:63
#: source/server_development/topics/user-storage/registration-query.adoc:79
#: source/server_development/topics/user-storage/registration-query.adoc:97
#: source/server_development/topics/user-storage/registration-query.adoc:130
#: source/server_development/topics/user-storage/registration-query.adoc:161
#: source/server_development/topics/user-storage/registration-query.adoc:189
#: source/server_development/topics/user-storage/registration-query.adoc:210
#, no-wrap
msgid "PropertyFileUserStorageProvider"
msgstr ""

#. type: Title ===
#: source/server_development/topics/user-storage/import.adoc:2
#, no-wrap
msgid "Import Implementation Strategy"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:7
#, no-wrap
msgid "When implementing a user storage provider, there's another strategy you can take. Instead of using user federated storage,\n"
"you can create a user locally in the {project_name} built-in user database and copy attributes from your external\n"
"store into this local copy. There are many advantages to this approach.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:10
#, no-wrap
msgid "{project_name} basically becomes a persistence user cache for your external store. Once the user is imported\n"
"you'll no longer hit the external store thus taking load off of it.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:13
#, no-wrap
msgid "If you are moving to {project_name} as your official user store and deprecating the old external store, you\n"
"can slowly migrate applications to use {project_name}. When all applications have been migrated, unlink the\n"
"imported user, and retire the old legacy external store.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:15
#: source/server_development/topics/user-storage/migration.adoc:27
#, no-wrap
msgid "There are some obvious disadvantages though to using an import strategy:\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:19
#, no-wrap
msgid "Looking up a user for the first time will require multiple updates to {project_name} database. This can\n"
"be a big performance loss under load and put a lot of strain on the {project_name} database. The user federated\n"
"storage approach will only store extra data as needed and may never be used depending on the capabilities of your external store.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:21
#: source/server_development/topics/user-storage/migration.adoc:33
#, no-wrap
msgid "With the import approach, you have to keep local keycloak storage and external storage in sync. The User Storage SPI\n"
"has capability interfaces that you can implement to support synchronization, but this can quickly become painful and messy.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:25
#, no-wrap
msgid "To implement the import strategy you simply check to see first if the user has been imported locally. If so return the\n"
"local user, if not create the user locally and import data from the external store. You can also proxy the local user\n"
"so that most changes are automatically synchronized.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:28
#, no-wrap
msgid "This will be a bit contrived, but we can extend our `PropertyFileUserStorageProvider` to take this approach. We\n"
"begin first by modifying the `createAdapter()` method.\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:50
#, no-wrap
msgid "    protected UserModel createAdapter(RealmModel realm, String username) {\n"
"        UserModel local = session.userLocalStorage().getUserByUsername(username, realm);\n"
"        if (local == null) {\n"
"            local = session.userLocalStorage().addUser(realm, username);\n"
"            local.setFederationLink(model.getId());\n"
"        }\n"
"        return new UserModelDelegate(local) {\n"
"            @Override\n"
"            public void setUsername(String username) {\n"
"                String pw = (String)properties.remove(username);\n"
"                if (pw != null) {\n"
"                    properties.put(username, pw);\n"
"                    save();\n"
"                }\n"
"                super.setUsername(username);\n"
"            }\n"
"        };\n"
"    }\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:56
#, no-wrap
msgid "In this method we call the `KeycloakSession.userLocalStorage()` method to obtain a reference to local {project_name}\n"
"user storage. We see if the user is stored locally, if not, we add it locally. Also note that we call\n"
"`UserModel.setFederationLink()` and pass in the ID of the `ComponentModel` of our provider. This sets a link between\n"
"the provider and the imported user.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:59
#, no-wrap
msgid "When a user storage provider is removed, any user imported by it will also be removed.  This is one of the\n"
"      purposes of calling `UserModel.setFederationLink()`.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:64
#, no-wrap
msgid "Another thing to note is that if a local user is linked, your storage provider will still be delegated to for methods\n"
"that it implements from the `CredentialInputValidator` and `CredentialInputUpdater` interfaces. Returning `false`\n"
"from a validation or update will just result in {project_name} seeing if it can validate or update using\n"
"local storage.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:71
#, no-wrap
msgid "Also notice that we are proxying the local user using the `org.keycloak.models.utils.UserModelDelegate' class.\n"
"This class is an implementation of `UserModel`. Every method just delegates to the `UserModel` it was instantiated with.\n"
"We override the `setUsername()` method of this delegate class to synchronize automatically with the property file.\n"
"For your providers, you can use this to _intercept_ other methods on the local `UserModel` to perform synchronization\n"
"with your external store.  For example, get methods could make sure that the local store is in sync. Set methods\n"
"keep the external store in sync with the local one.\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:75
#, no-wrap
msgid "If your provider is implementing the `UserRegistrationProvider` interface, your `removeUser()` method does not\n"
"      need to remove the user from local storage.  The runtime will automatically perform this operation.  Also\n"
"      note that `removeUser()` will be invoked before it is removed from local storage.\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/user-storage/import.adoc:77
#, no-wrap
msgid "ImportedUserValidation Interface"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:83
#, no-wrap
msgid "If you remember earlier in this chapter, we discussed how querying for a user worked.  Local storage is queried first,\n"
"if the user is found there, then the query ends.  This is a problem for our above implementation as we want\n"
"to proxy the local `UserModel` so that we can keep usernames in sync.  The User Storage SPI has a callback for whenever\n"
"a linked local user is loaded from the local database.\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:97
#, no-wrap
msgid "package org.keycloak.storage.user;\n"
"public interface ImportedUserValidation {\n"
"    /**\n"
"     * If this method returns null, then the user in local storage will be removed\n"
"     *\n"
"     * @param realm\n"
"     * @param user\n"
"     * @return null if user no longer valid\n"
"     */\n"
"    UserModel validate(RealmModel realm, UserModel user);\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:103
#, no-wrap
msgid "Whenever a linked local user is loaded, if the user storage provider class implements this interface, then the\n"
"`validate()` method is called. Here you can proxy the local user passed in as a parameter and return it. That\n"
"new `UserModel` will be used. You can also optionally do a check to see if the user still exists in the external store.\n"
"If `validate()` returns `null`, then the local user will be removed from the database.\n"
msgstr ""

#. type: Title ====
#: source/server_development/topics/user-storage/import.adoc:104
#, no-wrap
msgid "ImportSynchronization Interface"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:109
#, no-wrap
msgid "With the import strategy you can see that it is possible for the local user copy to get out of sync with\n"
"external storage. For example, maybe a user has been removed from the external store. The User Storage SPI has\n"
"an additional interface you can implement to deal with this, `org.keycloak.storage.user.ImportSynchronization`:\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:113
#, no-wrap
msgid "package org.keycloak.storage.user;\n"
msgstr ""

#. type: delimited block -
#: source/server_development/topics/user-storage/import.adoc:118
#, no-wrap
msgid "public interface ImportSynchronization {\n"
"    SynchronizationResult sync(KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model);\n"
"    SynchronizationResult syncSince(Date lastSync, KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model);\n"
"}\n"
msgstr ""

#. type: Plain text
#: source/server_development/topics/user-storage/import.adoc:121
#, no-wrap
msgid "This interface is implemented by the provider factory. Once this interface is implemented by the provider factory, the administration console management page for the provider shows additional options. You can manually force a synchronization by clicking a button. This invokes the `ImportSynchronization.sync()` method. Also, additional configuration options are displayed that allow you to automatically schedule a synchronization. Automatic synchronizations invoke the `syncSince()` method.\n"
msgstr ""

