# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n  \n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#, no-wrap
msgid "Service Provider Interfaces (SPI)"
msgstr ""

#. type: Plain text
msgid ""
"{project_name} is designed to cover most use-cases without requiring custom "
"code, but we also want it to be customizable.  To achieve this "
"{project_name} has a number of Service Provider Interfaces (SPI) for which "
"you can implement your own providers."
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Implementing an SPI"
msgstr ""

#. type: Plain text
msgid ""
"To implement an SPI you need to implement its ProviderFactory and Provider "
"interfaces. You also need to create a service configuration file."
msgstr ""

#. type: Plain text
msgid ""
"For example, to implement the Theme Selector SPI you need to implement "
"ThemeSelectorProviderFactory and ThemeSelectorProvider and also provide the "
"file `META-INF/services/org.keycloak.theme.ThemeSelectorProviderFactory`."
msgstr ""

#. type: Plain text
msgid "Example ThemeSelectorProviderFactory:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "package org.acme.provider;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "import ...\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "public class MyThemeSelectorProviderFactory implements ThemeSelectorProviderFactory {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public ThemeSelectorProvider create(KeycloakSession session) {\n"
"        return new MyThemeSelectorProvider(session);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public void init(Config.Scope config) {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public void postInit(KeycloakSessionFactory factory) {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public void close() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public String getId() {\n"
"        return \"myThemeSelector\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"Keycloak creates a single instance of provider factories which makes it "
"possible to store state for multiple requests.  Provider instances are "
"created by calling create on the factory for each request so these should be "
"light-weight object."
msgstr ""

#. type: Plain text
msgid "Example ThemeSelectorProvider:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "public class MyThemeSelectorProvider implements ThemeSelectorProvider {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    public MyThemeSelectorProvider(KeycloakSession session) {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public String getThemeName(Theme.Type type) {\n"
"        return \"my-theme\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"\tpublic void close() {\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"Example service configuration file (`META-INF/services/org.keycloak.theme."
"ThemeSelectorProviderFactory`):"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "org.acme.provider.MyThemeSelectorProviderFactory\n"
msgstr ""

#. type: Plain text
msgid ""
"You can configure your provider through `standalone.xml`, `standalone-ha."
"xml`, or `domain.xml`."
msgstr ""

#. type: Plain text
msgid "For example by adding the following to `standalone.xml`:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"themeSelector\">\n"
"    <provider name=\"myThemeSelector\" enabled=\"true\">\n"
"        <properties>\n"
"            <property name=\"theme\" value=\"my-theme\"/>\n"
"        </properties>\n"
"    </provider>\n"
"</spi>\n"
msgstr ""

#. type: Plain text
msgid "Then you can retrieve the config in the `ProviderFactory` init method:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"public void init(Config.Scope config) {\n"
"    String themeName = config.get(\"theme\");\n"
"}\n"
msgstr ""

#. type: Plain text
msgid "Your provider can also lookup other providers if needed. For example:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "    private KeycloakSession session;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    public MyThemeSelectorProvider(KeycloakSession session) {\n"
"        this.session = session;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public String getThemeName(Theme.Type type) {\n"
"        return session.getContext().getRealm().getLoginTheme();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Show info from your SPI implementation in admin console"
msgstr ""

#. type: Plain text
msgid ""
"Sometimes it is useful to show additional info about your Provider to a "
"{project_name} administrator. You can show provider build time information "
"(eg. version of custom provider currently installed), current configuration "
"of the provider (eg. url of remote system your provider talks to) or some "
"operational info (average time of response from remote system your provider "
"talks to). {project_name} admin console provides Server Info page to show "
"this kind of information."
msgstr ""

#. type: Plain text
msgid ""
"To show info from your provider it is enough to implement `org.keycloak."
"provider.ServerInfoAwareProviderFactory` interface in your `ProviderFactory`."
msgstr ""

#. type: Plain text
msgid ""
"Example implementation for `MyThemeSelectorProviderFactory` from previous "
"example:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"public class MyThemeSelectorProviderFactory implements ThemeSelectorProviderFactory, ServerInfoAwareProviderFactory {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> getOperationalInfo() {\n"
"        Map<String, String> ret = new LinkedHashMap<>();\n"
"        ret.put(\"theme-name\", \"my-theme\");\n"
"        return ret;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Registering provider implementations"
msgstr ""

#. type: Plain text
msgid ""
"There are two ways to register provider implementations. In most cases the "
"simplest way is to use the {project_name} deployer approach as this handles "
"a number of dependencies automatically for you. It also supports hot "
"deployment as well as re-deployment."
msgstr ""

#. type: Plain text
msgid "The alternative approach is to deploy as a module."
msgstr ""

#. type: Plain text
msgid ""
"If you are creating a custom SPI you will need to deploy it as a module, "
"otherwise we recommend using the {project_name} deployer approach."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Using the {project_name} Deployer"
msgstr ""

#. type: Plain text
msgid ""
"If you copy your provider jar to the {project_name} `standalone/deployments/"
"` directory, your provider will automatically be deployed.  Hot deployment "
"works too.  Additionally, your provider jar works similarly to other "
"components deployed in a {appserver_name} environment in that they can use "
"facilities like the `jboss-deployment-structure.xml` file.  This file allows "
"you to set up dependencies on other components and load third-party jars and "
"modules."
msgstr ""

#. type: Plain text
msgid ""
"Provider jars can also be contained within other deployable units like EARs "
"and WARs.  Deploying with a EAR actually makes it really easy to use third "
"party jars as you can just put these libraries in the EAR's `lib/` directory."
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Register a provider using Modules"
msgstr ""

#. type: Plain text
msgid ""
"To register a provider using Modules first create a module.  To do this you "
"can either use the jboss-cli script or manually create a folder inside "
"`KEYCLOAK_HOME/modules` and add your jar and a `module.xml`.  For example to "
"add the event listener sysout example provider using the `jboss-cli` script "
"execute:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid "KEYCLOAK_HOME/bin/jboss-cli.sh --command=\"module add --name=org.acme.provider --resources=target/provider.jar --dependencies=org.keycloak.keycloak-core,org.keycloak.keycloak-server-spi\"\n"
msgstr ""

#. type: Plain text
msgid ""
"Or to manually create it start by creating the folder `KEYCLOAK_HOME/modules/"
"org/acme/provider/main`.  Then copy `provider.jar` to this folder and create "
"`module.xml` with the following content:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<module xmlns=\"urn:jboss:module:1.3\" name=\"org.acme.provider\">\n"
"    <resources>\n"
"        <resource-root path=\"provider.jar\"/>\n"
"    </resources>\n"
"    <dependencies>\n"
"        <module name=\"org.keycloak.keycloak-core\"/>\n"
"        <module name=\"org.keycloak.keycloak-server-spi\"/>\n"
"    </dependencies>\n"
"</module>\n"
msgstr ""

#. type: Plain text
msgid ""
"Once you've created the module you need to register this module with "
"{project_name}.  This is done by editing the keycloak-server subsystem "
"section of `standalone.xml`, `standalone-ha.xml`, or `domain.xml`, and "
"adding it to the providers:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<subsystem xmlns=\"urn:jboss:domain:keycloak-server:1.1\">\n"
"    <web-context>auth</web-context>\n"
"    <providers>\n"
"        <provider>module:org.keycloak.examples.event-sysout</provider>\n"
"    </providers>\n"
"    ...\n"
msgstr ""

#. type: Title ====
#, no-wrap
msgid "Disabling a provider"
msgstr ""

#. type: Plain text
msgid ""
"You can disable a provider by setting the enabled attribute for the provider "
"to false in `standalone.xml`, `standalone-ha.xml`, or `domain.xml`.  For "
"example to disable the Infinispan user cache provider add:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"<spi name=\"userCache\">\n"
"    <provider name=\"infinispan\" enabled=\"false\"/>\n"
"</spi>\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Leveraging Java EE"
msgstr ""

#. type: Plain text
msgid ""
"The service providers can be packaged within any Java EE component so long "
"as you set up the `META-INF/services` file correctly to point to your "
"providers.  For example, if your provider needs to use third party "
"libraries, you can package up your provider within an ear and store these "
"third party libraries in the ear's `lib/` directory.  Also note that "
"provider jars can make use of the `jboss-deployment-structure.xml` file that "
"EJBs, WARS, and EARs can use in a {appserver_name} environment.  See the "
"{appserver_name} documentation for more details on this file.  It allows you "
"to pull in external dependencies among other fine grain actions."
msgstr ""

#. type: Plain text
msgid ""
"`ProviderFactory` implementations are required to be plain java objects.  "
"But, we also currently support implementing provider classes as Stateful "
"EJBs.  This is how you would do it:"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"@Stateful\n"
"@Local(EjbExampleUserStorageProvider.class)\n"
"public class EjbExampleUserStorageProvider implements UserStorageProvider,\n"
"        UserLookupProvider,\n"
"        UserRegistrationProvider,\n"
"        UserQueryProvider,\n"
"        CredentialInputUpdater,\n"
"        CredentialInputValidator,\n"
"        OnUserCache\n"
"{\n"
"    @PersistenceContext\n"
"    protected EntityManager em;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    protected ComponentModel model;\n"
"    protected KeycloakSession session;\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    public void setModel(ComponentModel model) {\n"
"        this.model = model;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    public void setSession(KeycloakSession session) {\n"
"        this.session = session;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Remove\n"
"    @Override\n"
"    public void close() {\n"
"    }\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"You have to define the `@Local` annotation and specify your provider class "
"there.  If you don't do this, EJB will not proxy the provider instance "
"correctly and your provider won't work."
msgstr ""

#. type: Plain text
msgid ""
"You must put the `@Remove` annotation on the `close()` method of your "
"provider.  If you don't, the stateful bean will never be cleaned up and you "
"may eventually see error messages."
msgstr ""

#. type: Plain text
msgid ""
"Implementations of `ProviderFactory` are required to be plain java objects.  "
"Your factory class would perform a JNDI lookup of the Stateful EJB in its "
"`create()` method."
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"public class EjbExampleUserStorageProviderFactory\n"
"        implements UserStorageProviderFactory<EjbExampleUserStorageProvider> {\n"
msgstr ""

#. type: delimited block -
#, no-wrap
msgid ""
"    @Override\n"
"    public EjbExampleUserStorageProvider create(KeycloakSession session, ComponentModel model) {\n"
"        try {\n"
"            InitialContext ctx = new InitialContext();\n"
"            EjbExampleUserStorageProvider provider = (EjbExampleUserStorageProvider)ctx.lookup(\n"
"                     \"java:global/user-storage-jpa-example/\" + EjbExampleUserStorageProvider.class.getSimpleName());\n"
"            provider.setModel(model);\n"
"            provider.setSession(session);\n"
"            return provider;\n"
"        } catch (Exception e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title ===
#, no-wrap
msgid "Available SPIs"
msgstr ""

#. type: Plain text
msgid ""
"If you want to see list of all available SPIs at runtime, you can check "
"`Server Info` page in admin console as described in "
"<<_providers_admin_console,Admin Console>> section."
msgstr ""
