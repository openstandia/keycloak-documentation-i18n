# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Nomura Research Institute, Ltd.
# This file is distributed under the same license as the keycloak-documentation-i18n package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: keycloak-documentation-i18n\n"
"Last-Translator: Kohei Tamura <ktamura.biz.80@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/openstandia/teams/79437/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: source/securing_apps/topics/overview/supported-protocols.adoc:11
#: source/server_admin/topics/sso-protocols/oidc.adoc:9
msgid ""
"link:http://openid.net/connect/[Open ID Connect] (OIDC) is an authentication"
" protocol that is an extension of "
"link:https://tools.ietf.org/html/rfc6749[OAuth 2.0].  While OAuth 2.0 is "
"only a framework for building authorization protocols and is mainly "
"incomplete, OIDC is a full-fledged authentication and authorization "
"protocol.  OIDC also makes heavy use of the link:https://jwt.io[Json Web "
"Token] (JWT) set of standards.  These standards define an identity token "
"JSON format and ways to digitally sign and encrypt that data in a compact "
"and web-friendly way."
msgstr ""
"link:http://openid.net/connect/[Open ID "
"Connect]（OIDC）はlink:https://tools.ietf.org/html/rfc6749[OAuth "
"2.0]を拡張した認証プロトコルです。OAuth "
"2.0が認可プロトコルのみを構築するためのフレームワークで、不完全であるのに対し、OIDCは完成された認証および認可のプロトコルです。OIDCはまた、link:https://jwt.io[Json"
" Web "
"Token]（JWT）の標準セットを多用します。これらの標準は、コンパクトでwebフレンドリーな方法で、アイデンティティー・トークンのJSON形式とデジタル署名、データ暗号化の方法を定義します。"

#. type: Plain text
#: source/securing_apps/topics/overview/supported-protocols.adoc:24
#: source/server_admin/topics/sso-protocols/oidc.adoc:22
msgid ""
"The second type of use cases is that of a client that wants to gain access "
"to remote services.  In this case, the client asks {project_name} to obtain "
"an _access token_ it can use to invoke on other remote services on behalf of"
" the user.  {project_name} authenticates the user then asks the user for "
"consent to grant access to the client requesting it.  The client then "
"receives the _access token_.  This _access token_ is digitally signed by the"
" realm.  The client can make REST invocations on remote services using this "
"_access token_.  The REST service extracts the _access token_, verifies the "
"signature of the token, then decides based on access information within the "
"token whether or not to process the request."
msgstr ""
"2つ目のタイプは、リモートサービスへのアクセス権を取得したいクライアントのユースケースです。この場合、クライアントは、ユーザーの代理として他のリモートサービスの呼び出しに使用できる"
" _アクセストークン_ "
"の取得を{project_name}に要求します。{project_name}は、ユーザーを認証し、クライアントのアクセスを許可する同意を要求します。そして、クライアントは"
" _アクセストークン_ を受け取ります。この _アクセストークン_ はレルムによってデジタル署名されます。クライアントはこの _アクセストークン_ "
"を使用して、リモートサービスのREST呼び出しを行うことができます。REST サービスは _アクセストークン_ "
"を抽出し、トークンの署名を検証し、トークン内のアクセス情報に基づいて、リクエストを処理するかどうかを決定します。"

#. type: Title ===
#: source/server_admin/topics/sso-protocols/oidc.adoc:3
#, no-wrap
msgid "Open ID Connect"
msgstr "Open ID Connect"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:15
msgid ""
"There are really two types of use cases when using OIDC.  The first is an "
"application that asks the {project_name} server to authenticate a user for "
"them.  After a successful login, the application will receive an _identity "
"token_ and an _access token_.  The _identity token_ contains information "
"about the user such as username, email, and other profile information.  The "
"_access token_ is digitally signed by the realm and contains access "
"information (like user role mappings) that the application can use to "
"determine what resources the user is allowed to access on the application."
msgstr ""
"OIDCを使用するユースケースは、実際には2つの種類があります。1つ目は、{project_name}サーバーにユーザーの認証を要求するアプリケーションのユースケースです。ログインが成功すると、アプリケーションは"
" _identity token_ と _access token_ を受け取ります。 _Identity token_ "
"には、ユーザー名、電子メール、その他のプロファイル情報など、ユーザーに関する情報が含まれています。 _Access token_ "
"はレルムによってデジタル署名されており、アプリケーションがユーザーのアクセス可能なリソースを決定するために使用できるアクセス情報（ユーザー・ロール・マッピングのような）が含まれています。"

#. type: Title ====
#: source/server_admin/topics/sso-protocols/oidc.adoc:25
#, no-wrap
msgid "OIDC Auth Flows"
msgstr "OIDC認証フロー"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:30
msgid ""
"OIDC has different ways for a client or application to authenticate a user "
"and receive an _identity_ and _access_ token.  Which path you use depends "
"greatly on the type of application or client requesting access.  All of "
"these flows are described in the OIDC and OAuth 2.0 specifications so only a"
" brief overview will be provided here."
msgstr ""
"OIDCには、クライアントまたはアプリケーションがユーザーを認証し、 _identity_ トークンおよび _access_ "
"トークンを受け取るさまざまな方法があります。どの方法を使用するかは、アクセスを要求するアプリケーションまたはクライアントのタイプによって大きく異なります。これらのフローはすべてOIDCおよびOAuth"
" 2.0の仕様で説明されていますので、ここでは簡単な概要のみを説明します。"

#. type: Title =====
#: source/server_admin/topics/sso-protocols/oidc.adoc:31
#, no-wrap
msgid "Authorization Code Flow"
msgstr "認可コード・フロー"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:35
msgid ""
"This is a browser-based protocol and it is what we recommend you use to "
"authenticate and authorize browser-based applications.  It makes heavy use "
"of browser redirects to obtain an _identity_ and _access_ token.  Here's a "
"brief summary:"
msgstr ""
"これはブラウザー・ベースのプロトコルであり、ブラウザー・ベースのアプリケーションの認証と認可に使用することをお勧めします。 _identity_ "
"トークンと _access_ トークンを取得するために、ブラウザーのリダイレクトを頻繁に使用します。概要を以下に示します。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:39
#: source/server_admin/topics/sso-protocols/oidc.adoc:71
msgid ""
"Browser visits application.  The application notices the user is not logged "
"in, so it redirects the browser to {project_name} to be authenticated.  The "
"application passes along a callback URL (a redirect URL) as a query "
"parameter in this browser redirect that {project_name} will use when it "
"finishes authentication."
msgstr ""
"ブラウザーがアプリケーションにアクセスします。アプリケーションは、ユーザーがログインしていないことを検知し、認証させるためにブラウザーを{project_name}にリダイレクトします。アプリケーションは、{project_name}が認証を完了したときに使用するブラウザー・リダイレクトのコールバックURL（リダイレクトURL）をクエリー・パラメーターとして渡します。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:42
msgid ""
"{project_name} authenticates the user and creates a one-time, very short "
"lived, temporary code.  {project_name} redirects back to the application "
"using the callback URL provided earlier and additionally adds the temporary "
"code as a query parameter in the callback URL."
msgstr ""
"{project_name}はユーザーを認証し、1回限りで非常に存続期間の短い、一時的なコードを作成します。{project_name}は、以前に提供されたコールバックURLを使用してアプリケーションにリダイレクトします。コールバックURLには、クエリー・パラメーターとして一時コードが追加されます。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:45
msgid ""
"The application extracts the temporary code and makes a background out of "
"band REST invocation to {project_name} to exchange the code for an "
"_identity_, _access_ and _refresh_ token.  Once this temporary code has been"
" used once to obtain the tokens, it can never be used again.  This prevents "
"potential replay attacks."
msgstr ""
"アプリケーションは一時コードを抽出し、それを _identity_ トークン、 _access_ トークンおよび _refresh_ "
"トークンと交換するため、バックグラウンドで帯域外の{project_name}へのREST呼び出し｀を行います。この一時コードを一度使用してトークンを取得すると、それを再び使用することはできません。これにより潜在的なリプレイ攻撃が防止されます。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:51
msgid ""
"It is important to note that _access_ tokens are usually short lived and "
"often expired after only minutes.  The additional _refresh_ token that was "
"transmitted by the login protocol allows the application to obtain a new "
"access token after it expires.  This refresh protocol is important in the "
"situation of a compromised system.  If access tokens are short lived, the "
"whole system is only vulnerable to a stolen token for the lifetime of the "
"access token.  Future refresh token requests will fail if an admin has "
"revoked access.  This makes things more secure and more scalable."
msgstr ""
"_access_ トークンは通常短命であり、しばしば数分後に失効されることに注意することが重要です。ログイン・プロトコルによって送信された追加の "
"_refresh_ "
"トークンにより、アプリケーションは有効期限が切れた後に新しいアクセス・トークンを取得できます。このリフレッシュ・プロトコルは、システムが侵害された状況で重要です。アクセス・トークンが短命である場合、システム全体は、アクセストークンの存続期間中に盗まれたトークンに対してのみ脆弱です。管理者がアクセスを取り消した場合、その後のリフレッシュ・トークン・リクエストは失敗します。これにより、より安全でスケーラブルになります。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:59
msgid ""
"Another important aspect of this flow is the concept of a _public_ vs. a "
"_confidential_ client.  _Confidential_ clients are required to provide a "
"client secret when they exchange the temporary codes for tokens.  _Public_ "
"clients are not required to provide this client secret.  _Public_ clients "
"are perfectly fine so long as HTTPS is strictly enforced and you are very "
"strict about what redirect URIs are registered for the client.  "
"HTML5/JavaScript clients always have to be _public_ clients because there is"
" no way to transmit the client secret to them in a secure manner.  Again, "
"this is ok so long as you use HTTPS and strictly enforce redirect URI "
"registration.  This guide goes more detail into this in the <<_clients, "
"Managing Clients>> chapter."
msgstr ""
"このフローのもう一つの重要な側面は、 _public_ クライアント対 _confidential_ クライアントの概念です。 "
"_Confidential_ クライアントは、トークンと一時コードを交換するときにクライアント・シークレットを提供する必要があります。 _Public_"
" クライアントはこのクライアント・シークレットを提供する必要がありません。 _Public_ "
"クライアントは、HTTPSが厳格に実施されており、クライアントにリダイレクトURIの登録が非常に厳密に行われている限り問題ありません。HTML5/JavaScriptクライアントは、常に安全な方法でクライアント・シークレットを送信する方法がないため、必ず"
" _public_ "
"クライアントでなければなりません。前述のとおり、HTTPSを使用し、リダイレクトURI登録を厳密に実施する限り、これは問題ありません。これに関するガイドは、<<_clients,"
" クライアントの管理>>の章で詳しく説明しています。"

#. type: Title =====
#: source/server_admin/topics/sso-protocols/oidc.adoc:60
#, no-wrap
msgid "Implicit Flow"
msgstr "インプリシット・フロー"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:67
msgid ""
"This is a browser-based protocol that is similar to Authorization Code Flow "
"except there are fewer requests and no refresh tokens involved.  We do not "
"recommend this flow as there remains the possibility of _access_ tokens "
"being leaked in the browser history as tokens are transmitted via redirect "
"URIs (see below).  Also, since this flow doesn't provide the client with a "
"refresh token, access tokens would either have to be long-lived or users "
"would have to re-authenticate when they expired.  This flow is supported "
"because it is in the OIDC and OAuth 2.0 specification.  Here's a brief "
"summary of the protocol:"
msgstr ""
"これは、リクエストが少なく、リフレッシュ・トークンが含まれていない点を除いて、認可コードフローと同様のブラウザー・ベースのプロトコルです。トークンがリダイレクトURI（以下を参照）を介して送信されるため、ブラウザーの履歴に"
" _access_ "
"トークンがリークする可能性があるため、このフローはお勧めしません。また、このフローではクライアントにリフレッシュ・トークンが提供されないため、アクセス・トークンを長くするか、期限切れになったときに再認証する必要があります。このフローは、OIDCおよびOAuth"
" 2.0の仕様にあるため、サポートされています。プロトコルの概要を以下に示します。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:74
msgid ""
"{project_name} authenticates the user and creates an _identity_ and _access_"
" token.  {project_name} redirects back to the application using the callback"
" URL provided earlier and additionally adding the _identity_ and _access_ "
"tokens as query parameters in the callback URL."
msgstr ""
"{project_name}はユーザーを認証し、 _identity_ トークンと _access_ "
"トークンを作成します。{project_name}は、前述のコールバックURLを使用してアプリケーションにリダイレクトし、さらに _identity_ "
"トークンと _access_ トークンをクエリー・パラメーターとしてコールバックURLに追加します。"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:75
msgid ""
"The application extracts the _identity_ and _access_ tokens from the "
"callback URL."
msgstr "アプリケーションは、コールバックURLから _identity_ トークンと _access_ トークンを抽出します。"

#. type: Title =====
#: source/server_admin/topics/sso-protocols/oidc.adoc:76
#, no-wrap
msgid "Resource Owner Password Credentials Grant (Direct Access Grants)"
msgstr "リソース・オーナー・パスワード・クレデンシャル・グラント（ダイレクト・アクセス・グラント）"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:82
msgid ""
"This is referred to in the Admin Console as _Direct Access Grants_. This is "
"used by REST clients that want to obtain a token on behalf of a user.  It is"
" one HTTP POST request that contains the credentials of the user as well as "
"the id of the client and the client's secret (if it is a confidential "
"client).  The user's credentials are sent within form parameters.  The HTTP "
"response contains _identity_, _access_, and _refresh_ tokens."
msgstr ""
"これは、管理コンソールでは _Direct Access Grants_ "
"と呼ばれます。ユーザーに代わってトークンを取得するRESTクライアントによって使用されます。これは、クライアントIDとクライアント・シークレット（コンフィデンシャル・クライアントの場合）と同様に、ユーザーのクレデンシャルを含む1つのHTTP"
" POSTリクエストとなります。ユーザーのクレデンシャルは、フォーム・パラメーター内で送信されます。HTTPレスポンスには、 _identity_  "
"トークン、 _access_ トークン、および _refresh_ トークンが含まれています。"

#. type: Title =====
#: source/server_admin/topics/sso-protocols/oidc.adoc:84
#, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアント・クレデンシャル・グラント"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:89
msgid ""
"This is also used by REST clients, but instead of obtaining a token that "
"works on behalf of an external user, a token is created based on the "
"metadata and permissions of a service account that is associated with the "
"client.  More info together with example is in <<_service_accounts,Service "
"Accounts>> chapter."
msgstr ""
"これはRESTクライアントでも使用されますが、外部ユーザーの代わりに動作するトークンを取得する代わりに、クライアントに関連付けられているサービス・アカウントのメタデータとパーミッションに基づいてトークンが作成されます。さらに詳しい情報は、<<_service_accounts,サービス・アカウント>>の章にあります。"

#. type: Title ====
#: source/server_admin/topics/sso-protocols/oidc.adoc:90
#, no-wrap
msgid "{project_name} Server OIDC URI Endpoints"
msgstr "{project_name}サーバーOIDC URIエンドポイント"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:95
msgid ""
"Here's a list of OIDC endpoints that the {project_name} publishes.  These "
"URLs are useful if you are using a non-{project_name} client adapter to talk"
" OIDC with the auth server.  These are all relative URLs and the root of the"
" URL being the HTTP(S) protocol, hostname, and usually path prefixed with "
"_/auth_: i.e. $$https://localhost:8080/auth$$"
msgstr ""
"{project_name}が発行するOIDCエンドポイントのリストです。これらのURLは、{project_name}以外のクライアント・アダプターを使用して、認証サーバーとOIDCでやりとりしている場合に便利です。これらはすべてが相対URLであり、URLのルートはHTTP(S)プロトコル、ホスト名、通常は"
" _/auth_ のプレフィックス付きのパスからなります。例： $$https://localhost:8080/auth$$"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:105
#, no-wrap
msgid ""
"/realms/{realm-name}/protocol/openid-connect/token::\n"
"  This is the URL endpoint for obtaining a temporary code in the Authorization Code Flow or for obtaining tokens via the\n"
"  Implicit Flow, Direct Grants, or Client Grants.\n"
"/realms/{realm-name}/protocol/openid-connect/auth::\n"
"  This is the URL endpoint for the Authorization Code Flow to turn a temporary code into a token.\n"
"/realms/{realm-name}/protocol/openid-connect/logout::\n"
"  This is the URL endpoint for performing logouts.\n"
"/realms/{realm-name}/protocol/openid-connect/userinfo::\n"
"  This is the URL endpoint for the User Info service described in the OIDC specification.\n"
msgstr ""
"/realms/{realm-name}/protocol/openid-connect/token::\n"
"  これは、認可コード・フローで一時コードを取得するため、またはインプリシット・フロー、ダイレクト・グラント、またはクライアント・グラントを使用してトークンを取得するためのURLエンドポイントです。\n"
"/realms/{realm-name}/protocol/openid-connect/auth::\n"
"  これは、一時コードをトークンに変換する認可コード・フローのURLエンドポイントです。\n"
"/realms/{realm-name}/protocol/openid-connect/logout::\n"
"  これは、ログアウトを実行するためのURLエンドポイントです。\n"
"/realms/{realm-name}/protocol/openid-connect/userinfo::\n"
"  これは、OIDC仕様で説明されているUserInfoサービスのURLエンドポイントです。\n"

#. type: Plain text
#: source/server_admin/topics/sso-protocols/oidc.adoc:106
msgid "In all of these replace _{realm-name}_ with the name of the realm."
msgstr "これらのURLすべてで、 _{realm-name}_ はレルムの名前に置き換えてください。"
